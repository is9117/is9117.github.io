<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Isaac's Tech Blog</title><link href="https://blog.i544c.com/" rel="alternate"></link><link href="https://blog.i544c.com/feeds/all.atom.xml" rel="self"></link><id>https://blog.i544c.com/</id><updated>2025-03-24T15:01:00+09:00</updated><entry><title>Model Context Protocol(MCP) 소개: 개념, 기술 구조와 활용 사례</title><link href="https://blog.i544c.com/model-context-protocolmcp-sogae-gaenyeom-gisul-gujowa-hwalyong-sarye.html" rel="alternate"></link><published>2025-03-24T14:47:00+09:00</published><updated>2025-03-24T15:01:00+09:00</updated><author><name>박이삭</name></author><id>tag:blog.i544c.com,2025-03-24:/model-context-protocolmcp-sogae-gaenyeom-gisul-gujowa-hwalyong-sarye.html</id><summary type="html">&lt;p&gt;Introduction to MCP&lt;/p&gt;</summary><content type="html">&lt;p&gt;최근 AI 개발자들 사이에서 &lt;strong&gt;MCP(Model Context Protocol)&lt;/strong&gt;가 큰 주목을 받고 있습니다. 2024년 11월 말 앤트로픽(Anthropic)이 이 MCP를 오픈소스로 공개한 이후 처음에는 조용했지만, 점차 개발자 커뮤니티와 소셜 미디어에서 화제가 되었죠. 왜일까요? AI 모델이 단순히 질문에 답하는 것을 넘어, 실제 업무에 필요한 외부 데이터에 직접 접근하고 활용하는 새로운 가능성을 열었기 때문입니다. 이번 글에서는 MCP의 개념과 등장 배경, 기술적 구조와 동작 방식, 실제 및 잠재적 활용 사례, 그리고 최근 특히 각광받는 이유를 살펴보겠습니다.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;MCP란 무엇이며 왜 등장했나?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;MCP(Model Context Protocol)&lt;/strong&gt;는 &lt;strong&gt;대형 언어 모델(LLM)&lt;/strong&gt;이 다양한 외부 데이터 소스 및 도구와 &lt;strong&gt;표준화된 방식으로 연결&lt;/strong&gt;될 수 있도록 고안된 개방형 프로토콜입니다. 쉽게 말해, MCP는 &lt;strong&gt;AI용 “USB-C 포트”&lt;/strong&gt;와 같습니다. 여러 기기를 하나의 포트로 연결하듯이, MCP를 통해 서로 다른 AI 모델과 데이터 소스를 단일한 인터페이스로 연결할 수 있습니다. 아래 그림은 MCP의 이런 &lt;strong&gt;“범용 커넥터”&lt;/strong&gt;로서의 역할을 보여줍니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/MCP/image.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;MCP 아키텍처 개념도: MCP를 USB-C 허브에 비유한 그림입니다. 우측 상단의 Claude 등 &lt;/em&gt;&lt;em&gt;MCP 호스트&lt;/em&gt;&lt;em&gt;(AI 앱)가 MCP 클라이언트를 통해 좌측 하단의 Slack, Gmail, 파일 시스템 등의 &lt;/em&gt;&lt;em&gt;MCP 서버&lt;/em&gt;&lt;em&gt;(데이터 소스 서비스)에 연결되어 컨텍스트를 주고받는 모습입니다. MCP가 일종의 허브/포트 역할을 하여 AI와 여러 외부 시스템을 &lt;/em&gt;&lt;em&gt;한 번에 호환&lt;/em&gt;&lt;em&gt;시키는 구조임을 보여줍니다.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;등장 배경: 단절된 정보와 M×N 문제&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;오늘날 AI 모델은 뛰어난 능력을 갖췄지만, &lt;strong&gt;필요한 데이터에 직접 접근하기 어려워&lt;/strong&gt; 제한된 환경에 갇혀 있었습니다. 새로운 데이터 소스마다 별도의 커넥터를 그때그때 개발해야 했고, 각 벤더나 애플리케이션마다 &lt;strong&gt;제각기 다른 방식의 통합&lt;/strong&gt;을 만들어내다 보니 호환성과 확장성이 떨어졌습니다. 이처럼 &lt;strong&gt;M개의 AI 애플리케이션&lt;/strong&gt;과 &lt;strong&gt;N개의 데이터 소스/도구&lt;/strong&gt;를 모두 연결하려면 M×N에 비례하는 통합 작업이 필요해지는 문제가 있었는데, 과거 개발 도구 분야에서 언급되던 &lt;strong&gt;“M×N 문제”&lt;/strong&gt;와 유사한 상황이었습니다. 예컨대 어떤 AI 앱은 특정 데이터베이스에 강하게 연동되지만 다른 데이터에는 약하거나, 각 앱이 비슷한 기능을 서로 호환되지 않게 따로 구현하는 등의 &lt;strong&gt;파편화된 생태계&lt;/strong&gt;가 형성되고 있었죠.&lt;/p&gt;
&lt;p&gt;앤트로픽의 MCP는 바로 이 문제를 해결하기 위해 나왔습니다. &lt;strong&gt;Language Server Protocol(LSP)&lt;/strong&gt;이 과거 에디터와 프로그래밍 언어의 통합 문제를 표준화로 풀었던 것처럼, &lt;strong&gt;MCP도 AI 애플리케이션과 외부 도구들의 연결을 표준화하여 M×N 문제를 M+N 문제로 단순화&lt;/strong&gt;합니다. 이제 각 AI 애플리케이션은 MCP 한 가지만 구현하면 되고, 각 도구/데이터 소스도 MCP 서버로 구현되기만 하면 됩니다. 그 결과 &lt;strong&gt;한 번 구현으로 모두 호환&lt;/strong&gt;되는 보다 &lt;strong&gt;지속가능한 생태계&lt;/strong&gt;가 만들어집니다. 앤트로픽 발표에서는 “단절된 정보 섬을 연결하고, 개별 통합에 들이던 노력을 하나의 프로토콜로 대체한다”라고 MCP의 목표를 설명합니다. 요컨대 &lt;strong&gt;MCP는 AI와 데이터 사이의 연결을 획기적으로 단순화&lt;/strong&gt;하는 공통 인터페이스인 것입니다.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;MCP의 정의와 목적&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;정리하면, MCP는 &lt;strong&gt;AI 모델과 외부 세계를 잇는 범용 연결 프로토콜&lt;/strong&gt;입니다. 이 프로토콜을 통해 AI 모델(예: 챗봇, 코딩 도우미 등)은 파일 시스템, 데이터베이스, API, 사내 문서, 업무 툴 등 &lt;strong&gt;다양한 출처의 데이터에 안전하게 접근&lt;/strong&gt;하고 상호작용할 수 있습니다. 기존에도 API 호출이나 플러그인 등으로 비슷한 통합을 했지만, MCP는 이를 더 &lt;strong&gt;표준적이고 유연한 방식으로 추상화&lt;/strong&gt;했습니다. 예를 들어 &lt;strong&gt;“지금 뉴욕의 날씨 알려줘”&lt;/strong&gt;라는 질문에, 과거에는 AI가 미리 학습된 지식만으로 답하거나 개발자가 날씨 API를 호출하도록 프로그래밍해야 했습니다. 하지만 MCP를 활용하면, AI가 &lt;strong&gt;실시간으로 외부의 날씨 서비스에 질의&lt;/strong&gt;하여 최신 정보를 가져와 답변할 수 있습니다. 또 &lt;strong&gt;“이 대화를 내 구글드라이브에 저장해줘”&lt;/strong&gt;처럼 &lt;strong&gt;AI가 외부 프로그램을 직접 실행&lt;/strong&gt;하거나 &lt;strong&gt;파일을 불러오는&lt;/strong&gt; 식의 양방향 작업도 표준화된 방식으로 수행될 수 있습니다. 이처럼 MCP는 &lt;strong&gt;LLM의 한계를 넓혀주는 컨텍스트 확장 슈퍼파워&lt;/strong&gt;라고 할 수 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;strong&gt;MCP의 기술 구조와 동작 방식&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;그렇다면 MCP는 어떻게 이러한 기능을 구현할까요? 기술적으로 MCP는 &lt;strong&gt;클라이언트-서버 아키텍처&lt;/strong&gt;를 따릅니다. 전반적인 그림은 다음과 같습니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;호스트(Host)&lt;/strong&gt;: MCP를 사용하는 &lt;strong&gt;AI 애플리케이션&lt;/strong&gt;입니다. 예를 들어 Claude Desktop 애플리케이션이나 IDE의 AI 비서 등이 호스트가 됩니다. 호스트는 AI 모델과 사용자 인터페이스를 가지고 있으면서, 외부 MCP 서버들과 연결을 맺어 데이터를 주고받는 주체입니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;클라이언트(Client)&lt;/strong&gt;: 호스트 내에서 동작하는 &lt;strong&gt;MCP 프로토콜 클라이언트&lt;/strong&gt;입니다. 이는 호스트와 각 MCP 서버 사이에 &lt;strong&gt;1:1 연결&lt;/strong&gt;을 담당하는 모듈입니다. 호스트 입장에서는 여러 서버에 붙을 수 있으므로, 각각에 대해 클라이언트 인스턴스가 생긴다고 볼 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;서버(Server)&lt;/strong&gt;: &lt;strong&gt;외부 데이터 소스나 기능을 노출하는 MCP 서버&lt;/strong&gt;입니다. 예를 들어 파일 시스템에 접근하는 서버, 데이터베이스 조회 서버, Slack 같은 서비스 연결 서버, 또는 커스텀 비즈니스 로직을 수행하는 서버 등을 만들 수 있습니다. 각 MCP 서버는 &lt;strong&gt;표준화된 MCP 인터페이스를 통해 자신의 데이터나 기능(capabilities)을 제공&lt;/strong&gt;합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="image2.png" src="../images/MCP/image2.png"&gt;&lt;/p&gt;
&lt;p&gt;이 구조에서 호스트(예: Claude AI)는 내부적으로 MCP 클라이언트를 통해 하나 이상의 서버에 연결되고, 각 서버는 &lt;strong&gt;자신이 가진 데이터/도구를 제공&lt;/strong&gt;하여 AI 모델이 활용할 수 있게 합니다. MCP 통신은 &lt;strong&gt;JSON-RPC 2.0&lt;/strong&gt; 규격으로 인코딩된 메시지를 사용하며, 클라이언트와 서버 간에 &lt;strong&gt;표준 입출력(stdin/stdout)&lt;/strong&gt;이나 &lt;strong&gt;HTTP(S) 연결(SSE 방식)&lt;/strong&gt; 등을 통해 주고받을 수 있습니다. 이는 마치 Language Server Protocol이 에디터와 언어 서버 간에 JSON-RPC로 통신하는 것과 비슷합니다.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;MCP 프로토콜의 프리미티브 개념&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;MCP는 &lt;strong&gt;몇 가지 핵심 개념(프리미티브, primitives)&lt;/strong&gt;으로 기능을 구조화합니다. &lt;strong&gt;서버 측&lt;/strong&gt;에는 세 가지 프리미티브가 있고, &lt;strong&gt;클라이언트 측&lt;/strong&gt;에는 두 가지 프리미티브가 있습니다 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;프롬프트(Prompt)&lt;/strong&gt;: &lt;strong&gt;AI 모델에게 주어질 프롬프트 템플릿&lt;/strong&gt;이나 지침을 서버가 제공하는 기능입니다. 예를 들어 코드 리뷰 봇이라면 “이 프로젝트의 코딩 컨벤션을 설명하고 코드에 적용하라”와 같은 템플릿을 MCP 서버가 프롬프트로 제공할 수 있습니다. 프롬프트는 결국 AI에게 주입되는 맥락을 형성하며, 잘 설계된 프롬프트는 API의 사전 정의와 비슷한 역할을 합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;리소스(Resource)&lt;/strong&gt;: AI 모델이 참고할 &lt;strong&gt;정적 또는 동적 데이터&lt;/strong&gt;입니다. 파일의 내용, 데이터베이스 레코드, 문서, 이미지, 로그 등 형식에 관계없이 구조화된 데이터를 리소스로 노출할 수 있습니다. 리소스는 읽기 전용으로 &lt;strong&gt;모델의 프롬프트 맥락에 포함&lt;/strong&gt;될 수 있는 자료들을 뜻합니다. 예를 들어, “매뉴얼 PDF 내용”이나 “최근 고객 문의 로그”를 리소스로 제공하면 모델이 답변을 생성할 때 근거 자료로 활용하게 할 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;도구(Tool)&lt;/strong&gt;: &lt;strong&gt;AI 모델이 호출할 수 있는 실행 함수 또는 액션&lt;/strong&gt;입니다. 모델이 단순 텍스트 응답뿐 아니라 외부 연산을 수행할 수 있게 해주는 인터페이스로, 예컨대 &lt;strong&gt;계산기, 웹 검색, DB 질의, 이메일 전송&lt;/strong&gt; 같은 기능들을 MCP Tool로 구현할 수 있습니다. 도구를 통해 LLM은 자신이 직접 못하는 작업을 외부 시스템에 위임하고 그 결과를 받아볼 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;루트(Root)&lt;/strong&gt;: (클라이언트 측) &lt;strong&gt;서버가 접근할 수 있는 파일시스템 등의 루트 경로&lt;/strong&gt;를 의미합니다. 예를 들어 호스트 애플리케이션이 /project 폴더를 한 루트로 공유하면, 서버는 그 하위에 존재하는 파일들을 리소스로 노출하는 식입니다. 즉 루트는 &lt;strong&gt;클라이언트(호스트) 측 자원에 대한 엔트리 포인트&lt;/strong&gt;를 서버에 알려주는 개념입니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;샘플링(Sampling)&lt;/strong&gt;: (클라이언트 측) &lt;strong&gt;서버가 반대로 클라이언트의 LLM에게 프롬프트를 던져 답을 얻어오는 작업&lt;/strong&gt;을 지칭합니다. 일반적인 상황과 반대로, MCP 서버 쪽에서 추가적인 LLM 응답 생성이 필요할 때 클라이언트에 요청을 보내는 기능입니다. 이를 활용하면 &lt;strong&gt;에이전트&lt;/strong&gt;가 어떤 작업 중에 &lt;strong&gt;다시 모델에게 질문을 던져 연속적인 추론을 진행&lt;/strong&gt;하는 등의 (이른바 self-ask) 동작도 가능해집니다. 다만 Anthropic 측은 이러한 샘플링 기능을 남용하면 &lt;strong&gt;모델이 자체적으로 루프에 빠질 위험&lt;/strong&gt;이 있으므로, &lt;strong&gt;반드시 인간 승인을 거치게 하는 등&lt;/strong&gt; 안전장치를 둘 것을 권고하고 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;요약:&lt;/strong&gt; MCP 서버는 &lt;strong&gt;프롬프트&lt;/strong&gt;, &lt;strong&gt;리소스&lt;/strong&gt;, &lt;strong&gt;도구&lt;/strong&gt;라는 세 가지 타입의 기능을 제공하고, MCP 클라이언트(호스트)는 &lt;strong&gt;루트&lt;/strong&gt;와 &lt;strong&gt;샘플링&lt;/strong&gt;이라는 기능을 제공합니다. 이러한 프리미티브들은 궁극적으로 모두 &lt;strong&gt;LLM의 컨텍스트 창을 채우는 역할&lt;/strong&gt;을 하지만, 의도에 따라 구분되어 있습니다. (예: 단순 참고자료는 리소스, API 호출은 도구, 등)&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;컨텍스트 데이터의 표현과 참조 방식&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;MCP에서 주고받는 데이터는 &lt;strong&gt;JSON-RPC 메시지&lt;/strong&gt;들로 캡슐화되어 있습니다. 예를 들어 서버가 갖고 있는 리소스 목록을 보내거나, 클라이언트가 특정 도구를 호출해달라는 요청을 할 때, 모두 JSON 형태의 요청/응답이 오갑니다. 각 메시지에는 "jsonrpc": "2.0", 메소드 이름("method":...), 필요한 파라미터("params":...), 그리고 응답 시 결과나 에러 등이 명시됩니다.&lt;/p&gt;
&lt;p&gt;특히 &lt;strong&gt;리소스(Resource)&lt;/strong&gt;는 MCP에서 &lt;strong&gt;컨텍스트 데이터&lt;/strong&gt;를 다루는 기본 단위인데, 각 리소스는 &lt;strong&gt;고유한 URI&lt;/strong&gt;로 식별됩니다. 예를 들어 파일 리소스는 file:// 스키마로 경로를 표시하고, 데이터베이스 항목은 postgres://나 db:// 같은 커스텀 스키마를 사용할 수 있습니다. 리소스 URI는 그 자원의 위치나 종류를 나타내며, 실제 내용은 &lt;strong&gt;텍스트&lt;/strong&gt; 또는 &lt;strong&gt;바이너리(blob)&lt;/strong&gt; 형태로 제공됩니다. 클라이언트(호스트 애플리케이션)는 제공된 리소스 URI들을 보고 어떤 것을 모델에게 맥락으로 넣을지 &lt;strong&gt;선택하거나 자동 선택&lt;/strong&gt;할 수 있습니다. 예컨대 Claude Desktop에서는 사용자가 UI에서 리소스를 선택해야 모델이 해당 내용을 읽게 하고, 향후 일부 클라이언트는 &lt;strong&gt;휴리스틱&lt;/strong&gt;이나 &lt;strong&gt;AI 자체 판단&lt;/strong&gt;으로 리소스를 자동 선택하게 할 수도 있다고 합니다. 리소스 사용 방식은 이렇게 &lt;strong&gt;클라이언트 앱에서 제어&lt;/strong&gt;되며, 이는 모델이 맥락으로 참고할 수 있는 자료를 투명하게 관리하기 위함입니다.&lt;/p&gt;
&lt;p&gt;한편 &lt;strong&gt;도구(Tool)&lt;/strong&gt;의 실행 결과도 특별한 방식으로 전달됩니다. 도구는 함수 호출이므로 반환값이 있을 텐데, MCP 서버는 이를 곧바로 모델 답변에 섞는 게 아니라 &lt;strong&gt;content 필드&lt;/strong&gt;를 통해 &lt;strong&gt;모델에게만 전달되는 숨겨진 응답&lt;/strong&gt;으로 보냅니다. 예를 들어 get_weather라는 도구를 호출한 결과(현재 날씨 정보 JSON)는 사용자에게 바로 노출되기보다 모델만 참고하도록 audience: ["assistant"]이라는 &lt;strong&gt;주석(annotations)&lt;/strong&gt;과 함께 컨텍스트로 제공됩니다. 그 뒤 모델은 이 정보를 활용해 최종 사용자에게 줄 답변을 생성하게 되죠. 이를 통해 사용자에게는 자연어 답변만 보이고, 내부적으로는 MCP가 데이터를 주고받아 활용한 것이 됩니다.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;요청/응답 예시: 날씨 정보를 가져오는 MCP 활용&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;MCP의 동작을 좀 더 직관적으로 이해하기 위해, &lt;strong&gt;간단한 예시 시나리오&lt;/strong&gt;를 살펴보겠습니다. 가령 한 AI 비서가 “현재 뉴욕의 날씨가 어떤지 알려줘”라는 질문을 받았다고 해보죠. 이 AI 비서는 날씨 API에 접근하는 MCP 서버와 연결되어 있으며, 해당 서버에는 get_weather라는 이름의 &lt;strong&gt;툴(tool)&lt;/strong&gt;이 제공되어 있다고 가정합니다. 아래는 이 경우 MCP 클라이언트(호스트)와 MCP 서버 사이에 오가는 &lt;strong&gt;JSON-RPC 메시지&lt;/strong&gt;의 흐름입니다:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// (1) 클라이언트 → 서버 : 사용 가능한 도구 목록 요청&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;jsonrpc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;method&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tools/list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;params&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// (서버 → 클라이언트 응답) : 사용 가능한 도구 목록&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;jsonrpc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;result&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;tools&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;get_weather&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Returns current weather conditions for the specified location.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;inputSchema&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;latitude&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;longitude&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;required&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;latitude&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;longitude&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;//...다른 툴들 목록...&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// (2) 클라이언트 → 서버 : 사용자가 get_weather 도구 사용을 승인하면, 해당 툴 호출 요청&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;jsonrpc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;method&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tools/call&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;params&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;get_weather&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;arguments&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;latitude&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;40.7128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;longitude&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;-74.0060&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// (서버 → 클라이언트 응답) : get_weather 실행 결과 (모델에게 전달될 content)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;jsonrpc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{\&amp;quot;temperature\&amp;quot;: 12, \&amp;quot;conditions\&amp;quot;: \&amp;quot;cloudy\&amp;quot;, \&amp;quot;humidity\&amp;quot;: 85}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;annotations&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;audience&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;assistant&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;위 시나리오를 설명하면 다음과 같습니다: 먼저 클라이언트가 tools/list를 호출해 서버의 도구 목록을 받아옵니다. 이 예에서는 get_weather라는 툴이 있고, 어떤 입력을 요구하는지 (latitude, longitude) 스키마로 기술되어 있습니다. 그런 다음 AI 모델이 이 툴을 사용하고자 할 때, 사용자의 승인을 거쳐("사용해도 될까요?") tools/call 요청을 서버에 보냅니다. 서버는 내부적으로 실제 날씨 API를 호출하고, 그 결과(예: 기온 12도, 흐림)를 "content" 형태로 클라이언트에 보내줍니다. 이 "content" 데이터는 &lt;strong&gt;모델만 볼 수 있는 컨텍스트&lt;/strong&gt;로 전달되며 , 이후 AI 모델은 이를 참고해 사용자에게 “현재 뉴욕은 기온 12도에 흐린 날씨이며, 습도는 85%입니다”와 같이 답변하게 됩니다. 사용자는 AI가 외부 정보를 활용했다는 사실을 인지하지 못할 수도 있지만, &lt;strong&gt;MCP 덕분에 AI가 최신 데이터를 바탕으로 정확한 답변&lt;/strong&gt;을 해준 것이죠. 실제 Anthropic의 예시에서도 MCP 서버를 파이썬으로 간단히 구현해 &lt;strong&gt;날씨 정보를 가져오는 퀵스타트 데모&lt;/strong&gt;를 보여주고 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;strong&gt;실제 및 잠재적인 활용 사례&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;MCP는 AI의 &lt;strong&gt;맥락(Context)&lt;/strong&gt;을 확장함으로써 다양한 활용 사례를 만들어냅니다. 현재 이루어지고 있거나 앞으로 기대되는 활용 방안을 몇 가지 살펴보겠습니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;💻 IDE 코딩 비서 및 개발 도구 통합:&lt;/strong&gt; 앞서 언급했듯 여러 개발 도구 회사들이 MCP를 채택하고 있습니다. 예를 들어 &lt;strong&gt;Sourcegraph Cody&lt;/strong&gt;나 &lt;strong&gt;Replit&lt;/strong&gt;, &lt;strong&gt;Zed 에디터&lt;/strong&gt; 등은 MCP를 활용해 &lt;strong&gt;프로젝트 코드, git 이력, 문서 등 개발 맥락을 AI에 제공&lt;/strong&gt;하고 있습니다. AI 코딩 비서는 MCP 서버를 통해 저장소의 관련 코드를 검색하거나, 에러 로그를 읽거나, CI 결과를 가져와 참고하면서 더 정확한 코드 생성과 문제 해결을 할 수 있습니다. 이를 통해 개발자는 일일이 문서를 찾지 않아도 AI가 현재 편집 중인 코드와 연관된 정보를 자동으로 찾아주는 환경이 가능해집니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;📊 엔터프라이즈 데이터 접근 및 업무 자동화:&lt;/strong&gt; 기업 내부의 &lt;strong&gt;지식 저장소, 업무 도구, 협업 툴&lt;/strong&gt; 등에 AI를 접목해 생산성을 높이는 데 MCP가 활용될 수 있습니다. 앤트로픽은 이미 &lt;strong&gt;Google Drive, Slack, GitHub, Git, Postgres DB&lt;/strong&gt; 등 인기 서비스에 대한 MCP 서버 예시를 공개했는데요 , 이를 응용하면 &lt;strong&gt;사내 문서 요약&lt;/strong&gt;, &lt;strong&gt;슬랙 대화 모니터링 및 요약&lt;/strong&gt;, &lt;strong&gt;고객 티켓 분류&lt;/strong&gt; 같은 작업을 AI 에이전트가 수행할 수 있습니다. 예를 들어 &lt;strong&gt;“우리 팀 Slack 채널에서 지난주 중요한 이슈 요약해줘”&lt;/strong&gt;라고 하면, AI가 Slack MCP 서버를 통해 채널 메시지를 읽고 요약할 수 있고, &lt;strong&gt;“이 보고서를 내 드라이브에 저장해줘”&lt;/strong&gt;라고 하면 Drive MCP 서버를 통해 파일을 업로드할 수도 있습니다. 이러한 &lt;strong&gt;양방향 연결&lt;/strong&gt;을 통해 AI가 사람 대신 반복적인 업무를 자동화해 줄 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;🤖 에이전트 협업 및 다중 모델 컨텍스트 공유:&lt;/strong&gt; MCP는 한층 &lt;strong&gt;고도화된 AI 에이전트 시스템&lt;/strong&gt;을 구축하는 데에도 응용될 수 있습니다. 예를 들어, 여러 개의 전문 AI 에이전트가 있는 시나리오를 생각해봅시다. 한 에이전트는 데이터 분석 전문이고, 다른 하나는 리포트 작성 전문이라고 할 때, 이들이 MCP를 통해 &lt;strong&gt;공통된 컨텍스트를 공유&lt;/strong&gt;하며 협업할 수 있습니다. 데이터 분석 에이전트가 분석 결과를 MCP 리소스로 올려두면, 리포트 에이전트가 그 리소스를 읽어와 보고서를 작성하는 식입니다. 심지어 서로 다른 LLM(예: Anthropic Claude와 다른 오픈소스 LLM)이 있더라도 &lt;strong&gt;한 번 설정한 컨텍스트를 여러 모델이 동시에 활용&lt;/strong&gt;할 수 있습니다. 이는 이전까지는 상상하기 어려웠던 일로, 모델마다 별도로 정보를 주입해야 했다면 이제는 &lt;strong&gt;MCP를 통해 모델 간에 컨텍스트를 자유롭게 주고받을 수 있게 된 것&lt;/strong&gt;입니다. 또한 MCP의 &lt;strong&gt;실시간 업데이트&lt;/strong&gt; 기능을 사용하면 (예: resources/subscribe를 활용한 변경 감지) 하나의 모델이 갱신한 정보를 다른 모델들이 바로 반영받아 &lt;strong&gt;일관된 최신 정보&lt;/strong&gt;를 유지할 수도 있습니다. 이런 특성은 협업 에이전트나 멀티모달 AI 시스템에서 매우 유용하며, 앞으로 다양한 연구와 실험이 기대되는 부분입니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;🔧 기타 맞춤형 확장:&lt;/strong&gt; MCP의 오픈 특성을 이용하면 무궁무진한 맞춤 사례가 가능합니다. 예를 들어 &lt;strong&gt;IoT/엣지 디바이스&lt;/strong&gt;의 센서 데이터를 MCP로 연결해 AI가 실시간 제어를 한다거나, &lt;strong&gt;게임 엔진&lt;/strong&gt; 내부 상태를 MCP로 노출해 AI NPC가 그 정보를 참고해 동작하게 할 수도 있습니다. 핵심은 표준을 따르기만 하면 AI 쪽이나 데이터 쪽이나 &lt;strong&gt;누구나 자신만의 MCP 서버/클라이언트를 구현&lt;/strong&gt;하여 연결할 수 있다는 점입니다. 이미 오픈소스로 공개된 &lt;strong&gt;참조 구현들과 SDK(Python, TypeScript 등)&lt;/strong&gt; 을 활용하면 몇 줄의 코드로 간단한 MCP 서버를 만들어 쓸 수 있고, 경우에 따라 &lt;strong&gt;LLM 자체&lt;/strong&gt;에게 MCP 서버 코드를 작성시켜 빠르게 커스터마이징하는 것도 가능해졌습니다. 이러한 낮은 진입장벽 덕분에 커뮤니티에서도 다양한 MCP 활용 아이디어와 프로젝트들이 쏟아지고 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;strong&gt;MCP가 최근 주목받는 이유&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;이처럼 MCP는 기술적으로나 활용 면에서 흥미로운 가능성을 제공하지만, &lt;strong&gt;왜 하필 최근에 더욱 주목&lt;/strong&gt;받고 있을까요? 몇 가지 배경을 짚어보겠습니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Anthropic의 공개 및 Claude 통합:&lt;/strong&gt; 가장 직접적인 계기는 Anthropic의 공식 발표와 오픈소스화입니다. 2024년 말 Claude 3 모델 패밀리를 발표한 Anthropic은 곧이어 MCP를 공개하고 &lt;strong&gt;Claude Desktop 앱에 MCP 클라이언트를 내장&lt;/strong&gt;시켰습니다. 사용자는 Claude Desktop에서 별도 코딩 없이 설정만으로 MCP 서버들과 연결해 쓸 수 있게 되었고, 이는 MCP의 실용성을 크게 높였습니다. 예를 들어 앞선 날씨 예시도 Claude Desktop과 간단한 Python MCP 서버로 금세 구현할 수 있었죠. 또한 Anthropic은 &lt;strong&gt;Claude 3.5 Sonnet&lt;/strong&gt; 모델이 MCP 서버 구현을 돕는 데 능숙하다며, 실제로 몇 가지 &lt;strong&gt;레퍼런스 MCP 서버(Google Drive, Slack 등)&lt;/strong&gt;를 직접 작성해 공개하기도 했습니다. 이런 행보는 커뮤니티에 “이것이 쓸모있는 기술이구나” 하고 신호를 보냈고, &lt;strong&gt;블록(Block)&lt;/strong&gt;이나 &lt;strong&gt;Apollo&lt;/strong&gt; 같은 초기 도입사례도 등장하여 신뢰를 더했습니다. 요약하면, &lt;strong&gt;강력한 AI 모델(Claude) + 개방형 MCP 플랫폼&lt;/strong&gt; 조합이 나와 &lt;strong&gt;누구나 쉽게 실험&lt;/strong&gt;해볼 수 있는 환경이 만들어지면서 관심이 폭발적으로 증가한 것입니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;기존 접근법의 한계 극복:&lt;/strong&gt; MCP가 특별히 각광받는 것은 기존의 LLM 도구 통합 방식에 비해 &lt;strong&gt;범용성과 편의성이 뛰어나기 때문&lt;/strong&gt;입니다. 예를 들어 OpenAI의 함수 호출이나 ChatGPT 플러그인은 &lt;strong&gt;특정 모델에 종속&lt;/strong&gt;되고 각기 다른 포맷을 가집니다. 반면 MCP는 특정 벤더에 묶이지 않은 &lt;strong&gt;오픈 표준&lt;/strong&gt;이므로 Claude 외에 다른 모델이나 애플리케이션도 채택할 수 있고, 한 번 만든 MCP 서버는 여러 곳에서 재사용할 수 있습니다. 또한 API 키 발급, 프롬프트 엔지니어링 등 개발자만 할 수 있었던 설정 작업을 줄이고, &lt;strong&gt;일반 사용자도 자연어로 AI에게 “이 파일 읽어봐”라고 지시&lt;/strong&gt;하면 그 뒤의 연결 동작은 MCP와 AI가 처리하게 하는 등 &lt;strong&gt;사용성 향상&lt;/strong&gt; 가능성도 있습니다. 실제 사례를 보면, 예전에는 엑셀의 데이터를 AI에 쓰려면 매크로나 API로 코딩해야 했지만 이제는 &lt;strong&gt;“엑셀 파일 내용을 요약해줘”&lt;/strong&gt;와 같이 명령하면 AI가 MCP를 통해 데이터를 가져와 처리하는 식의 데모들도 공유되고 있습니다. 이러한 &lt;strong&gt;낮은 진입 장벽&lt;/strong&gt;과 &lt;strong&gt;개발 효율성&lt;/strong&gt;은 MCP에 대한 긍정적 평가를 높여주는 요소입니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;에이전트 및 멀티턴 AI 트렌드와의 접목:&lt;/strong&gt; 2023년 이후로 AI 비서가 단순 1회성 답변이 아니라 &lt;strong&gt;연속적인 대화와 작업(멀티턴)&lt;/strong&gt;, 그리고 &lt;strong&gt;자동화 에이전트&lt;/strong&gt;로 발전하는 흐름이 두드러졌습니다. 챗봇에게 업무 위임, 예를 들어 이메일 작성 후 전송하거나 일정 조율을 맡기는 등의 시나리오가 현실화되면서, AI가 &lt;strong&gt;맥락을 유지&lt;/strong&gt;하고 &lt;strong&gt;필요한 액션을 실행&lt;/strong&gt;하는 능력이 중요해졌습니다. MCP는 바로 이 지점에서 핵심 열쇠로 부상했습니다. 표준화된 &lt;strong&gt;맥락 공유 + 도구 사용&lt;/strong&gt; 프레임워크를 제공함으로써, 멀티턴 시나리오에서 AI가 이전 턴에서 얻은 정보를 다음 턴에 계속 활용하고 외부 도구와도 끊김없이 상호작용할 수 있게 해줍니다. 예컨대 첫 대화에서 사용자 지식을 웹에서 찾은 뒤, 두 번째 대화에서 그 결과를 요약하고, 세 번째 대화에서 보고서로 정리해 드라이브에 저장하는 &lt;strong&gt;일련의 작업 흐름&lt;/strong&gt;을 MCP 기반 에이전트로 구현할 수 있는 식입니다. 이런 &lt;strong&gt;연속적이고 자율적인 AI 활용&lt;/strong&gt;에 대한 기대가 높아지면서, 이를 뒷받침해줄 MCP 기술에 자연스럽게 스포트라이트가 모이고 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;커뮤니티와 생태계의 성장:&lt;/strong&gt; 마지막으로, MCP가 &lt;strong&gt;오픈소스&lt;/strong&gt;라는 점은 생태계 성장을 가속화하고 있습니다. 누구나 MCP에 기여하거나 자신의 서비스에 맞게 커스터마이징할 수 있으므로, 한두 기업의 노력에 의존하지 않고도 &lt;strong&gt;다양한 아이디어가 빠르게 시도&lt;/strong&gt;되고 있습니다. 실제로 GitHub에는 벌써 커뮤니티가 만든 MCP 서버(예: Notion 연동, Jira 연동 등)가 공유되고 있고 , 여러 개발 블로그와 유튜브에서 MCP 튜토리얼과 후기가 쏟아지고 있습니다. 오픈 표준이 가져오는 이러한 &lt;strong&gt;네트워크 효과&lt;/strong&gt;는 MCP를 단순한 기능 이상의 &lt;strong&gt;업계 표준&lt;/strong&gt;으로 자리잡게 할 가능성을 높여주고 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;strong&gt;마치며: MCP가 가져올 변화&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;MCP(Model Context Protocol)는 요약하자면 &lt;strong&gt;“LLM 시대의 데이터/도구 통합 표준”&lt;/strong&gt;입니다. 아직 초창기이지만, 그 잠재력은 매우 큽니다. 개발자는 MCP를 통해 더 이상 각종 API 연동에 얽매이지 않고 &lt;strong&gt;AI 기능을 확장&lt;/strong&gt;시킬 수 있고, 사용자는 더욱 &lt;strong&gt;똑똑한 AI 비서&lt;/strong&gt;를 만나게 될 것입니다. 물론 해결해야 할 과제—예를 들어 보안이나 권한 관리, 표준의 성숙도—도 남아 있지만 , MCP에 대한 업계의 관심과 참여가 이어진다면 이러한 부분도 빠르게 개선되리라 기대됩니다.&lt;/p&gt;
&lt;p&gt;기존에 &lt;strong&gt;LSP(Language Server Protocol)&lt;/strong&gt;가 개발자 도구 생태계를 표준화하여 대폭 발전시켰듯이, &lt;strong&gt;MCP도 AI 활용 생태계를 한 단계 끌어올릴 혁신적인 촉매&lt;/strong&gt;가 될지 주목됩니다. AI 에이전트들이 &lt;strong&gt;필요한 모든 컨텍스트를 자유롭게 주고받으며 협업&lt;/strong&gt;하는 미래, 그리고 그 밑단을 지탱하는 보이지 않는 표준으로서 MCP의 역할을 기대해 봐도 좋을 것 같습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;참고 자료:&lt;/strong&gt; Anthropic 공식 블로그의 &lt;a href="https://www.anthropic.com/news/model-context-protocol"&gt;MCP 발표 글&lt;/a&gt;, &lt;a href="https://modelcontextprotocol.io"&gt;MCP 공식 사이트&lt;/a&gt;, InfoQ 뉴스 등, MCP와 관련된 더욱 자세한 구현 가이드는 위키독스 &lt;a href="https://wikidocs.net/268601"&gt;MCP 실무 가이드&lt;/a&gt;에도 잘 정리되어 있으니 참고하시길 바랍니다. 🚀&lt;/p&gt;</content><category term="ai"></category><category term="backend"></category><category term="llm"></category></entry><entry><title>LLM embedding &amp; vector database의 소개</title><link href="https://blog.i544c.com/llm-embedding-vector-databaseyi-sogae.html" rel="alternate"></link><published>2024-12-30T13:10:00+09:00</published><updated>2024-12-30T13:39:00+09:00</updated><author><name>박이삭</name></author><id>tag:blog.i544c.com,2024-12-30:/llm-embedding-vector-databaseyi-sogae.html</id><summary type="html">&lt;p&gt;LLM embedding&lt;/p&gt;</summary><content type="html">&lt;h2&gt;1. 서론 (Introduction)&lt;/h2&gt;
&lt;h3&gt;1.1 LLM 임베딩(Embeddings)의 정의&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image.png"&gt;&lt;/p&gt;
&lt;p&gt;대형 언어 모델(LLM)에서의 임베딩은 단어, 문장, 혹은 문서와 같은 텍스트 단위를 의미·문법 정보를 담은 &lt;strong&gt;숫자 벡터&lt;/strong&gt;로 변환한 것을 말합니다. 텍스트를 연속적인 벡터 공간으로 바꾸어, 서로 다른 텍스트 간의 유사도(관련성)를 정량화할 수 있도록 해줍니다. 이러한 임베딩은 모델 학습 과정에서 습득되어, 미묘한 언어적 특징까지 인코딩합니다. 따라서 유사도 검색이나 분류, 군집화 등의 &lt;strong&gt;다양한 작업&lt;/strong&gt;을 위한 핵심 빌딩 블록 역할을 합니다.&lt;/p&gt;
&lt;h3&gt;1.2 역사적 배경: Word/LLM 임베딩의 진화&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%201.png"&gt;&lt;/p&gt;
&lt;p&gt;현대 LLM 이전에는 Word2Vec, GloVe 같은 방식으로 &lt;strong&gt;정적(Static) 임베딩&lt;/strong&gt;을 사용해, 각 단어당 하나의 벡터를 할당했습니다. 이후 Transformer 기반 모델(BERT, GPT 등)이 등장하면서 &lt;strong&gt;맥락(Context)에 따라 달라지는 임베딩&lt;/strong&gt;이 가능해졌고, 이는 감성 분석이나 QA 같은 작업 성능을 크게 끌어올렸습니다. 현재는 더 대규모의 모델로 발전하며, 더욱 깊은 의미를 담아낼 수 있는 임베딩을 제공하고 있습니다.&lt;/p&gt;
&lt;h3&gt;1.3 왜 벡터 임베딩이 특별한가&lt;/h3&gt;
&lt;p&gt;벡터 임베딩은 텍스트의 표면적인 단어 매칭을 넘어 &lt;strong&gt;기저 의미(Semantics)&lt;/strong&gt; 를 포착하기 때문에 각기 다른 단어로 구성된 문장도 의미가 유사하면 근접한 벡터로 표현됩니다. 이는 현대 NLP 기반의 &lt;strong&gt;시맨틱 검색, 추천 시스템&lt;/strong&gt; 등에서 핵심적입니다. 기존의 기호(symbolic) 접근과 달리, 이 &lt;strong&gt;밀집(dense) 벡터&lt;/strong&gt;는 도메인이나 작업을 가리지 않고 &lt;strong&gt;범용적으로 활용&lt;/strong&gt;하기 유리합니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt=" &amp;lt; 백터 검색의 정점에 오르다 | DAN24 &amp;gt;" src="../images/llm/image%202.png"&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt; 백터 검색의 정점에 오르다 | DAN24 &amp;gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;2. LLM에서 임베딩 추출하기 (Retrieving Embeddings from LLMs)&lt;/h2&gt;
&lt;h3&gt;2.1 LLM의 전형적인 아키텍처&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%203.png"&gt;&lt;/p&gt;
&lt;p&gt;https://newsletter.theaiedge.io/p/understanding-the-self-attention&lt;/p&gt;
&lt;p&gt;대부분의 대형 언어 모델은 Transformer 구조를 사용하며, &lt;strong&gt;Self-Attention&lt;/strong&gt; 기법으로 맥락적 관계를 학습합니다. 모델은 여러 층(예: 12층, 24층 이상)으로 구성되어 입력 텍스트의 표현을 점진적으로 정교화합니다. BERT의 &lt;code&gt;[CLS]&lt;/code&gt; 같은 특수 토큰이나 마지막 히든 레이어를 임베딩으로 활용하는 경우가 많습니다. 어떤 위치에서 벡터를 추출해야 최적의 임베딩이 나오는지 이해하는 것이 중요합니다.&lt;/p&gt;
&lt;h3&gt;2.2 레이어 선택과 풀링(Pooling) 전략&lt;/h3&gt;
&lt;p&gt;임베딩 품질은 어느 레이어에서 추출하느냐에 따라 크게 달라집니다. 최종 히든 레이어를 쓰는 경우도 있지만, 더 범용적 특징을 얻기 위해 중간 레이어를 활용하기도 합니다. &lt;code&gt;[CLS]&lt;/code&gt; 토큰을 사용하는지, 모든 토큰 벡터를 평균(average)하거나 맥스 풀링(max pooling)하는지에 따라 결과가 달라집니다. 이러한 선택은 &lt;strong&gt;적용 과제와 도메인&lt;/strong&gt;에 따라 달라집니다.&lt;/p&gt;
&lt;h3&gt;2.3 임베딩 추출 실무 가이드&lt;/h3&gt;
&lt;p&gt;개발자는 일반적으로 &lt;strong&gt;Hugging Face Transformers&lt;/strong&gt;와 같은 라이브러리를 통해 사전 학습된 모델을 간단한 코드로 불러와 임베딩을 생성합니다. 전형적인 워크플로는 텍스트를 토크나이즈(tokenize)하고, 모델에 입력한 뒤 특정 레이어의 출력을 추출하는 식입니다. 분야 특화 작업(예: 법률, 의료 등)에서는 &lt;strong&gt;파인튜닝&lt;/strong&gt;이나 도메인 적응이 필요할 수도 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%204.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;3. 임베딩의 종류 (Types of Embeddings)&lt;/h2&gt;
&lt;h3&gt;3.1 단어 수준 임베딩 (Word-Level Embeddings)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%205.png"&gt;&lt;/p&gt;
&lt;p&gt;단어 수준 임베딩은 각 단어마다 밀집 벡터를 할당합니다. Word2Vec 같은 &lt;strong&gt;정적 임베딩&lt;/strong&gt;은 맥락에 상관없이 동일 벡터를 사용하지만, Transformer 기반 시스템은 단어가 등장하는 맥락에 따라 벡터가 달라집니다. 품사 태깅, 기초적인 텍스트 유사도 등에는 쓸 만하지만, 더 긴 문맥이나 담화 정보를 반영하기에는 제한적일 수 있습니다.&lt;/p&gt;
&lt;h3&gt;3.2 문장 수준 임베딩 (Sentence-Level Embeddings)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%202.png"&gt;&lt;/p&gt;
&lt;p&gt;문장 전체를 단일 벡터로 표현하여, 개별 단어보다 &lt;strong&gt;포괄적인 의미&lt;/strong&gt;를 담아냅니다. Sentence-BERT나 Universal Sentence Encoder 등이 대표적이며, 시맨틱 검색이나 문장 클러스터링 같은 작업에서 자주 사용됩니다. 서로 다른 표현을 쓰더라도 &lt;strong&gt;의미가 유사&lt;/strong&gt;하면 문장 벡터가 가깝게 위치해 정확한 검색 및 분류를 가능하게 합니다.&lt;/p&gt;
&lt;h3&gt;3.3 문서/단락 수준 임베딩 (Document/Paragraph-Level Embeddings)&lt;/h3&gt;
&lt;p&gt;단락이나 전체 문서처럼 긴 텍스트를 하나의 벡터로 요약하여 &lt;strong&gt;주요 아이디어&lt;/strong&gt;를 포착합니다. 문서 분류, 요약, 대규모 정보 검색에 유용합니다. 다만 너무 긴 텍스트를 한 벡터에 압축할 경우 정보 손실이 발생할 수 있어, &lt;strong&gt;청크(chunk) 단위 분할&lt;/strong&gt;이나 &lt;strong&gt;계층적(hierarchical) 임베딩&lt;/strong&gt; 기법을 고려해야 합니다.&lt;/p&gt;
&lt;h3&gt;3.4 특수 목적 임베딩 (Specialized Embeddings)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%206.png"&gt;&lt;/p&gt;
&lt;p&gt;의료, 법률, 금융처럼 특수 도메인에서는 &lt;strong&gt;전문 용어와 맥락&lt;/strong&gt;을 더 잘 반영하는 도메인 특화 모델이 필요합니다. 예컨대 CLIP과 같이 텍스트와 이미지를 모두 다루는 &lt;strong&gt;멀티모달 임베딩&lt;/strong&gt;은 다양한 형식의 데이터 간 매핑을 수행합니다. 이처럼 특정 도메인 코퍼라로 파인튜닝을 수행하면 해당 분야 과제에서 성능이 크게 향상됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;4. 벡터 데이터베이스의 역할 (Role of Vector Databases)&lt;/h2&gt;
&lt;h3&gt;4.1 벡터 데이터베이스란?&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%207.png"&gt;&lt;/p&gt;
&lt;p&gt;벡터 데이터베이스는 &lt;strong&gt;고차원 임베딩 벡터&lt;/strong&gt;를 대량으로 저장·검색할 수 있도록 특화된 데이터 스토어입니다. 기존 관계형 DB는 대규모 벡터 연산에 한계가 있습니다. 반면 벡터 DB는 유사도 검색, 추천, 이상 탐지 같은 작업을 위해 &lt;strong&gt;최근접 이웃(Nearest Neighbor) 알고리즘&lt;/strong&gt;을 빠르게 수행하도록 설계되었습니다.&lt;/p&gt;
&lt;h3&gt;4.2 핵심 기능 (Key Features)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%208.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%209.png"&gt;&lt;/p&gt;
&lt;p&gt;가장 가까운 상위 k개의 벡터를 빠르게 찾는 기능, &lt;strong&gt;근사 최근접 이웃(ANN)&lt;/strong&gt; 인덱싱, 그리고 HNSW(Hierarchical navigable small world) 같은 특수 데이터 구조가 중요합니다. 대규모 데이터를 처리하기 위해서는 샤딩(sharding), 파티셔닝(partitioning), 분산 인덱싱 같은 &lt;strong&gt;확장성&lt;/strong&gt;이 필수적입니다. 일부 벡터 DB는 메타데이터 필터링이나 기존 데이터 파이프라인과의 연동 기능도 제공합니다.&lt;/p&gt;
&lt;h3&gt;4.3 대표적인 벡터 데이터베이스와 프레임워크&lt;/h3&gt;
&lt;p&gt;자주 쓰이는 라이브러리 및 서비스로는 &lt;strong&gt;FAISS(Facebook AI Similarity Search)&lt;/strong&gt;, Milvus, Pinecone, Weaviate 등이 있습니다. FAISS는 오픈소스 라이브러리 중 &lt;strong&gt;고성능&lt;/strong&gt;으로 유명하고, Milvus나 Weaviate는 클러스터 관리 및 API 등 &lt;strong&gt;종합 기능&lt;/strong&gt;을 제공합니다. Pinecone 같은 관리형 서비스는 인프라 설정이 간단해 프로토타입을 빠르게 만들기에 적합합니다.&lt;/p&gt;
&lt;h3&gt;4.4 벡터 데이터베이스 아키텍처(pinecone as example)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%2010.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="pinecone write path architecture" src="../images/llm/image%2011.png"&gt;&lt;/p&gt;
&lt;p&gt;pinecone write path architecture&lt;/p&gt;
&lt;p&gt;대부분의 벡터 DB는 고차원 검색에 필요한 연산 복잡도를 줄이기 위해 &lt;strong&gt;특수 인덱스 구조&lt;/strong&gt;를 사용합니다. 대규모 처리를 위해 데이터를 여러 샤드로 나누어 저장하기도 합니다. 일부 시스템은 캐시 계층이나 동적 인덱싱을 통해 &lt;strong&gt;실시간 업데이트&lt;/strong&gt;를 지원합니다. 이러한 아키텍처적 요소를 이해하면 검색 속도와 정확도를 &lt;strong&gt;최적화&lt;/strong&gt;하는 데 도움이 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;5. 벡터 유사도 측정 기법 (Vector Similarity Measures)&lt;/h2&gt;
&lt;h3&gt;5.1 공통 유사도·거리(metric) 지표&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%2012.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코사인 유사도(Cosine similarity)&lt;/strong&gt;, &lt;strong&gt;도트 프로덕트(dot product)&lt;/strong&gt;, &lt;strong&gt;유클리드 거리(Euclidean distance)&lt;/strong&gt; 등이 벡터 간 “가까움”을 평가하는 대표 지표입니다. 코사인 유사도는 벡터 크기보다 각도에 초점을 맞춰서, 벡터 스케일 차이에 강인합니다. 도트 프로덕트는 계산이 빠르지만 벡터 크기의 영향을 많이 받습니다. 유클리드 거리는 기하학적으로 직관적이지만, NLP에서는 상대적으로 덜 쓰일 때도 있습니다.&lt;/p&gt;
&lt;h3&gt;5.2 올바른 지표 선택하기&lt;/h3&gt;
&lt;p&gt;어떤 유사도 측정을 쓸지는 &lt;strong&gt;데이터 특성&lt;/strong&gt;과 &lt;strong&gt;목표 과제의 성능 요구&lt;/strong&gt;에 달려 있습니다. 코사인 유사도는 텍스트 임베딩에서 &lt;strong&gt;방향성&lt;/strong&gt;을 중시하기 때문에 가장 널리 쓰이며, 도트 프로덕트는 벡터 크기가 의미(예: 가중치)를 갖는 경우 유리할 수 있습니다. 여러 메트릭을 &lt;strong&gt;검증 세트&lt;/strong&gt;에서 비교·평가해 보는 것이 안전한 방법입니다.&lt;/p&gt;
&lt;h3&gt;5.3 근사 최근접 이웃(ANN) 기법&lt;/h3&gt;
&lt;p&gt;HNSW(Hierarchical Navigable Small World), IVF(Inverted File Index), Product Quantization(PQ) 등은 수백만~수십억 개에 달하는 벡터를 &lt;strong&gt;효율적&lt;/strong&gt;으로 검색할 수 있게 해줍니다. 정확도와 속도 간 균형을 맞추기 위해, 유사도 계산을 &lt;strong&gt;근사&lt;/strong&gt;하는 접근입니다. HNSW는 낮은 지연 시간에 높은 재현율을 제공하고, PQ는 &lt;strong&gt;메모리 사용량을 크게 줄일&lt;/strong&gt; 수 있는 장점이 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;6. 활용 사례 (Applications and Use Cases)&lt;/h2&gt;
&lt;h3&gt;6.1 시맨틱 검색 (Semantic Search)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%2013.png"&gt;&lt;/p&gt;
&lt;p&gt;임베딩 기반 검색은 문서의 &lt;strong&gt;의미&lt;/strong&gt;를 기준으로 콘텐츠를 찾도록 해주어, 단순 키워드 매칭을 넘어섭니다. 예컨대 사용자가 입력한 질의가 데이터베이스의 문구와 정확히 일치하지 않아도(동의어, 문장 변형 등) 유사한 의미라면 찾을 수 있습니다. 질의를 벡터로 변환하고, 미리 인덱싱된 벡터들과 비교하여 &lt;strong&gt;가장 연관성 높은 결과&lt;/strong&gt;를 빠르게 찾아냅니다.&lt;/p&gt;
&lt;h3&gt;6.2 추천 시스템 (Recommendation Systems)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%2014.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%2015.png"&gt;&lt;/p&gt;
&lt;p&gt;여러 추천 알고리즘은 사용자와 아이템(상품 등)을 임베딩으로 표현해, &lt;strong&gt;동일 벡터 공간&lt;/strong&gt;에서 가깝게 위치하는 항목을 추천합니다. 이는 과거 협업 필터링을 넘어, 사용자 리뷰나 제품 설명에서 추출한 &lt;strong&gt;심층 의미&lt;/strong&gt;까지 반영할 수 있게 만듭니다. 결과적으로 더 정교한 개인화 추천이 가능합니다.&lt;/p&gt;
&lt;h3&gt;6.3 질의응답(Question Answering, QA)&lt;/h3&gt;
&lt;p&gt;밀집 패시지 검색(Dense Passage Retrieval)은 대규모 텍스트 코퍼라에서 &lt;strong&gt;관련성 높은 문단&lt;/strong&gt;을 빠르게 찾는 QA 기법입니다. “프랑스의 수도는?” 같은 질의를 벡터로 만들고, 대규모 말뭉치 내 문단 임베딩들과 비교하여 검색 공간을 대폭 축소합니다. 키워드 기반 방식과 결합하면, &lt;strong&gt;정확도&lt;/strong&gt;를 더욱 높일 수 있습니다.&lt;/p&gt;
&lt;h3&gt;6.4 군집화와 토픽 모델링 (Clustering and Topic Modeling)&lt;/h3&gt;
&lt;p&gt;문서를 동일 임베딩 공간에 투영하면, 비지도 학습으로 &lt;strong&gt;비슷한 문서끼리&lt;/strong&gt; 묶을 수 있습니다. 이는 대규모 텍스트에서 토픽을 발굴하거나, 특정 주제별로 빠르게 그룹화하는 데 유용합니다. t-SNE, UMAP 같은 시각화 기법으로 고차원 벡터를 2D/3D로 표현하면 &lt;strong&gt;내재된 주제나 관계&lt;/strong&gt;를 직관적으로 파악할 수 있습니다.&lt;/p&gt;
&lt;h3&gt;6.5 멀티모달 활용 사례 (Multimodal Use Cases)&lt;/h3&gt;
&lt;p&gt;텍스트와 이미지 등 여러 유형의 데이터를 동일 벡터 공간에 맵핑하는 &lt;strong&gt;멀티모달 임베딩&lt;/strong&gt;은 이미지 캡셔닝, 텍스트-이미지 검색, 크로스모달 추천 등 고급 활용을 가능케 합니다. 예컨대 CLIP 같은 모델은 이미지와 텍스트 임베딩을 &lt;strong&gt;동일 공간&lt;/strong&gt;에 배치해, 텍스트 설명으로 이미지를 검색하거나 반대로 이미지를 텍스트로 찾을 수도 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;7. 결론 (Conclusion)&lt;/h2&gt;
&lt;h3&gt;7.1 핵심 요약 (Key Takeaways)&lt;/h3&gt;
&lt;p&gt;LLM 임베딩은 시맨틱 검색부터 복합 추천 시스템까지 &lt;strong&gt;다양한 애플리케이션&lt;/strong&gt;에 활력을 불어넣는 강력한 표현 기법입니다. 벡터 데이터베이스는 이러한 임베딩을 대규모로 검색·활용할 수 있도록 하며, &lt;strong&gt;최신 지능형 시스템&lt;/strong&gt;을 구축하는 데 필수적입니다. 두 기술을 함께 숙지하면 한층 발전된 서비스를 만들 수 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Reference:&lt;/h2&gt;
&lt;p&gt;&lt;a href="../images/llm/%25E1%2584%2587%25E1%2585%25A6%25E1%2586%25A8%25E1%2584%2590%25E1%2585%25A5_%25E1%2584%2580%25E1%2585%25A5%25E1%2586%25B7%25E1%2584%2589%25E1%2585%25A2%25E1%2586%25A8%25E1%2584%258B%25E1%2585%25B4_%25E1%2584%258C%25E1%2585%25A5%25E1%2586%25BC%25E1%2584%258C%25E1%2585%25A5%25E1%2586%25B7%25E1%2584%258B%25E1%2585%25A6_%25E1%2584%258B%25E1%2585%25A9%25E1%2584%2585%25E1%2585%25B3%25E1%2584%2583%25E1%2585%25A1.pdf"&gt;벡터 검색의 정점에 오르다.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="../images/llm/%25E1%2584%2589%25E1%2585%25A5%25E1%2584%258E%25E1%2585%25B5%25E1%2584%2591%25E1%2585%25B5%25E1%2584%2583%25E1%2585%25B3_-_SERP_%25E1%2584%258B%25E1%2585%25A6%25E1%2584%2589%25E1%2585%25A5_SURF_%25E1%2584%2585%25E1%2585%25A9_%25E1%2584%258C%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2592%25E1%2585%25AA%25E1%2584%2592%25E1%2585%25A1%25E1%2584%2582%25E1%2585%25B3%25E1%2586%25AB_%25E1%2584%2580%25E1%2585%25A5%25E1%2586%25B7%25E1%2584%2589%25E1%2585%25A2%25E1%2586%25A8_%25E1%2584%258B%25E1%2585%25B5%25E1%2586%25B7%25E1%2584%2592%25E1%2585%25B4%25E1%2584%258C%25E1%2585%25A2_%25E1%2584%2580%25E1%2585%25B5%25E1%2586%25B7%25E1%2584%2589%25E1%2585%25A6%25E1%2584%2592%25E1%2585%25AE%25E1%2586%25AB.pdf"&gt;서치피드 - SERP 에서 SURF 로 진화하는 검색_임희재_김세훈.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="../images/llm/%25E1%2584%2589%25E1%2585%25A5%25E1%2584%258E%25E1%2585%25B5%25E1%2584%2591%25E1%2585%25B5%25E1%2584%2583%25E1%2585%25B3_-_SERP_%25E1%2584%258B%25E1%2585%25A6%25E1%2584%2589%25E1%2585%25A5_SURF_%25E1%2584%2585%25E1%2585%25A9_%25E1%2584%258C%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2592%25E1%2585%25AA%25E1%2584%2592%25E1%2585%25A1%25E1%2584%2582%25E1%2585%25B3%25E1%2586%25AB_%25E1%2584%2580%25E1%2585%25A5%25E1%2586%25B7%25E1%2584%2589%25E1%2585%25A2%25E1%2586%25A8_%25E1%2584%258B%25E1%2585%25B5%25E1%2586%25B7%25E1%2584%2592%25E1%2585%25B4%25E1%2584%258C%25E1%2585%25A2_%25E1%2584%2580%25E1%2585%25B5%25E1%2586%25B7%25E1%2584%2589%25E1%2585%25A6%25E1%2584%2592%25E1%2585%25AE%25E1%2586%25AB%201.pdf"&gt;서치피드 - SERP 에서 SURF 로 진화하는 검색_임희재_김세훈.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="../images/llmpdf"&gt;네이버페이 결제 서비스 성장과 변화_김진한.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="../images/llm/%25E1%2584%258F%25E1%2585%25B3%25E1%2586%25AF%25E1%2584%2585%25E1%2585%25B5%25E1%2586%25B8_%25E1%2584%258F%25E1%2585%25B3%25E1%2584%2585%25E1%2585%25B5%25E1%2584%258B%25E1%2585%25A6%25E1%2584%258B%25E1%2585%25B5%25E1%2584%2590%25E1%2585%25A5%25E1%2584%258B%25E1%2585%25AA_%25E1%2584%2582%25E1%2585%25A6%25E1%2584%258B%25E1%2585%25B5%25E1%2584%2587%25E1%2585%25A5_%25E1%2584%258B%25E1%2585%25B2%25E1%2584%258C%25E1%2585%25A5%25E1%2584%2585%25E1%2585%25B3%25E1%2586%25AF_%25E1%2584%258B%25E1%2585%25A7%25E1%2586%25AB%25E1%2584%2580%25E1%2585%25A7%25E1%2586%25AF%25E1%2584%2592%25E1%2585%25A1%25E1%2584%2580%25E1%2585%25B5_%25E1%2584%2589%25E1%2585%25AD%25E1%2586%25BA%25E1%2584%2591%25E1%2585%25A9%25E1%2586%25B7_%25E1%2584%258F%25E1%2585%25A5%25E1%2586%25AB%25E1%2584%2590%25E1%2585%25A6%25E1%2586%25AB%25E1%2584%258E%25E1%2585%25B3_%25E1%2584%2580%25E1%2585%25A2%25E1%2584%258B%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2592%25E1%2585%25AA_%25E1%2584%258E%25E1%2585%25AE%25E1%2584%258E%25E1%2585%25A5%25E1%2586%25AB.pdf"&gt;클립 크리에이터와 네이버 유저를 연결하기 숏폼 컨텐츠 개인화 추천.pdf&lt;/a&gt;&lt;/p&gt;</content><category term="database"></category><category term="algorithm"></category><category term="database"></category></entry><entry><title>OS API와 Overhead의 이해</title><link href="https://blog.i544c.com/os-apiwa-overheadyi-ihae.html" rel="alternate"></link><published>2024-12-16T13:52:00+09:00</published><updated>2024-12-16T14:47:00+09:00</updated><author><name>박이삭</name></author><id>tag:blog.i544c.com,2024-12-16:/os-apiwa-overheadyi-ihae.html</id><summary type="html">&lt;p&gt;OS API Overhead&lt;/p&gt;</summary><content type="html">&lt;h2&gt;&lt;strong&gt;Kernel space explained (Win32 kernel as example)&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;OS 계층(유저, 권한 등):&lt;/strong&gt; 현대 시스템은 프로세스를 사용자 모드(ring 3)와 커널 모드(ring 0)로 분리합니다. 사용자 모드는 하드웨어 접근에 제한이 있으며, 특권 명령은 커널 모드를 통해 수행됩니다. 이런 구조는 장애 격리와 보안을 강화합니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/os_api/image.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Syscall 함수 테이블(IDT 또는 SSDT):&lt;/strong&gt; Windows에서는 시스템 호출이 SSDT(System Service Descriptor Table)를 통해 라우팅됩니다. CPU는 &lt;code&gt;syscall&lt;/code&gt; 같은 특수 명령 또는 인터럽트 게이트를 사용하여 커널로 제어를 전환하고, 각각의 syscall은 고유한 인덱스를 갖습니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/os_api/image%201.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/os_api/image%202.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;커널 객체(Win32):&lt;/strong&gt; 프로세스, 스레드, 이벤트, 파일 등은 Windows에서 ‘객체’로 관리됩니다. 각 객체는 커널이 참조 카운트와 권한을 추적해 안전한 액세스와 해제를 보장합니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/os_api/image%203.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;드라이버(IRP 등):&lt;/strong&gt; 디바이스 드라이버는 커널 모드에서 동작하며 I/O 요청을 IRP(I/O Request Packet)로 처리합니다. IRP는 읽기·쓰기·제어 요청을 표준화해 다양한 드라이버가 동일한 방식으로 I/O를 다루도록 해줍니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/os_api/image%204.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;User-Kernel Boundary Crossing&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;모드 스위치:&lt;/strong&gt; 사용자 모드에서 커널 모드로의 전환은 레지스터 저장, CPU 상태 업데이트 전환 등 추가 비용이 소요됩니다.&lt;ul&gt;
&lt;li&gt;레지스터 저장&lt;/li&gt;
&lt;li&gt;CPU 상태 업데이트(privilege)&lt;/li&gt;
&lt;li&gt;함수 테이블 조회&lt;/li&gt;
&lt;li&gt;(optional) Driver access&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CPU 명령어(syscall 등):&lt;/strong&gt; 현대 CPU는 &lt;code&gt;syscall&lt;/code&gt; / &lt;code&gt;sysenter&lt;/code&gt; 같은 명령어로 사용자→커널 전환을 최적화하지만, 여전히 사용자 함수 호출보다는 비용이 높습니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/os_api/image%205.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;Frequency of Calls and Work Done Per Call&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;호출 빈도(Call Frequency):&lt;/strong&gt; tight loop에서 반복적으로 syscall을 호출하면, 경계 전환 비용이 누적되어 성능이 저하됩니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;배칭과 버퍼링(Batching/Buffering):&lt;/strong&gt; 여러 작은 I/O 호출 대신 큰 덩어리로 읽거나 쓰면 syscall 횟수를 줄여 오버헤드를 감소시킬 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;호출 당 작업(Work Per Call):&lt;/strong&gt; 디스크에서 데이터를 많이 가져오는 syscall은 모드 스위치 비용이 상대적으로 작을 수 있지만, 아주 작은 작업을 자주 부르는 경우 오버헤드가 크게 느껴질 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;Mitigations and Best Practices&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Syscall 횟수 최소화:&lt;/strong&gt; 메모리 맵핑(file mapping)이나 대용량 일괄 읽기/쓰기로 경계 전환 횟수를 줄이는 전략이 중요합니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/os_api/image%206.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;사용자 공간 대안:&lt;/strong&gt; 공유 메모리, 유저 모드 버퍼링, zero-copy 기법 등을 사용해 커널 호출을 피할 수 있는지 고려하세요.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/os_api/image%207.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;프로파일링 및 측정:&lt;/strong&gt; &lt;code&gt;perf&lt;/code&gt;, &lt;code&gt;strace&lt;/code&gt;, Windows Performance Analyzer 등을 이용해 syscall 비중과 시간을 측정하면, 개선 지점을 정확히 파악할 수 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;커널 기능을 현명하게 활용:&lt;/strong&gt; 비동기 I/O(예: 윈도우 I/O 컴플리션 포트, 리눅스 io_uring), 이벤트·epoll 등은 동시에 많은 요청을 처리하는 데 유리합니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/os_api/image%208.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;syscall (Win32) frequently used&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;프로세스 &amp;amp; 스레드 관리:&lt;/strong&gt; &lt;code&gt;CreateProcess&lt;/code&gt;, &lt;code&gt;CreateThread&lt;/code&gt;, &lt;code&gt;TerminateProcess&lt;/code&gt; 등은 커널 스케줄러 및 객체 관리자와 직접 상호 작용하기 때문에 너무 자주 생성·소멸하면 비용이 커집니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;메모리:&lt;/strong&gt; &lt;code&gt;VirtualAlloc&lt;/code&gt;, &lt;code&gt;VirtualFree&lt;/code&gt;, &lt;code&gt;VirtualProtect&lt;/code&gt;는 메모리 맵핑을 변경하고 페이지 속성을 수정합니다. 자주 호출보다 큰 단위로 묶어 사용하는 편이 유리합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;파일 I/O:&lt;/strong&gt; &lt;code&gt;CreateFile&lt;/code&gt;, &lt;code&gt;ReadFile&lt;/code&gt;, &lt;code&gt;WriteFile&lt;/code&gt;, &lt;code&gt;CloseHandle&lt;/code&gt; 등을 빈번히 호출하면 커널 전환이 누적됩니다. 비동기나 버퍼링 I/O로 최적화할 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;네트워크 I/O:&lt;/strong&gt; WinSock(&lt;code&gt;socket&lt;/code&gt;, &lt;code&gt;connect&lt;/code&gt;, &lt;code&gt;recv&lt;/code&gt;, &lt;code&gt;send&lt;/code&gt;)은 커널 레벨 드라이버를 거칩니다. Overlapped I/O나 비동기 방식으로 병목을 줄일 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IPC:&lt;/strong&gt; Named pipe, mailslot, event, semaphore 같은 IPC 메커니즘도 모두 커널 객체에 접근합니다. 짧은 간격으로 반복되면 오버헤드가 늘어납니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;디바이스:&lt;/strong&gt; &lt;code&gt;DeviceIoControl&lt;/code&gt;은 드라이버에 제어 코드를 보내며, 하드웨어와 직접 상호 작용하므로 호출 비용이 클 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;Relative Cost and Performance Considerations&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nanosecond to Microsecond Scale:&lt;/strong&gt; 시계열 함수 호출(&lt;code&gt;gettimeofday()&lt;/code&gt;) 정도는 비교적 가볍지만, 여전히 순수 사용자 함수보다는 비쌉니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Microseconds to Milliseconds:&lt;/strong&gt; 파일 I/O나 IPC처럼 대기가 필요한 작업은 여러 하드웨어 레이턴시가 더해져 밀리초 단위까지 갈 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Batching and Buffering:&lt;/strong&gt; syscall 호출을 한 번 줄일 때마다 경계 전환에 따르는 고정 비용을 절약하므로, 빈도를 크게 낮추는 것이 핵심 전략입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Operation&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Time Scale&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Single CPU instruction execution&lt;/td&gt;
&lt;td&gt;0.1 to 1 nanosecond (ns)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Level 1 (L1) cache access&lt;/td&gt;
&lt;td&gt;0.5 to 1 ns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Level 2 (L2) cache access&lt;/td&gt;
&lt;td&gt;3 to 10 ns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Branch mispredict penalty&lt;/td&gt;
&lt;td&gt;5 to 20 ns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Level 3 (L3) cache access&lt;/td&gt;
&lt;td&gt;10 to 20 ns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Main memory (RAM) access (memory miss)&lt;/td&gt;
&lt;td&gt;50 to 100 ns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mutex lock/unlock&lt;/td&gt;
&lt;td&gt;25 to 50 ns (but can vary widely with contention)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Solid-State Drive (SSD) access&lt;/td&gt;
&lt;td&gt;50 to 150 microseconds (us)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Disk seek (Hard Drive)&lt;/td&gt;
&lt;td&gt;1 to 10 milliseconds (ms) (varies by drive type and age)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Round-Trip Time (RTT) in the same data center&lt;/td&gt;
&lt;td&gt;100 us to 1 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sending 1KB packet over 1Gbps network&lt;/td&gt;
&lt;td&gt;10 us (not including propagation delays)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Round-Trip Time (RTT) on the Internet (cross-country)&lt;/td&gt;
&lt;td&gt;20 to 50 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Round-Trip Time (RTT) on the Internet (global/international)&lt;/td&gt;
&lt;td&gt;100 to 300 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Disk read (CD-ROM, older media)&lt;/td&gt;
&lt;td&gt;100 to 300 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;&lt;strong&gt;Why Knowing API Overhead Is Important for Python Developers&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;주요 병목:&lt;/strong&gt; Python의 고수준 함수(&lt;code&gt;open()&lt;/code&gt;, &lt;code&gt;read()&lt;/code&gt;, &lt;code&gt;os.fork()&lt;/code&gt; 등) 내부에서 syscall이 여러 번 발생할 수 있습니다. 이를 모르면 성능 저하 원인을 찾기 어려울 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;피해야 할 점:&lt;/strong&gt; 파일을 한 줄씩 읽는 식의 반복 접근은 syscall 빈도가 높아질 수 있습니다. 버퍼링이나 대량 읽기가 효율적입니다. 다만 python 라이브러리나 OS에서 IO를 기본으로 케싱 및 버퍼링을 하는 경우가 있으니 알고 최적화가 필요합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;주의 할 점&lt;/strong&gt;: 버퍼링과 대량읽기는 API의 빈도를 낮춰 syscall빈도는 최적화 할 수 있지만, 너무 큰 버퍼는 메모리 overhead가 발생할 수 있습니다. 두 최적 방법의 최적점을 찾는 것 이 중요합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;실무적 영향:&lt;/strong&gt; 라이브러리나 프레임워크에서도 syscall이 잦으면 성능이 떨어집니다. 어디서 syscall이 발생하는지 파악하고 줄이는 전략이 중요합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;API 최적화 실험&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;API콜을 최소화 하는 방법을 테스트 해보려고 합니다. server와 client 프로세스가 동일 host에서 통신을 하여 그 시간을 재는 실험입니다. 언어는 C, macos에서 테스트 했습니다.&lt;/p&gt;
&lt;p&gt;한 쪽은 System V message queue (&lt;code&gt;msgsnd&lt;/code&gt;, &lt;code&gt;msgrcv&lt;/code&gt;) IPC로 통신을 하고 매 통신마다 syscall이 발생하게 됩니다.&lt;/p&gt;
&lt;p&gt;다른 한 쪽은 shared memory로 메모리 생성 및 연결 시 에만 syscall이 발생하고 공유된 메모리 상 서로의 동기화 방법으로 메시지를 통신합니다.&lt;/p&gt;
&lt;p&gt;각 client, server는 increment되는 sequence 번호를 통신 정보로 합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;shared_mem_client.c&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span class="c1"&gt;    // O_RDWR&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;sys/mman.h&amp;gt;&lt;/span&gt;&lt;span class="c1"&gt; // shm_open, mmap&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;span class="c1"&gt; // For mode constants&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="c1"&gt;   // ftruncate, close&lt;/span&gt;

&lt;span class="cp"&gt;#define SHM_NAME   &amp;quot;/my_shm_example&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#define SHM_SIZE   sizeof(SharedData)&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;volatile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;request_count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;volatile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;total_requests&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;volatile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ready_flag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;volatile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;done_flag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SharedData&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Usage: %s &amp;lt;num_requests&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_requests&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_requests&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Invalid number of requests.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Open existing shared memory&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shm_open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SHM_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;O_RDWR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mo"&gt;0666&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;shm_open&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SHM_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PROT_READ&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PROT_WRITE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MAP_SHARED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MAP_FAILED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mmap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;SharedData&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SharedData&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Signal server that client is ready&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ready_flag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[Client] Sending %d requests...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_requests&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_requests&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;request_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Simulate some small delay&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;usleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Wait for server to finish&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;done_flag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;usleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[Client] All requests done.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;munmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SHM_SIZE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;shared_mem_server.c&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span class="c1"&gt;    // For O_* constants&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;sys/mman.h&amp;gt;&lt;/span&gt;&lt;span class="c1"&gt; // shm_open, mmap&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;span class="c1"&gt; // For mode constants&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="c1"&gt;   // ftruncate, close&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define SHM_NAME   &amp;quot;/my_shm_example&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#define SHM_SIZE   sizeof(SharedData)&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;volatile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;request_count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;// Number of requests received&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;volatile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;total_requests&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Target number of requests&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;volatile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ready_flag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// Indicates client has started&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;volatile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;done_flag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="c1"&gt;// Indicates server has processed last request&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SharedData&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_time_seconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;timespec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;clock_gettime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CLOCK_MONOTONIC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_sec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_nsec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1e9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Usage: %s &amp;lt;num_requests&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_requests&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_requests&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Invalid number of requests.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Create &amp;amp; initialize shared memory&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shm_open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SHM_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;O_CREAT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;O_RDWR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mo"&gt;0666&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;shm_open&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ftruncate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SHM_SIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ftruncate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SHM_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PROT_READ&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PROT_WRITE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MAP_SHARED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MAP_FAILED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mmap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;SharedData&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SharedData&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;request_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;total_requests&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_requests&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ready_flag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;done_flag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[Server] Waiting for client to start...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Wait until client signals readiness&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ready_flag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// busy-wait&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;usleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[Server] Client connected. Expecting %d requests.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_requests&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t_start&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t_end&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;first_request_seen&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Process requests&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;current_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;request_count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;first_request_seen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;t_start&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;get_time_seconds&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;first_request_seen&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_requests&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;t_end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;get_time_seconds&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;usleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// small sleep to reduce CPU usage in busy loop&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;done_flag&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;elapsed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t_end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t_start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[Server] Received %d requests. Total time: %.6f seconds&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;num_requests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;elapsed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Cleanup&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;munmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SHM_SIZE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;shm_unlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SHM_NAME&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// remove shared memory&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;ipc_client.c&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;sys/ipc.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;sys/msg.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define MSG_KEY  0x1234&lt;/span&gt;
&lt;span class="cp"&gt;#define MSG_TYPE 1&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mtype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MsgData&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Usage: %s &amp;lt;num_requests&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_requests&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_requests&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Invalid number of requests.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;msqid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;msgget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MSG_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mo"&gt;0666&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msqid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;msgget&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[Client] Sending %d messages...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_requests&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_requests&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;MsgData&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mtype&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MSG_TYPE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msgsnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msqid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;msgsnd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Some small delay&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;usleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[Client] All messages sent.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;ipc_server.c&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;sys/ipc.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;sys/msg.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define MSG_KEY     0x1234&lt;/span&gt;
&lt;span class="cp"&gt;#define MSG_TYPE    1&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mtype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MsgData&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_time_seconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;timespec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;clock_gettime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CLOCK_MONOTONIC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_sec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_nsec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1e9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Usage: %s &amp;lt;num_requests&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_requests&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_requests&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Invalid number of requests.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Create message queue&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;msqid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;msgget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MSG_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IPC_CREAT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mo"&gt;0666&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msqid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;msgget&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[Server] Waiting for %d messages...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_requests&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t_start&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t_end&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;first_msg_received&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_requests&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;MsgData&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msgrcv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msqid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MSG_TYPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;msgrcv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;first_msg_received&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;t_start&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;get_time_seconds&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;first_msg_received&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;t_end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;get_time_seconds&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;elapsed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t_end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t_start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[Server] Received %d messages. Total time: %.6f seconds&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_requests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;elapsed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Cleanup&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msgctl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msqid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IPC_RMID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;msgctl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Makefile&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;CC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;gcc
&lt;span class="nv"&gt;CFLAGS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-Wall&lt;span class="w"&gt; &lt;/span&gt;-O2

&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shared_mem_server&lt;/span&gt; &lt;span class="n"&gt;shared_mem_client&lt;/span&gt; &lt;span class="n"&gt;ipc_server&lt;/span&gt; &lt;span class="n"&gt;ipc_client&lt;/span&gt;

&lt;span class="nf"&gt;shared_mem_server&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shared_mem_server&lt;/span&gt;.&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CFLAGS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;shared_mem_server&lt;span class="w"&gt; &lt;/span&gt;shared_mem_server.c

&lt;span class="nf"&gt;shared_mem_client&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shared_mem_client&lt;/span&gt;.&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CFLAGS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;shared_mem_client&lt;span class="w"&gt; &lt;/span&gt;shared_mem_client.c

&lt;span class="nf"&gt;ipc_server&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ipc_server&lt;/span&gt;.&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CFLAGS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;ipc_server&lt;span class="w"&gt; &lt;/span&gt;ipc_server.c

&lt;span class="nf"&gt;ipc_client&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ipc_client&lt;/span&gt;.&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CFLAGS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;ipc_client&lt;span class="w"&gt; &lt;/span&gt;ipc_client.c

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;shared_mem_server&lt;span class="w"&gt; &lt;/span&gt;shared_mem_client&lt;span class="w"&gt; &lt;/span&gt;ipc_server&lt;span class="w"&gt; &lt;/span&gt;ipc_client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;테스트 실행:&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 빌드&lt;/span&gt;
make

&lt;span class="c1"&gt;# ipc server&lt;/span&gt;
./ipc_server&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;

&lt;span class="c1"&gt;# ipc client&lt;/span&gt;
./ipc_client&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10000&lt;/span&gt;

&lt;span class="c1"&gt;# shared memory server&lt;/span&gt;
./shared_mem_server&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;

&lt;span class="c1"&gt;# shared memory client&lt;/span&gt;
./shared_mem_client&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;결과:&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/os_api/image%209.png"&gt;&lt;/p&gt;
&lt;p&gt;단적인 케이스이지만 shared memory사용 시 System V Message queue보다 약 85배 속도 개선이 있었습니다.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;OS API 호출은 모드 스위치와 기타 비용 때문에 상대적으로 무겁습니다. 호출 횟수를 줄이거나 일괄 처리, 비동기 I/O 등을 활용하면 성능을 높일 수 있습니다. Python처럼 고수준 언어에서도 제대로 프로파일링하여 syscall 오버헤드를 줄이는 방법을 익혀둬야 합니다.&lt;/p&gt;</content><category term="performance"></category><category term="backend"></category><category term="performance"></category></entry><entry><title>Context Switch: 프로세스, 스레드 및 오버헤드 이해하기</title><link href="https://blog.i544c.com/context-switch-peuroseseu-seuredeu-mic-obeohedeu-ihaehagi.html" rel="alternate"></link><published>2024-11-18T11:33:00+09:00</published><updated>2024-11-19T08:38:00+09:00</updated><author><name>박이삭</name></author><id>tag:blog.i544c.com,2024-11-18:/context-switch-peuroseseu-seuredeu-mic-obeohedeu-ihaehagi.html</id><summary type="html">&lt;p&gt;Context Switch&lt;/p&gt;</summary><content type="html">&lt;h2&gt;소개&lt;/h2&gt;
&lt;p&gt;컴퓨팅 세계에서 효율성과 멀티태스킹은 매우 중요합니다. 현대 운영 체제는 &lt;strong&gt;컨텍스트 스위칭&lt;/strong&gt;이라는 기본 개념 덕분에 여러 애플리케이션이 동시에 실행되는 것처럼 보이게 합니다. 이 글에서는 컨텍스트 스위칭이 무엇인지, 왜 필요한지, 그리고 CPU / OS가 이를 어떻게 관리하는지에 대해 자세히 알아보겠습니다. 또한 프로세스, 스레드 및 경량 스레드 간의 차이점을 탐구하고, 그들의 컨텍스트 스위칭 오버헤드를 비교해보겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;컨텍스트 스위칭이란 무엇이며 왜 필요한가?&lt;/h2&gt;
&lt;h3&gt;컨텍스트 스위칭의 정의&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;컨텍스트 스위칭&lt;/strong&gt;은 CPU가 한 프로세스나 스레드의 실행을 중단하고 다른 프로세스나 스레드로 전환하는 과정입니다. 이는 현재 실행 중인 프로세스나 스레드의 상태(컨텍스트)를 저장하여 나중에 재개할 수 있도록 하고, 다음에 실행할 프로세스나 스레드의 저장된 상태를 로드하는 것을 포함합니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/context_switch/image.png"&gt;&lt;/p&gt;
&lt;h3&gt;컨텍스트 스위칭의 필요성&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;멀티태스킹&lt;/strong&gt;: CPU가 여러 작업을 시간 분할 방식으로 처리할 수 있게 해줍니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;자원 공유&lt;/strong&gt;: 여러 애플리케이션이 CPU를 효과적으로 활용할 수 있도록 합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;응답성&lt;/strong&gt;: 높은 우선순위의 작업이 신속하게 CPU 시간을 받을 수 있도록 보장합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;공정성&lt;/strong&gt;: 단일 프로세스가 CPU를 독점하지 못하도록 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;컨텍스트 스위칭이 없다면, 하나의 프로세스가 CPU 자원을 모두 소비하여 시스템이 응답하지 않거나 사용자 경험이 저하될 수 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;CPU / OS가 컨텍스트 스위칭을 관리하는 방법&lt;/h2&gt;
&lt;h3&gt;CPU / OS 상태의 저장 및 복원&lt;/h3&gt;
&lt;p&gt;컨텍스트 스위칭이 발생할 때, CPU는 다음을 수행해야 합니다:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;현재 상태 저장&lt;/strong&gt;: 모든 CPU 레지스터의 값, 프로그램 카운터 및 스택 포인터를 프로세스의 제어 블록에 저장합니다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;프로세스 제어 블록(PCB) 업데이트&lt;/strong&gt;: PCB는 프로세스를 나중에 재개하는 데 필요한 모든 정보를 보유합니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/context_switch/image%201.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;다음 프로세스나 스레드 선택&lt;/strong&gt;: 스케줄러는 스케줄링 알고리즘에 따라 다음에 실행할 프로세스나 스레드를 결정합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;새 상태 로드&lt;/strong&gt;: 선택된 프로세스나 스레드의 저장된 상태를 PCB에서 복원합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;컨텍스트 스위칭에 관련된 구성 요소&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;레지스터&lt;/strong&gt;: 데이터와 명령어를 저장하는 CPU 내의 작은 저장 공간.&lt;/p&gt;
&lt;p&gt;&lt;img alt="x86 registers" src="../images/context_switch/image%202.png"&gt;&lt;/p&gt;
&lt;p&gt;x86 registers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;프로그램 카운터(PC)&lt;/strong&gt;: 다음에 실행할 명령어의 주소를 가리킵니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;스택 포인터(SP)&lt;/strong&gt;: 메모리에서 현재 스택의 최상위를 가리킵니다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;메모리 관리 장치(MMU)&lt;/strong&gt;: 가상 메모리와 주소 변환을 처리합니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/context_switch/image%203.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Translation Lookaside Buffer(TLB)&lt;/strong&gt;: MMU가 가상 주소 변환 속도를 향상시키기 위해 사용하는 캐시.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/context_switch/image%204.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;컨텍스트 스위칭 시 메모리 관리&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;스택&lt;/strong&gt;: 각 프로세스/스레드는 함수 호출과 지역 변수를 위한 자체 스택을 가집니다. 컨텍스트 스위칭 시 스택 포인터가 저장되고 복원됩니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;힙&lt;/strong&gt;: 동적 메모리 할당에 사용되는 메모리. 일반적으로 컨텍스트 스위칭 동안 변경되지 않습니다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;메모리 세그먼테이션 및 페이징&lt;/strong&gt;: MMU는 활성 프로세스의 주소 공간을 반영하도록 메모리 매핑을 업데이트합니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/context_switch/image%205.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/context_switch/image%206.png"&gt;&lt;/p&gt;
&lt;h3&gt;인터럽트와 트랩&lt;/h3&gt;
&lt;p&gt;컨텍스트 스위칭은 종종 다음에 의해 트리거됩니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;하드웨어 인터럽트&lt;/strong&gt;: I/O 완료와 같은 이벤트를 나타내는 하드웨어 장치로부터의 신호.&lt;/p&gt;
&lt;p&gt;&lt;img alt="x86 Interrupt Descriptor Table(IDT)" src="../images/context_switch/image%207.png"&gt;&lt;/p&gt;
&lt;p&gt;x86 Interrupt Descriptor Table(IDT)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;소프트웨어 인터럽트(트랩)&lt;/strong&gt;: 프로그램이 시스템 서비스를 요청하거나 오류를 감지할 때 생성됨.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;타이머 인터럽트&lt;/strong&gt;: 스케줄러가 프로세스에 CPU 시간 슬라이스를 할당하는 데 사용.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;인터럽트가 발생하면 CPU는:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;현재 컨텍스트를 저장합니다.&lt;/li&gt;
&lt;li&gt;인터럽트 핸들러를 실행합니다.&lt;/li&gt;
&lt;li&gt;스케줄링 정책에 따라 컨텍스트 스위칭 여부를 결정합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2&gt;프로세스, 스레드 및 경량 스레드&lt;/h2&gt;
&lt;h3&gt;프로세스&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;정의&lt;/strong&gt;: 실행 중인 독립적인 프로그램으로, 자체 메모리 공간(코드, 데이터, 힙 및 스택 세그먼트)을 가집니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;격리&lt;/strong&gt;: 프로세스는 서로 격리되어 있어 보안과 안정성을 높입니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;통신&lt;/strong&gt;: 프로세스 간 통신(IPC) 메커니즘이 필요하며, 이는 복잡할 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;컨텍스트 스위칭 오버헤드&lt;/strong&gt;: MMU를 업데이트하고 메모리 공간을 전환해야 하므로 오버헤드가 높습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/context_switch/image%208.png"&gt;&lt;/p&gt;
&lt;h3&gt;스레드&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;정의&lt;/strong&gt;: 스케줄러에 의해 독립적으로 관리될 수 있는 가장 작은 명령어 시퀀스.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;공유 메모리 공간&lt;/strong&gt;: 동일한 프로세스 내의 스레드는 코드, 데이터, 힙 세그먼트를 공유하지만 개별 스택을 가집니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;효율성&lt;/strong&gt;: 프로세스에 비해 컨텍스트 스위칭 오버헤드가 낮습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;통신&lt;/strong&gt;: 동일한 주소 공간을 공유하므로 스레드 간 통신이 용이합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;동기화 문제&lt;/strong&gt;: 데이터 경쟁과 불일치를 방지하기 위해 주의 깊은 동기화가 필요합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;경량 스레드&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;정의&lt;/strong&gt;: 사용자 공간에서 커널의 개입 없이 관리되는 사용자 수준 스레드(ex. Java Virtual Threads, Erlang lightweight process, Golang goroutines).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/context_switch/image%209.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;특징&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;빠른 컨텍스트 스위칭&lt;/strong&gt;: 커널 모드 전환을 피하여 컨텍스트 스위칭이 빠릅니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;다수 생성 가능&lt;/strong&gt;: 리소스 사용량이 적어 커널 스레드보다 더 많은 경량 스레드를 생성할 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;제한 사항&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;블로킹 호출&lt;/strong&gt;: 블로킹 시스템 호출은 커널이 사용자 수준 스레드를 인식하지 못하므로 전체 프로세스를 블록할 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CPU 활용도&lt;/strong&gt;: 커널 수준 스케줄링 없이 멀티코어 프로세서를 완전히 활용하지 못할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;컨텍스트 스위칭 오버헤드 비교&lt;/h2&gt;
&lt;h3&gt;프로세스&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;오버헤드 요인&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;메모리 주소 공간 전환.&lt;/li&gt;
&lt;li&gt;TLB 플러시 및 리로드.&lt;/li&gt;
&lt;li&gt;페이지 테이블 및 MMU 업데이트.&lt;/li&gt;
&lt;li&gt;많은 상태 정보의 저장 및 복원.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;결과&lt;/strong&gt;: 높은 오버헤드로 인해 컨텍스트 스위칭이 비교적 느립니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;스레드&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;오버헤드 요인&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;CPU 레지스터와 스택 포인터의 저장 및 복원.&lt;/li&gt;
&lt;li&gt;메모리 주소 공간 전환이 필요 없음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;결과&lt;/strong&gt;: 프로세스보다 오버헤드가 낮아 컨텍스트 스위칭이 빠릅니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;경량 스레드&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;오버헤드 요인&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;사용자 공간에서 포인터와 레지스터를 변경하는 것만으로 컨텍스트 스위칭 가능.&lt;/li&gt;
&lt;li&gt;컨텍스트 스위칭에 커널 개입이 없음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;결과&lt;/strong&gt;: 가장 낮은 오버헤드로 매우 빠른 컨텍스트 스위칭 가능.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;제한 사항&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;커널 수준 스케줄링 없이 멀티코어 프로세서의 이점을 충분히 활용하지 못할 수 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;시각적 비교&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;항목&lt;/th&gt;
&lt;th&gt;프로세스&lt;/th&gt;
&lt;th&gt;스레드&lt;/th&gt;
&lt;th&gt;경량 스레드&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;메모리 공간 전환&lt;/td&gt;
&lt;td&gt;예&lt;/td&gt;
&lt;td&gt;아니오&lt;/td&gt;
&lt;td&gt;아니오&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;커널 개입&lt;/td&gt;
&lt;td&gt;예&lt;/td&gt;
&lt;td&gt;예&lt;/td&gt;
&lt;td&gt;아니오&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;컨텍스트 스위칭 오버헤드&lt;/td&gt;
&lt;td&gt;높음&lt;/td&gt;
&lt;td&gt;중간&lt;/td&gt;
&lt;td&gt;낮음&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;스케줄링&lt;/td&gt;
&lt;td&gt;커널 수준&lt;/td&gt;
&lt;td&gt;커널 수준&lt;/td&gt;
&lt;td&gt;사용자 수준&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;동기화&lt;/td&gt;
&lt;td&gt;복잡한 IPC&lt;/td&gt;
&lt;td&gt;동기화 프리미티브&lt;/td&gt;
&lt;td&gt;사용자 수준 동기화&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2&gt;애플리케이션 설계를 위한 시사점&lt;/h2&gt;
&lt;p&gt;컨텍스트 스위칭 오버헤드의 차이를 이해하는 것은 효율적인 애플리케이션 설계에 중요합니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;프로세스를 사용할 때&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;격리와 보안이 최우선일 때.&lt;/li&gt;
&lt;li&gt;컨텍스트 스위칭 오버헤드가 큰 문제가 아닐 때.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;스레드를 사용할 때&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;작업에 공유 메모리와 빠른 통신이 필요할 때.&lt;/li&gt;
&lt;li&gt;낮은 컨텍스트 스위칭 오버헤드가 필요할 때.&lt;/li&gt;
&lt;li&gt;동기화 문제를 처리할 준비가 되어 있을 때.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;경량 스레드를 사용할 때&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;많은 수의 동시 작업이 필요할 때.&lt;/li&gt;
&lt;li&gt;커널 스케줄링 없이 사용자 공간에서 작업을 관리할 수 있을 때.&lt;/li&gt;
&lt;li&gt;블로킹 시스템 호출을 최소화하거나 논블로킹 대안을 사용할 때.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;파이썬에서 컨텍스트 스위칭 최소화 방법&lt;/h2&gt;
&lt;p&gt;파이썬에서 컨텍스트 스위칭을 최소화하여 애플리케이션의 성능을 향상시킬 수 있습니다. 다음은 파이썬 개발자가 컨텍스트 스위칭을 줄이기 위해 고려할 수 있는 방법들입니다:&lt;/p&gt;
&lt;h3&gt;1. 비동기 프로그래밍 활용&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GIL(Global Interpreter Lock)&lt;/strong&gt;: 파이썬은 GIL 때문에 한 번에 하나의 스레드만 실행할 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;asyncio&lt;/code&gt; 라이브러리&lt;/strong&gt;: 비동기 I/O를 처리하기 위해 설계된 라이브러리로, 코루틴과 이벤트 루프를 사용하여 컨텍스트 스위칭 오버헤드를 줄입니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;코루틴 사용&lt;/strong&gt;: &lt;code&gt;async&lt;/code&gt;와 &lt;code&gt;await&lt;/code&gt; 키워드를 사용하여 비동기 함수(코루틴)를 정의하고 실행합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;asyncio&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;fetch_data&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# 비동기 I/O 작업 수행&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fetch_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gather&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2. 멀티스레딩 대신 멀티프로세싱 사용&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;멀티프로세싱 모듈&lt;/strong&gt;: &lt;code&gt;multiprocessing&lt;/code&gt; 모듈을 사용하여 프로세스를 생성하면 GIL의 제한을 우회할 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CPU 바운드 작업&lt;/strong&gt;: CPU 집약적인 작업의 경우 멀티프로세싱이 더 나은 성능을 제공합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;프로세스 풀 사용&lt;/strong&gt;: 프로세스 풀을 사용하여 프로세스 생성을 관리하고 컨텍스트 스위칭 오버헤드를 줄입니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;multiprocessing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Pool&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# CPU 집약적인 작업 수행&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Pool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;3. 스레드 수 최소화 및 재사용&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;스레드 풀 사용&lt;/strong&gt;: &lt;code&gt;concurrent.futures.ThreadPoolExecutor&lt;/code&gt;를 사용하여 스레드를 관리하고 재사용하여 스레드 생성 오버헤드를 줄입니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;불필요한 스레드 생성 회피&lt;/strong&gt;: 필요한 최소한의 스레드만 사용하여 컨텍스트 스위칭 빈도를 낮춥니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;concurrent.futures&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ThreadPoolExecutor&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;task&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# I/O 바운드 작업 수행&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_workers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;executor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;executor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;4. 작업 병합 및 일괄 처리&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;작업 병합&lt;/strong&gt;: 여러 작은 작업을 하나로 합쳐 컨텍스트 스위칭 횟수를 줄입니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;일괄 처리 기법&lt;/strong&gt;: 데이터 처리를 일괄적으로 수행하여 오버헤드를 최소화합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;5. 적절한 동시성 모델 선택&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;I/O 바운드 작업&lt;/strong&gt;: 비동기 프로그래밍(&lt;code&gt;asyncio&lt;/code&gt;)이나 멀티스레딩을 사용하여 컨텍스트 스위칭 오버헤드를 줄입니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CPU 바운드 작업&lt;/strong&gt;: 멀티프로세싱을 사용하여 여러 CPU 코어를 활용하고 GIL의 영향을 최소화합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;6. C 확장 모듈 사용 고려&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cython이나 C 확장 사용&lt;/strong&gt;: 성능이 중요한 부분을 C나 Cython으로 작성하면 GIL의 영향을 받지 않으면서 컨텍스트 스위칭 오버헤드를 줄일 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# cython: language_level=3&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;cdef&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;7. CPU 어피니티(CPU Affinity)를 활용한 컨텍스트 스위칭 최소화&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/context_switch/image%2010.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPU 어피니티 설정&lt;/strong&gt;: 프로세스를 특정 CPU 코어에 바인딩하여 컨텍스트 스위칭 오버헤드를 줄일 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;이점&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;캐시 로컬리티 향상&lt;/strong&gt;: 프로세스가 동일한 코어에서 실행되면 캐시 미스가 줄어듭니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;컨텍스트 스위칭 감소&lt;/strong&gt;: 프로세스가 코어 간에 이동하지 않아 오버헤드가 감소합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;적용 방법&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;os.sched_setaffinity&lt;/code&gt; 함수 사용&lt;/strong&gt;: 파이썬에서 프로세스의 CPU 어피니티를 설정할 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# CPU 집약적인 작업 수행&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;cpu_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;# 바인딩할 CPU 코어 ID&lt;/span&gt;
    &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sched_setaffinity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;cpu_id&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;주의 사항&lt;/strong&gt;:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;멀티프로세싱과 함께 사용&lt;/strong&gt;: 여러 프로세스를 생성할 때 각 프로세스에 다른 코어를 할당하여 병렬 처리를 최적화합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;시스템 리소스 고려&lt;/strong&gt;: 코어 수보다 많은 프로세스를 생성하면 오히려 성능이 저하될 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;운영 체제 지원&lt;/strong&gt;: CPU 어피니티 설정은 리눅스와 같은 일부 운영 체제에서만 지원될 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;결론&lt;/h2&gt;
&lt;p&gt;컨텍스트 스위칭은 현대 운영 체제에서 멀티태스킹을 가능하게 하는 기본 메커니즘입니다. CPU가 컨텍스트 스위칭을 어떻게 관리하는지, 그리고 프로세스, 스레드, 경량 스레드 간의 차이를 이해함으로써 개발자는 애플리케이션 성능을 최적화하기 위한 현명한 결정을 내릴 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;프로세스&lt;/strong&gt;는 격리를 제공하지만 컨텍스트 스위칭 오버헤드가 높습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;스레드&lt;/strong&gt;는 메모리 공간을 공유하며, 성능과 복잡성의 균형을 제공합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;경량 스레드&lt;/strong&gt;는 가장 빠른 컨텍스트 스위칭을 제공하지만 제한 사항을 관리해야 합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;파이썬에서&lt;/strong&gt;, 비동기 프로그래밍, 멀티프로세싱, CPU 어피니티 설정 등을 활용하여 컨텍스트 스위칭 오버헤드를 최소화할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;적절한 병행성 모델을 선택하는 것은 애플리케이션의 성능 요구 사항, 리소스 제약 조건 및 관리할 복잡성에 따라 달라집니다.&lt;/p&gt;</content><category term="performance"></category><category term="backend"></category><category term="performance"></category><category term="profiling"></category><category term="python"></category></entry><entry><title>Branchless Programming</title><link href="https://blog.i544c.com/branchless-programming.html" rel="alternate"></link><published>2024-10-21T14:19:00+09:00</published><updated>2024-10-21T15:44:00+09:00</updated><author><name>박이삭</name></author><id>tag:blog.i544c.com,2024-10-21:/branchless-programming.html</id><summary type="html">&lt;p&gt;Branchless programming&lt;/p&gt;</summary><content type="html">&lt;h3&gt;1. CPU 파이프라인&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/Branchless_Programming/image.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CPU 파이프라이닝의 기초&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CPU가 명령어를 단계별로 처리하여 처리량을 향상시키는 방법 설명.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/Branchless_Programming/image%201.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/Branchless_Programming/image%202.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;파이프라인 단계&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fetch(인출), Decode(해독), Execute(실행), Memory Access(메모리 접근), Write Back(쓰기 반환).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;파이프라이닝의 이점&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;명령어 처리량 및 CPU 효율성 증가.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;파이프라인 해저드(Hazard)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;구조적 해저드&lt;/strong&gt;: 자원 충돌.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/Branchless_Programming/image%203.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;데이터 해저드&lt;/strong&gt;: 명령어 간의 의존성.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/Branchless_Programming/image%204.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;제어 해저드&lt;/strong&gt;: 분기 명령어로 인한 파이프라인 플러시(flush).&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/Branchless_Programming/image%205.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. 분기 예측&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;분기 예측이란?&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;CPU가 조건부 연산의 결과를 추측하는 메커니즘.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;분기 예측기의 종류&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;정적 예측&lt;/strong&gt;: 고정된 전략(예: 항상 taken으로 예측).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;동적 예측&lt;/strong&gt;: 런타임 행동에 따라 예측을 조정.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;분기 예측 알고리즘&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1비트 및 2비트 예측기.&lt;/p&gt;
&lt;p&gt;&lt;img alt="2-bit saturating counter" src="../images/Branchless_Programming/image%206.png"&gt;&lt;/p&gt;
&lt;p&gt;2-bit saturating counter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;글로벌 및 로컬 히스토리 예측기.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;정확도와 성능 영향&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;높은 정확도는 파이프라인 지연을 감소시킴.&lt;/li&gt;
&lt;li&gt;오예측은 성능 패널티를 초래.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3. 분기 실패 패널티&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;분기 실패의 정의&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;CPU의 분기 예측이 틀렸을 때.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;파이프라인 플러시&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;예측 실행된 명령어를 버리는 과정.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;성능 패널티&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;오예측으로 인한 사이클 손실.&lt;/li&gt;
&lt;li&gt;예: 현대 CPU는 오예측당 15-20 사이클을 잃을 수 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;영향의 정량화&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;빈번한 오예측이 전체 애플리케이션 성능에 미치는 영향.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4. 분기 없는 프로그래밍&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;개념 개요&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;조건부 분기를 최소화하거나 제거하는 코드 작성.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;분기 없는 프로그래밍의 이점&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;분기 오예측 감소.&lt;/li&gt;
&lt;li&gt;명령어 수준 병렬성 향상.&lt;/li&gt;
&lt;li&gt;CPU 파이프라인 효율성 증대.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/Branchless_Programming/image%207.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;사용 사례&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;성능이 중요한 코드 섹션.&lt;/li&gt;
&lt;li&gt;예측 가능한 제어 흐름을 가진 알고리즘.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;5. 분기 없는 프로그래밍의 방법들&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;산술 및 논리 연산&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;조건부 로직을 대체하기 위해 수학적 연산 사용.&lt;/li&gt;
&lt;li&gt;예: 비트 연산을 사용한 조건 검사.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;조건부 이동 명령어&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;분기 없이 조건 플래그에 따라 데이터를 이동시키는 &lt;code&gt;CMOV&lt;/code&gt;와 같은 명령어 활용.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;룩업 테이블&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;조건부 로직을 배열의 사전 계산된 값으로 대체.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;프레디케이션(predication) 및 선택 명령어&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;프레디케이트에 기반하여 연산을 실행하는 명령어.&lt;/li&gt;
&lt;li&gt;예: 일부 CPU 아키텍처에서의 3항 연산자.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;6. SIMD와 분기 없는 프로그래밍&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/Branchless_Programming/image%208.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SIMD 소개&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;단일 명령어, 다중 데이터: 하나의 명령어로 여러 데이터 포인트를 처리.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;벡터화&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;스칼라 연산을 벡터 연산으로 변환하는 기술.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SIMD에서의 분기 없는 기법&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;마스크 및 블렌드(blend) 명령어를 사용하여 분기 없이 조건부 로직 처리.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예시&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;대용량 데이터 세트에 병렬로 연산 적용.&lt;/li&gt;
&lt;li&gt;C/C++에서 &lt;code&gt;_mm_blendv_ps&lt;/code&gt;와 같은 인트린직 활용.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;7. 실용적인 예제&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;예제 1: 절대값 함수&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;전통적인 분기 구현 (C++):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="cpp"&gt;
int abs(int x) {
    if (x &amp;lt; 0)
        return -x;
    else
        return x;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;비트 조작을 사용한 분기 없는 구현:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="cpp"&gt;
int abs(int x) {
    int mask = x &amp;gt;&amp;gt; (sizeof(int) * 8 - 1);
    return (x + mask) ^ mask;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;설명:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x &amp;gt;&amp;gt; 31&lt;/code&gt;은 음수이면 &lt;code&gt;1&lt;/code&gt;(비트가 모두 1), 양수이면 &lt;code&gt;0&lt;/code&gt;을 반환.&lt;/li&gt;
&lt;li&gt;마스크를 사용하여 &lt;code&gt;x&lt;/code&gt;를 조정하여 분기 없이 절대값 계산.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예제 2: 값 클램핑(범위 제한)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;전통적인 분기 구현 (Python):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="python"&gt;
def clamp(value, min_val, max_val):
    if value &amp;lt; min_val:
        return min_val
    elif value &amp;gt; max_val:
        return max_val
    else:
        return value
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;분기 없는 구현:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="python"&gt;
def clamp(value, min_val, max_val):
    return max(min_val, min(value, max_val))
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;설명:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;min&lt;/code&gt; 및 &lt;code&gt;max&lt;/code&gt; 함수를 사용하여 조건부 분기 없이 값 제한.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예제 3: 루프 최적화&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;분기가 있는 루프 (C++):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="cpp"&gt;
for (int i = 0; i &amp;lt; n; ++i) {
    if (array[i] != 0) {
        sum += array[i];
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;분기 없는 루프 구현:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="cpp"&gt;
for (int i = 0; i &amp;lt; n; ++i) {
    sum += array[i] * (array[i] != 0);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;또는 SIMD를 사용하여 병렬화:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="cpp"&gt;
// SIMD 인트린직을 사용한 예제 (고급 내용)
// vectorization 기술 + mask 사용
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;설명:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;조건부 분기를 제거하고 곱셈을 사용하여 합산.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array[i] != 0&lt;/code&gt;은 &lt;code&gt;true&lt;/code&gt;이면 &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;이면 &lt;code&gt;0&lt;/code&gt;으로 처리.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예제 4: 최대값 계산&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;전통적인 분기 구현:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="cpp"&gt;
int max(int a, int b) {
    if (a &amp;gt; b)
        return a;
    else
        return b;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if&lt;/code&gt; 문을 사용하여 두 값 중 큰 값을 반환합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;분기 없는 구현:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="cpp"&gt;
int max(int a, int b) {
    int diff = a - b;
    int k = (diff &amp;gt;&amp;gt; 31) &amp;amp; 0x1;
    return a - k * diff;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;설명:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;diff &amp;gt;&amp;gt; 31&lt;/code&gt;은 &lt;code&gt;a - b&lt;/code&gt;의 부호 비트를 가져옵니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;k&lt;/code&gt;는 &lt;code&gt;a&lt;/code&gt;가 &lt;code&gt;b&lt;/code&gt;보다 크면 &lt;code&gt;0&lt;/code&gt;, 작으면 &lt;code&gt;1&lt;/code&gt;이 됩니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a - k * diff&lt;/code&gt;를 계산하여 큰 값을 반환합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예제 5: 최소값 계산&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;전통적인 분기 구현:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="cpp"&gt;
int min(int a, int b) {
    if (a &amp;lt; b)
        return a;
    else
        return b;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if&lt;/code&gt; 문을 사용하여 두 값 중 작은 값을 반환합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;분기 없는 구현:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="cpp"&gt;
int min(int a, int b) {
    int diff = a - b;
    int k = (diff &amp;gt;&amp;gt; 31) &amp;amp; 0x1;
    return b + k * diff;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;설명:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;diff &amp;gt;&amp;gt; 31&lt;/code&gt;은 &lt;code&gt;a - b&lt;/code&gt;의 부호 비트를 가져옵니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;k&lt;/code&gt;는 &lt;code&gt;a&lt;/code&gt;가 &lt;code&gt;b&lt;/code&gt;보다 작으면 &lt;code&gt;1&lt;/code&gt;, 크면 &lt;code&gt;0&lt;/code&gt;이 됩니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b + k * diff&lt;/code&gt;를 계산하여 작은 값을 반환합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예제 6: 부호 함수 구현&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;전통적인 분기 구현:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="cpp"&gt;
int sign(int x) {
    if (x &amp;gt; 0)
        return 1;
    else if (x &amp;lt; 0)
        return -1;
    else
        return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if&lt;/code&gt; 문을 사용하여 수의 부호를 반환합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;분기 없는 구현:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="cpp"&gt;
int sign(int x) {
    return (x &amp;gt; 0) - (x &amp;lt; 0);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;설명:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(x &amp;gt; 0)&lt;/code&gt;은 &lt;code&gt;true&lt;/code&gt;이면 &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;이면 &lt;code&gt;0&lt;/code&gt;입니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(x &amp;lt; 0)&lt;/code&gt;은 &lt;code&gt;true&lt;/code&gt;이면 &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;이면 &lt;code&gt;0&lt;/code&gt;입니다.&lt;/li&gt;
&lt;li&gt;두 값을 빼서 &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt; 중 하나를 반환합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예제 7: 조건부 값 선택&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;전통적인 분기 구현:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="cpp"&gt;
int select(bool condition, int true_val, int false_val) {
    if (condition)
        return true_val;
    else
        return false_val;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if&lt;/code&gt; 문을 사용하여 조건에 따라 값을 선택합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;분기 없는 구현:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="cpp"&gt;
int select(bool condition, int true_val, int false_val) {
    return false_val ^ ((true_val ^ false_val) &amp;amp; -int(condition));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;설명:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int(condition)&lt;/code&gt;는 &lt;code&gt;condition&lt;/code&gt;이 &lt;code&gt;true&lt;/code&gt;이면 &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;이면 &lt;code&gt;0&lt;/code&gt;이 됩니다.&lt;/li&gt;
&lt;li&gt;비트 연산을 통해 조건부로 값을 선택합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예제 8: 값의 범위 래핑 (Wrapping)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;전통적인 분기 구현:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="cpp"&gt;
int wrap(int value, int lower, int upper) {
    int range = upper - lower + 1;
    if (value &amp;lt; lower)
        return upper - ((lower - value - 1) % range);
    else if (value &amp;gt; upper)
        return lower + ((value - upper - 1) % range);
    else
        return value;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;조건문을 사용하여 값을 지정된 범위 내로 래핑합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;분기 없는 구현:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="cpp"&gt;
int wrap(int value, int lower, int upper) {
    int range = upper - lower + 1;
    return lower + ((value - lower) % range + range) % range;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;설명:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;수학적 연산을 사용하여 분기 없이 값을 래핑합니다.&lt;/li&gt;
&lt;li&gt;모듈로 연산을 두 번 사용하여 음수 값을 처리합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예제 9: 조건부 합산&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;전통적인 분기 구현:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="cpp"&gt;
int conditional_add(int sum, int value, bool condition) {
    if (condition)
        return sum + value;
    else
        return sum;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;조건에 따라 값을 합산합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;분기 없는 구현:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="cpp"&gt;
int conditional_add(int sum, int value, bool condition) {
    return sum + (value * condition);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;설명:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;condition&lt;/code&gt;이 &lt;code&gt;true&lt;/code&gt;이면 &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;이면 &lt;code&gt;0&lt;/code&gt;으로 간주되어 곱셈으로 합산 결정.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예제 10: 비트 반전 없이 음수 만들기&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;분기 없는 구현:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="cpp"&gt;
int negate(int x) {
    return ~x + 1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;설명:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2의 보수를 사용하여 분기 없이 음수를 만듭니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예제 11: 배열 요소 임계값 처리&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;전통적인 분기 구현:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="cpp"&gt;
void threshold(int* data, size_t size, int threshold) {
    for (size_t i = 0; i &amp;lt; size; ++i) {
        if (data[i] &amp;gt; threshold) {
            data[i] = threshold;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;조건문을 사용하여 각 배열 요소가 임계값을 초과하면 임계값으로 설정합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;분기 없는 SIMD 구현:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="cpp"&gt;
#include &lt;immintrin.h&gt;&lt;/p&gt;
&lt;p&gt;void threshold_simd(int* data, size_t size, int threshold) {
    size_t i = 0;
    __m256i v_threshold = _mm256_set1_epi32(threshold); // 임계값을 모든 요소에 복사&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;개의&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;정수를&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;한&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;번에&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;처리&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;데이터&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;로드&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;__m256i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v_data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_mm256_loadu_si256&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;__m256i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;데이터와&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;임계값의&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;최소값&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;계산&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;__m256i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v_result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_mm256_min_epi32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v_threshold&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;결과&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;저장&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;_mm256_storeu_si256&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;__m256i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v_result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;남은&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;요소&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;처리&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;설명:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SIMD 명령어 &lt;code&gt;_mm256_min_epi32&lt;/code&gt;를 사용하여 분기 없이 각 요소를 임계값과 비교하여 작은 값을 선택합니다.&lt;/li&gt;
&lt;li&gt;한 번에 8개의 요소를 처리하여 성능을 향상시킵니다.&lt;/li&gt;
&lt;li&gt;분기를 제거하여 분기 예측 실패로 인한 오버헤드를 감소시킵니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예제 12: 음수 값을 0으로 설정&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;전통적인 분기 구현:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="cpp"&gt;
void zero_negative(int* data, size_t size) {
    for (size_t i = 0; i &amp;lt; size; ++i) {
        if (data[i] &amp;lt; 0) {
            data[i] = 0;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;조건문을 사용하여 배열에서 음수 값을 찾아 0으로 만듭니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;분기 없는 SIMD 구현:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="cpp"&gt;
#include &lt;immintrin.h&gt;&lt;/p&gt;
&lt;p&gt;void zero_negative_simd(int* data, size_t size) {
    size_t i = 0;
    __m256i zero = _mm256_setzero_si256(); // 모든 요소가 0인 벡터&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;개의&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;정수를&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;한&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;번에&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;처리&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;데이터&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;로드&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;__m256i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v_data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_mm256_loadu_si256&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;__m256i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;음수인&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;요소를&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;찾기&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;위한&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;마스크&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;생성&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;__m256i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_mm256_cmpgt_epi32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v_data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;음수인&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;요소를&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;으로&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;설정&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;__m256i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v_result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_mm256_blendv_epi8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;결과&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;저장&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;_mm256_storeu_si256&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;__m256i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v_result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;남은&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;요소&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;처리&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;설명:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_mm256_cmpgt_epi32&lt;/code&gt;를 사용하여 음수인 요소에 대한 마스크를 생성합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_mm256_blendv_epi8&lt;/code&gt;를 통해 마스크에 따라 음수인 요소를 0으로 설정합니다.&lt;/li&gt;
&lt;li&gt;분기 없는 SIMD 연산을 통해 처리 속도를 높입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;벤치마킹 결과&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;분기 있는 코드와 분기 없는 코드의 성능 비교 차트 제공.&lt;/li&gt;
&lt;li&gt;사이클 카운트, 실행 시간 등의 메트릭.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;8. 도구 및 기술&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;프로파일링 및 벤치마킹&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;perf&lt;/code&gt;, &lt;code&gt;gprof&lt;/code&gt;, &lt;code&gt;Intel VTune&lt;/code&gt; 등의 도구를 사용하여 병목 지점 식별.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;컴파일러 최적화&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;현대 컴파일러가 코드를 최적화하는 방법과 생성된 어셈블리를 이해하는 중요성.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;인트린직 및 저수준 프로그래밍&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;최적화를 위한 CPU 특정 명령어 활용.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;정적 분석&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;코드 경로를 분석하고 잠재적인 분기를 식별하는 도구.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;9. 잠재적인 단점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;코드 가독성 및 유지보수성&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;분기 없는 코드는 직관적이지 않고 이해하기 어려울 수 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;일부 경우의 오버헤드&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;모든 코드가 분기 없는 기법의 이점을 얻는 것은 아니며, 때로는 분기가 더 빠를 수 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;하드웨어 고려 사항&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;CPU 아키텍처의 차이가 성능 향상에 영향을 줄 수 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;디버깅 복잡성&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;복잡한 코드 경로는 디버깅을 더 어렵게 만들 수 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;10. 모범 사례&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;균형 잡힌 접근&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;성능과 코드 명확성 간의 트레이드오프 평가.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/Branchless_Programming/image%209.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;점진적인 최적화&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로파일링을 통해 식별된 중요한 코드 경로에 초점.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;테스트 및 검증&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;최적화가 프로그램의 정확성을 변경하지 않도록 보장.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;하드웨어 트렌드 업데이트&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;새로운 CPU 기능 및 명령어 세트에 대한 최신 정보 유지.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="performance"></category><category term="algorithm"></category><category term="backend"></category><category term="performance"></category></entry><entry><title>Cache prefetching과 sequential processing의 장점</title><link href="https://blog.i544c.com/cache-prefetchinggwa-sequential-processingyi-jangjeom.html" rel="alternate"></link><published>2024-10-07T14:56:00+09:00</published><updated>2024-10-11T10:45:00+09:00</updated><author><name>박이삭</name></author><id>tag:blog.i544c.com,2024-10-07:/cache-prefetchinggwa-sequential-processingyi-jangjeom.html</id><summary type="html">&lt;p&gt;cache prefeching &amp;amp; sequential processing&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h2&gt;&lt;strong&gt;I. 서론&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPU 캐시 성능의 중요성&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;현대 컴퓨팅 환경에서 CPU와 메모리 간의 속도 차이로 인한 성능 병목 현상이 발생합니다.&lt;/li&gt;
&lt;li&gt;CPU 캐시는 이러한 속도 격차를 줄여주는 중요한 역할을 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;캐시 프리패칭과 순차 처리 개요&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;캐시 프리패칭&lt;/strong&gt;: 미래에 필요할 데이터를 미리 캐시에 로드하여 성능을 향상시키는 기술입니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/cache_prefeching/image.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;순차 처리&lt;/strong&gt;: 데이터 접근 패턴을 최적화하여 캐시 효율을 높이는 방법입니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/cache_prefeching/image%201.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;strong&gt;II. 캐시 메모리의 기초&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;메모리 계층 구조&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/cache_prefeching/image%202.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;레지스터&lt;/strong&gt;: CPU 내부에 위치하며 가장 빠른 속도를 가집니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;캐시 메모리&lt;/strong&gt;: L1, L2, L3로 구분되며, CPU와 주 메모리 사이의 속도 격차를 줄여줍니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;주 메모리(RAM)&lt;/strong&gt;: 대용량이지만 상대적으로 느린 속도를 가집니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;보조 저장소(SSD, HDD)&lt;/strong&gt;: 영구적인 데이터 저장소로 가장 느립니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;캐시 메모리의 역할&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;자주 사용되는 데이터를 캐시에 저장하여 빠른 데이터 접근을 가능하게 합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;공간 지역성&lt;/strong&gt;과 &lt;strong&gt;시간 지역성&lt;/strong&gt;을 활용합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;캐시 미스와 성능 영향&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/cache_prefeching/image%203.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;캐시 히트&lt;/strong&gt;: 필요한 데이터가 캐시에 존재하여 빠르게 접근 가능.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;캐시 미스&lt;/strong&gt;: 캐시에 데이터가 없어 주 메모리에서 가져와야 함.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;미스 패널티&lt;/strong&gt;: 캐시 미스로 인한 지연 시간이 성능 저하를 유발합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;strong&gt;III. 캐시 프리패칭 기술&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;캐시 프리패칭이란?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/cache_prefeching/image%204.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로그램이 미래에 필요로 할 데이터를 미리 예측하여 캐시에 로드하는 기술입니다.&lt;/li&gt;
&lt;li&gt;캐시 미스를 줄이고 데이터 접근 지연을 최소화합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;프리패칭의 종류&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;하드웨어 프리패칭&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;CPU 자체에서 프리패칭을 수행합니다.&lt;/li&gt;
&lt;li&gt;예측 알고리즘을 통해 다음에 필요한 데이터를 미리 가져옵니다.&lt;/li&gt;
&lt;li&gt;프로그래머의 개입 없이 자동으로 작동합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;소프트웨어 프리패칭&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;프로그래머나 컴파일러가 명시적으로 프리패칭을 구현합니다.&lt;/li&gt;
&lt;li&gt;예를 들어, C 언어에서 &lt;code&gt;__builtin_prefetch()&lt;/code&gt; 함수를 사용합니다.&lt;/li&gt;
&lt;li&gt;애플리케이션 특성에 맞게 최적화할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;프리패칭 알고리즘&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;순차 프리패칭&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;연속된 메모리 주소에 대한 접근을 예측합니다.&lt;/li&gt;
&lt;li&gt;배열이나 리스트의 순차적인 데이터 접근 시 효과적입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;스트라이드 프리패칭&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/cache_prefeching/image%205.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;일정한 간격으로 메모리에 접근하는 패턴을 예측합니다.&lt;/li&gt;
&lt;li&gt;예를 들어, 2차원 배열의 열을 순회할 때 사용됩니다.&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;적응형 프리패칭&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로그램의 실행 패턴을 분석하여 동적으로 프리패칭 전략을 조절합니다.&lt;/li&gt;
&lt;li&gt;복잡한 접근 패턴에서도 성능을 향상시킵니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;프리패칭의 이점과 과제&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/cache_prefeching/image%206.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;이점&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;캐시 미스를 줄여 전반적인 시스템 성능을 향상시킵니다.&lt;/li&gt;
&lt;li&gt;CPU의 유휴 시간을 감소시킵니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;과제&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;잘못된 프리패칭은 불필요한 메모리 대역폭을 사용하고 캐시를 오염시킬 수 있습니다.&lt;/li&gt;
&lt;li&gt;정확한 예측이 어려운 복잡한 접근 패턴에서는 효과가 제한적입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;strong&gt;IV. 순차 처리와 그 이점&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;순차 처리의 정의&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터나 명령어를 메모리에 저장된 순서대로 처리하는 방법입니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;공간 지역성&lt;/strong&gt;을 최대한 활용하여 캐시 효율을 높입니다.
  예시) 데이터의 지속성이 있을 경우 + L1, L2 cache가 충분할 경우 huge page를 사용하여 공간 지역성을 살릴 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/cache_prefeching/image%207.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;캐시 성능 향상 방법으로서의 순차 처리&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;연속된 메모리 접근은 캐시 히트율을 높여줍니다.&lt;/li&gt;
&lt;li&gt;캐시 라인의 데이터를 최대한 활용하여 메모리 접근 횟수를 줄입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;파이썬에서의 순차 처리 적용 방법&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;리스트와 배열의 순차 접근&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;파이썬 리스트나 &lt;code&gt;numpy&lt;/code&gt; 배열을 인덱스를 사용하여 순차적으로 접근합니다.
    &lt;pre&gt;&lt;code class="python"&gt;
    for i in range(len(data)):
        process(data[i])
    &lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;이러한 방식은 메모리 상에서 연속된 데이터에 접근하므로 캐시 효율이 높습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;데이터 구조 선택&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;연속된 메모리 공간을 사용하는 데이터 구조를 선택합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;numpy&lt;/code&gt; 배열은 C 언어의 배열과 유사하게 메모리에 연속적으로 저장됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;메모리 정렬 및 배치&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;데이터의 메모리 배치를 신중하게 설계하여 캐시 미스를 줄입니다.&lt;/li&gt;
&lt;li&gt;구조체 배열보다 배열의 구조체를 사용하는 것이 메모리 접근 효율에 유리합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;순차적이지 않은 처리의 사례&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;연결 리스트 사용&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;노드들이 메모리 상에서 분산되어 있어 캐시 미스가 증가합니다.
    &lt;pre&gt;&lt;code class="python"&gt;
    while node is not None:
        process(node.data)
        node = node.next
    &lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;메모리 할당이 동적이므로 순차 접근의 이점을 누리기 어렵습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;딕셔너리와 세트 사용&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;내부적으로 해시 테이블을 사용하여 메모리 접근이 비순차적입니다.&lt;/li&gt;
&lt;li&gt;큰 데이터셋의 경우 캐시 효율이 크게 떨어질 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;임의의 인덱스 접근&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;리스트나 배열에서 랜덤하게 인덱스로 접근할 때입니다.
    &lt;pre&gt;&lt;code class="python"&gt;
    for i in random_indices:
        process(data[i])
    &lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;데이터가 메모리 상에 연속되어 있어도 접근 패턴이 불규칙하면 캐시 효율이 낮아집니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;실제 프로그램에서의 순차 처리 효과&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;행렬 연산&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/cache_prefeching/image%208.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;행 우선 순회와 열 우선 순회에서의 성능 차이.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;numpy&lt;/code&gt;는 기본적으로 행 우선(C-order)이므로 이에 맞게 데이터 접근.
    &lt;pre&gt;&lt;code class="python"&gt;
    # 열 우선 접근 (캐시 효율 낮음)
    for j in range(cols):
        for i in range(rows):
            process(matrix[i][j])
    &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;행 우선 접근이 캐시 히트율이 높아 성능이 향상됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;이미지 처리&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/cache_prefeching/image%209.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;픽셀 데이터를 순차적으로 처리하여 캐시 미스를 줄입니다.&lt;/li&gt;
&lt;li&gt;이미지 필터링이나 변환 작업에서 성능 개선.&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;파일 읽기&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;큰 파일을 읽을 때는 버퍼를 사용하여 블록 단위로 순차적으로 읽습니다.
    &lt;pre&gt;&lt;code class="python"&gt;
    with open('large_file', 'rb') as f:
        while chunk := f.read(1024 * 1024):
            process(chunk)
    &lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;디스크 I/O 효율과 캐시 효율을 모두 높일 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;strong&gt;V. 캐시 프리패칭과 순차 처리의 결합&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;두 기술의 시너지 효과&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;순차 처리는 프리패처의 예측 정확도를 높여줍니다.&lt;/li&gt;
&lt;li&gt;캐시 프리패칭은 순차 처리에서 발생하는 캐시 미스를 더욱 줄여줍니다.&lt;/li&gt;
&lt;li&gt;두 기술을 함께 사용하면 캐시 효율을 극대화할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;실제 응용 분야&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;바이너리 버퍼 연산 속도 개선&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;대용량 바이너리 데이터 처리&lt;/strong&gt;에서 중요한 역할을 합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;순차적인 메모리 접근&lt;/strong&gt;을 통해 버퍼 연산의 속도를 향상시킵니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;파일 입출력(IO)&lt;/strong&gt;, &lt;strong&gt;네트워크 패킷 처리&lt;/strong&gt; 등에서 성능 개선을 이끌어냅니다.&lt;/li&gt;
&lt;li&gt;예를 들어, &lt;strong&gt;이미지나 비디오 데이터의 실시간 스트리밍&lt;/strong&gt;에서 버퍼링 효율을 높입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;고성능 컴퓨팅(HPC)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;대규모 데이터셋을 처리하는 과학 계산에서 필수적입니다.&lt;/li&gt;
&lt;li&gt;순차 처리와 프리패칭을 통해 메모리 병목을 최소화합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;데이터 집약적 애플리케이션&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;머신러닝 모델의 학습 및 추론 시 데이터 로딩 효율을 높입니다.&lt;/li&gt;
&lt;li&gt;빅데이터 분석에서의 대용량 데이터 처리 속도 향상.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;게임 개발&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;실시간 렌더링과 물리 엔진에서 메모리 접근 패턴을 최적화합니다.&lt;/li&gt;
&lt;li&gt;프레임 레이트 향상과 렉 감소에 기여합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;VI. 테스트&lt;/h2&gt;
&lt;h3&gt;&lt;strong&gt;numpy로 캐시 프리패칭 효과를 보여주는 예제&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;제약 사항:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파이썬 인터프리터의 오버헤드로 인해, &lt;strong&gt;순수 파이썬으로 캐시 프리패칭의 효과를 명확하게 보여주기&lt;/strong&gt;는 어렵습니다.&lt;/li&gt;
&lt;li&gt;상대적인 성능 차이를 관찰할 수 있는 간단한 예제&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;numpy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="c1"&gt;# 데이터 크기 설정&lt;/span&gt;
&lt;span class="n"&gt;data_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10_000_000&lt;/span&gt;

&lt;span class="c1"&gt;# NumPy 배열 생성&lt;/span&gt;
&lt;span class="n"&gt;data_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 순차 접근 함수&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;sequential_access&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;

&lt;span class="c1"&gt;# 랜덤 인덱스 생성&lt;/span&gt;
&lt;span class="n"&gt;random_indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random_indices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 랜덤 접근 함수&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;random_access&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indices&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;indices&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;

&lt;span class="c1"&gt;# 순차 접근 시간 측정&lt;/span&gt;
&lt;span class="n"&gt;start_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;sequential_access&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;seq_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start_time&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;순차 접근 시간: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;seq_time&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;.6f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;초&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 순차 접근(per element) 시간 측정&lt;/span&gt;
&lt;span class="n"&gt;per_element_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;seq_time&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;data_size&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;순차 접근(per element) 시간: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;per_element_time&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1_000_000_000&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;.6f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;ns&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 랜덤 접근 시간 측정&lt;/span&gt;
&lt;span class="n"&gt;start_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;random_access&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random_indices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rand_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start_time&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;랜덤 접근 시간: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;rand_time&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;.6f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;초&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 랜덤 접근(per element) 시간 측정&lt;/span&gt;
&lt;span class="n"&gt;per_element_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rand_time&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;data_size&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;랜덤 접근(per element) 시간: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;per_element_time&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1_000_000_000&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;.6f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;ns&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 성능 비교&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;랜덤 접근은 순차 접근보다 &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;rand_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seq_time&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;.2f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;배 느립니다.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="image.png" src="../images/cache_prefeching/image%2010.png"&gt;&lt;/p&gt;
&lt;h3&gt;순차 검색이 정렬 및 이진 검색보다 빠른 경우를 보여주는 코드 예제&lt;/h3&gt;
&lt;p&gt;일반적으로 &lt;strong&gt;이진 검색&lt;/strong&gt;은 &lt;strong&gt;정렬된 데이터&lt;/strong&gt;에서 원하는 값을 빠르게 찾을 수 있는 효율적인 알고리즘입니다. 그러나 데이터가 정렬되어 있지 않은 경우, &lt;strong&gt;데이터를 정렬하는 비용&lt;/strong&gt;이 추가됩니다. 작은 데이터셋이나 특정 상황에서는 &lt;strong&gt;순차 검색(Linear Search)&lt;/strong&gt;이 전체적으로 더 빠를 수 있습니다.&lt;/p&gt;
&lt;p&gt;또한, 순차 검색은 &lt;strong&gt;연속된 메모리 접근&lt;/strong&gt;을 하므로 &lt;strong&gt;캐시 프리패칭&lt;/strong&gt;의 이점을 누릴 수 있습니다. 반면, 이진 검색은 메모리 접근 패턴이 불규칙하여 캐시 미스가 증가할 수 있습니다.&lt;/p&gt;
&lt;p&gt;python으로는 정확한 cache prefetching테스트가 어려워, C로 진행합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// 순차 검색 함수&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;sequential_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 이진 검색 함수&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 비교 함수 (qsort에 사용)&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;compare_ints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 백만 개의 요소&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_trials&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="c1"&gt;// 반복 횟수 설정&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;total_seq_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;total_sort_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;total_bin_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 난수 시드 설정&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;srand&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;trial&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;trial&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_trials&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;trial&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;메모리 할당 실패&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 데이터셋 생성 (랜덤 정수)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 검색할 값 설정 (데이터셋에 존재하는 값)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;target_index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;target_index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 순차 검색 시간 측정&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;clock_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start_seq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;index_seq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sequential_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;clock_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end_seq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time_seq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;end_seq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start_seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CLOCKS_PER_SEC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1000.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 밀리초 단위&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 데이터 정렬 시간 측정&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;clock_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start_sort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;qsort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;compare_ints&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;clock_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end_sort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time_sort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;end_sort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start_sort&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CLOCKS_PER_SEC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1000.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 밀리초 단위&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 이진 검색 시간 측정&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;clock_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start_bin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;index_bin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;binary_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;clock_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end_bin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time_bin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;end_bin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start_bin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CLOCKS_PER_SEC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1000.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 밀리초 단위&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 총 시간 누적&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;total_seq_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time_seq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;total_sort_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time_sort&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;total_bin_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;time_bin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 메모리 해제&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 평균 시간 계산&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;avg_seq_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;total_seq_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_trials&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;avg_sort_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;total_sort_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_trials&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;avg_bin_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;total_bin_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_trials&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;avg_total_bin_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;avg_sort_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;avg_bin_time&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 결과 출력&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;실행 횟수: %d회&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_trials&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;순차 검색 평균 시간: %.6fms&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;avg_seq_time&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;데이터 정렬 평균 시간: %.6fms&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;avg_sort_time&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;이진 검색 평균 시간: %.6fms&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;avg_bin_time&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;순차 검색 평균 총 시간: %.6fms&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;avg_seq_time&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;정렬 + 이진 검색 평균 총 시간: %.6fms&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;avg_total_bin_time&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;avg_seq_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;avg_total_bin_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;순차 검색이 전체적으로 더 빠릅니다.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;정렬 후 이진 검색이 전체적으로 더 빠릅니다.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;CC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;gcc
&lt;span class="nv"&gt;CFLAGS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-O2&lt;span class="w"&gt; &lt;/span&gt;-Wall
&lt;span class="nv"&gt;TARGET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;

&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;TARGET&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;$(TARGET)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;.&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;CFLAGS&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;TARGET&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;test.c

&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;TARGET&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="image.png" src="../images/cache_prefeching/image%2011.png"&gt;&lt;/p&gt;</content><category term="기술스택"></category><category term="backend"></category><category term="data structure"></category><category term="profiling"></category><category term="python"></category></entry><entry><title>Loki 소개 및 로그시스템 구축</title><link href="https://blog.i544c.com/loki-sogae-mic-rogeusiseutem-gucug.html" rel="alternate"></link><published>2024-08-08T14:56:00+09:00</published><updated>2024-08-19T17:13:00+09:00</updated><author><name>박이삭</name></author><id>tag:blog.i544c.com,2024-08-08:/loki-sogae-mic-rogeusiseutem-gucug.html</id><summary type="html">&lt;p&gt;Loki, log system&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Loki라는 log system으로 로그시스템을 구축한 내용을 소개하려고 합니다.&lt;/p&gt;
&lt;h2&gt;Loki&lt;/h2&gt;
&lt;p&gt;Loki는 Grafana Labs에서 개발한 로그 집계 시스템으로, Prometheus와 유사한 구조를 가지고 있습니다. 로그 데이터를 효율적으로 수집, 저장, 검색할 수 있으며, 특히 메타데이터 기반의 인덱싱을 통해 저장소 사용량을 최소화하는 것이 특징입니다. 
Kubernetes 환경에서도 원활하게 동작하며, 다양한 데이터 소스와 통합이 가능합니다. Loki는 로그를 텍스트 형태로 저장하며, 로그 레이블을 사용해 빠르게 검색할 수 있습니다. 이는 로그 데이터를 보다 체계적으로 관리하고 필요한 정보를 신속하게 찾을 수 있게 도와줍니다. 
주로 Grafana와 함께 사용되어 시각화와 모니터링을 용이하게 합니다. Grafana에서 Loki의 데이터를 사용하여 대시보드를 구성하면, 전체 시스템의 상태를 한눈에 파악할 수 있습니다.
또한, Loki는 클라우드 네이티브 애플리케이션 환경에 적합하며, 다양한 클라우드 서비스와 통합이 가능합니다. 예를 들어, Amazon S3, Google Cloud Storage 등과 같은 오브젝트 스토리지와도 쉽게 연동할 수 있어, 로그 데이터를 안전하고 효율적으로 저장하고 관리할 수 있습니다. 
Loki의 주요 장점 중 하나는 비용 효율성입니다. 로그 데이터를 메타데이터 기반으로 인덱싱하여 저장소 사용량을 최소화하므로, 대규모 로그 데이터를 관리하는 데 드는 비용을 절감할 수 있습니다. 
또한, Loki는 스케일 아웃 아키텍처를 지원하여, 시스템 확장이 용이합니다. 필요에 따라 노드를 추가하여 시스템 성능을 향상시킬 수 있습니다. 
마지막으로, Loki는 오픈소스 프로젝트로, 커뮤니티의 활발한 지원을 받고 있습니다. 지속적인 업데이트와 개선이 이루어지고 있어, 최신 기술을 반영한 기능을 사용할 수 있습니다. 이를 통해 사용자는 안정적이고 신뢰할 수 있는 로그 관리 시스템을 구축할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Typical Loki architecture" src="../images/loki/image.png"&gt;&lt;/p&gt;
&lt;p&gt;Typical Loki architecture&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;장점:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;비용 효율성: 메타데이터 기반 인덱싱을 통해 저장소 사용량을 최소화하여 대규모 로그 데이터를 관리하는 비용 절감&lt;/li&gt;
&lt;li&gt;스케일 아웃 아키텍처 지원: 필요에 따라 노드를 추가하여 시스템 성능 향상&lt;/li&gt;
&lt;li&gt;클라우드 네이티브 애플리케이션 환경에 적합: 다양한 클라우드 서비스와 통합 가능, 예를 들어 Amazon S3, Google Cloud Storage 등과 연동&lt;/li&gt;
&lt;li&gt;Kubernetes 환경에서 원활하게 동작: 다양한 데이터 소스와 통합 가능&lt;/li&gt;
&lt;li&gt;오픈소스 프로젝트: 활발한 커뮤니티 지원, 지속적인 업데이트와 개선&lt;/li&gt;
&lt;li&gt;Grafana와의 호환성: 시각화와 모니터링을 용이하게 하여 전체 시스템 상태를 한눈에 파악 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;단점:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;검색 성능 저하: 메타데이터 기반 인덱싱만으로는 대규모 로그 데이터에서 검색 성능이 저하될 수 있음&lt;/li&gt;
&lt;li&gt;데이터 중복 문제: 로그 데이터가 중복 저장될 가능성이 있음&lt;/li&gt;
&lt;li&gt;설정 복잡성: 초기 설정과 구성 과정이 복잡할 수 있으며, 사용자에게 높은 기술적 이해도가 요구됨&lt;/li&gt;
&lt;li&gt;제한된 기본 기능: 일부 고급 기능은 플러그인이나 추가 도구를 통해서만 사용할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Architecture&lt;/h2&gt;
&lt;p&gt;구조를 구상 시 고려사항은 아래와 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;비용최적화 위해 ingester replica count를 1개 사용&lt;/li&gt;
&lt;li&gt;로그손실 방지 및 buffering kafka event broker사용&lt;/li&gt;
&lt;li&gt;write path, read path를 분리되는 배포방법 사용으로 필요에 따라 양쪽 scale-in, out 지원&lt;/li&gt;
&lt;li&gt;bloom filter 사용으로 문자열 색인검색 지원&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="../images/loki/memo-log-system-architecture.drawio"&gt;my-log-system-architecture.drawio&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="my-log-system-architecture.jpg" src="../images/loki/memo-log-system-architecture.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;컴포넌트&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Application, Lambda(Cloudwatch)&lt;/strong&gt;: 로그 생성하는 주체. gunicorn(django), nginx, aws lambda 등이 있습니다. lambda는 cloudwatch로 저장하게 되고, k8s상에서 동작하는 app는 k8s log(node fs)로 저장됩니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Log collector&lt;/strong&gt;: fluent-bit와 fluentd로 로그를 수집합니다. fluent-bit으로 pod로그수집, fluentd로 lambda(cloudwatch)로그 수집을 합니다. 수집한 로그는 kafka로 전달됩니다. 필요에 따라 추가 정보(pod, namespace, HW정보 등)을 로그 metadata로 포함합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kafka(MSK)&lt;/strong&gt;: 로그가 저장되기 전까지 buffering이 되는 기능을 제공합니다. loki나 log forwarder가 장애 발생해더라도 로그 손실을 방지할 수 있습니다. AWS mananged service사용합니다. loki ingester replica 1개 사용 대신 kafka를 사용하여 HA를 해결했습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Log Forwarder&lt;/strong&gt;: kafka서 로그를 consuming하는 객체입니다. log collector로 전달받은 로그와 metadata를 loki인터페이스에 맞추어 loki에 전달합니다. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Loki&lt;/strong&gt;: 로그 수집, 인덱싱, 압축, 업로드, 쿼리, 케싱, API서버 등 기능을 제공합니다. 스토리지는 S3를 사용합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;S3&lt;/strong&gt;: 로그의 chunk와 index 등 파일들을 영구저장하는 저장소입니다. loki에서 관리합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Grafana&lt;/strong&gt;: Loki의 GUI역활을 합니다. loki소스 기반 alert 및 rule도 제공합니다.&lt;/p&gt;
&lt;h2&gt;LogQL 기본 사용법&lt;/h2&gt;
&lt;h3&gt;기본 쿼리&lt;/h3&gt;
&lt;p&gt;LogQL은 Grafana Loki에서 사용하는 쿼리 언어로, 로그 데이터를 검색하고 필터링하며, 메트릭을 생성할 수 있습니다. 
LogQL은 두 가지 주요 구성 요소로 구성됩니다: &lt;strong&gt;로그 쿼리(log query)&lt;/strong&gt;와 &lt;strong&gt;메트릭 쿼리(metric query)&lt;/strong&gt; 입니다. 
이 튜토리얼에서는 LogQL의 기본 사용법을 단계별로 설명하겠습니다.&lt;/p&gt;
&lt;h3&gt;1. LogQL 쿼리의 기본 구조&lt;/h3&gt;
&lt;p&gt;LogQL 쿼리는 기본적으로 다음과 같은 구조로 이루어져 있습니다:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{selector} | filter | parser | ... | metric_function
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;{selector}&lt;/strong&gt;: 로그 스트림을 선택하는 라벨 셀렉터입니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;filter&lt;/strong&gt;: 로그 라인에서 특정 텍스트 패턴을 찾기 위한 필터입니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;parser&lt;/strong&gt;: 로그 라인을 파싱하여 구조화된 데이터를 추출합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;metric_function&lt;/strong&gt;: 로그 라인에서 메트릭을 계산합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. 로그 쿼리&lt;/h3&gt;
&lt;p&gt;로그 쿼리는 로그 스트림을 선택하고 필터링하는 데 사용됩니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;라벨 셀렉터&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;라벨 셀렉터는 로그 스트림을 선택하는 데 사용됩니다. 라벨 셀렉터는 중괄호 &lt;code&gt;{}&lt;/code&gt; 안에 key-value 쌍으로 표현됩니다. 예를 들어:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{container_name=&amp;quot;gunicorn&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;위의 쿼리는 &lt;code&gt;container_name&lt;/code&gt; 라벨이 &lt;code&gt;gunicorn&lt;/code&gt;인 로그 스트림을 선택합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;필터링&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;파이프 &lt;code&gt;|&lt;/code&gt; 기호를 사용하여 필터를 추가할 수 있습니다. 필터는 로그 라인에서 특정 문자열을 찾는 데 사용됩니다. 예를 들어:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{container_name=&amp;quot;gunicorn&amp;quot;} |= &amp;quot;error&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;이 쿼리는 &lt;code&gt;container_name&lt;/code&gt; 라벨이 &lt;code&gt;gunicorn&lt;/code&gt;인 로그 스트림에서 &lt;code&gt;"error"&lt;/code&gt; 문자열이 포함된 로그 라인을 필터링합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;네거티브 필터&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;특정 문자열이 포함되지 않은 로그 라인을 찾을 때는 &lt;code&gt;!=&lt;/code&gt; 연산자를 사용합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{container_name=&amp;quot;gunicorn&amp;quot;} != &amp;quot;info&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;이 쿼리는 &lt;code&gt;container_name&lt;/code&gt; 라벨이 &lt;code&gt;gunicorn&lt;/code&gt;인 로그 스트림에서 &lt;code&gt;"info"&lt;/code&gt; 문자열이 포함되지 않은 로그 라인을 필터링합니다.&lt;/p&gt;
&lt;h3&gt;3. 메트릭 쿼리&lt;/h3&gt;
&lt;p&gt;메트릭 쿼리는 로그 라인에서 메트릭을 계산하는 데 사용됩니다. 메트릭을 계산하려면 &lt;code&gt;rate&lt;/code&gt; 함수와 같은 함수와 함께 사용합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;카운트 메트릭&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;로그 라인을 카운트하여 메트릭을 생성할 수 있습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;count_over_time({container_name=&amp;quot;gunicorn&amp;quot;}[5m])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;이 쿼리는 &lt;code&gt;container_name&lt;/code&gt; 라벨이 &lt;code&gt;gunicorn&lt;/code&gt;인 로그 스트림에서 최근 5분 동안의 로그 라인 수를 카운트합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;속도 계산&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;로그 라인의 속도를 계산하려면 &lt;code&gt;rate&lt;/code&gt; 함수를 사용할 수 있습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;rate({container_name=&amp;quot;gunicorn&amp;quot;}[1m])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;이 쿼리는 &lt;code&gt;container_name&lt;/code&gt; 라벨이 &lt;code&gt;gunicorn&lt;/code&gt;인 로그 스트림에서 매 분당 로그 라인의 생성 속도를 계산합니다.&lt;/p&gt;
&lt;h3&gt;4. 파싱 로그 라인&lt;/h3&gt;
&lt;p&gt;LogQL은 로그 라인을 파싱하여 구조화된 데이터를 추출할 수 있습니다. &lt;code&gt;| json&lt;/code&gt; 또는 &lt;code&gt;| logfmt&lt;/code&gt;와 같은 파서(parser)를 사용하여 로그 데이터를 구조화할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JSON 파서&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{container_name=&amp;quot;gunicorn&amp;quot;} | json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;이 쿼리는 &lt;code&gt;container_name&lt;/code&gt; 라벨이 &lt;code&gt;gunicorn&lt;/code&gt;인 로그 스트림을 선택하고, 로그 라인을 JSON 형식으로 파싱하여 키-값 쌍으로 변환합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Logfmt 파서&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{container_name=&amp;quot;nginx&amp;quot;} | logfmt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;이 쿼리는 &lt;code&gt;container_name&lt;/code&gt; 라벨이 &lt;code&gt;nginx&lt;/code&gt;인 로그 스트림을 선택하고, 로그 라인을 logfmt 형식으로 파싱하여 키-값 쌍으로 변환합니다.&lt;/p&gt;
&lt;h3&gt;5. 정리&lt;/h3&gt;
&lt;p&gt;LogQL은 강력한 로그 분석 도구로서, 라벨 셀렉터를 사용하여 로그 스트림을 선택하고, 다양한 필터와 파서를 사용하여 로그 데이터를 분석할 수 있습니다. 
이를 통해 로그 데이터에서 유용한 인사이트를 얻고, 메트릭을 계산할 수 있습니다. 
기본적인 LogQL 사용법을 익힌 후에는 더 복잡한 쿼리를 작성하여 다양한 분석을 시도해볼 수 있습니다.
LogQL의 공식 문서와 Grafana의 예제를 통해 추가적인 기능과 고급 사용법을 탐색할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://grafana.com/docs/loki/latest/query/&lt;/li&gt;
&lt;li&gt;https://sbcode.net/grafana/logql/&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bloom filters 사용법&lt;/h2&gt;
&lt;p&gt;Bloom filters는 해시 기반의 확률적 데이터 구조로, 집합에 대한 멤버십 검사를 수행하는데 사용됩니다. 특정 값에 대한 해시값을 비트 배열(bitmask)에 기록하면서 인덱싱을 합니다.&lt;/p&gt;
&lt;p&gt;Bloom filters는 다음과 같은 특징을 가지고 있습니다:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;False Negative가 없는 구조&lt;/strong&gt;: 특정 값이 Bloom Filter에 존재하지 않는다고 나왔을 때, 해당 값은 실제로도 집합에 존재하지 않는 것이 100% 확실합니다. 
즉, False Negative의 확률이 0%입니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;False Positive의 가능성&lt;/strong&gt;: 특정 값이 Bloom Filter에 존재한다고 나왔을 때, 실제로는 존재하지 않을 수도 있습니다. 이는 해시 충돌로 인해 발생하며, 
False Positive의 확률은 0보다 크고 1보다 작습니다. 이 확률은 사용된 해시 함수의 개수와 비트 배열의 크기에 따라 달라집니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;효율성&lt;/strong&gt;: 메모리 사용량이 적고, 매우 빠른 검색 속도를 제공합니다. 하지만 원소의 삭제가 어렵다는 단점이 있습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;해시 충돌로 인해 동일한 해시 인덱스가 여러 번 사용될 수 있지만, 특정 값이 해시된 인덱스에서 비트가 모두 1로 설정되어 있다면 그 값은 집합에 존재할 수도 있고, 아닐 수도 있습니다. 
그러나, 만약 해시된 인덱스 중 하나라도 0이라면 해당 값은 집합에 존재하지 않는 것이 확실합니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/loki/image%201.png"&gt;&lt;/p&gt;
&lt;p&gt;이런 특징으로 인해 log 문자열 색인에 활용되고 있습니다. Loki는 log message를 n-gram으로 나누어 token을 hash값으로 bloom filters를 사용하고 있습니다.&lt;/p&gt;
&lt;p&gt;아래 처럼 검색 시 특정 문자열이 포함 되지 않는 로그 chunk를 빨리 구분할 수 있어 S3(혹은 cache) 검색을 줄이게 됩니다.&lt;/p&gt;
&lt;p&gt;아래 쿼리는 bloom filters 인덱스로 검색하기 때문에 빠른 반응속도를 확인 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;문자열 필터링을 쿼리 가장 앞에서 사용 시 bloom filters가 활용됩니다. 예시:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;cluster&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;prod&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;traceID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;3c0e3dcd33e7&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://grafana.com/blog/2024/04/09/grafana-loki-3.0-release-all-the-new-features/&lt;/li&gt;
&lt;/ul&gt;</content><category term="infra"></category><category term="backend"></category><category term="infra"></category><category term="log"></category></entry><entry><title>mysql 8.0 무중단 migration 방법</title><link href="https://blog.i544c.com/mysql-80-mujungdan-migration-bangbeob.html" rel="alternate"></link><published>2024-07-22T18:55:00+09:00</published><updated>2024-09-23T15:46:00+09:00</updated><author><name>박이삭</name></author><id>tag:blog.i544c.com,2024-07-22:/mysql-80-mujungdan-migration-bangbeob.html</id><summary type="html">&lt;p&gt;non-stop mysql 8.0 schema migration&lt;/p&gt;</summary><content type="html">&lt;h2&gt;배경&lt;/h2&gt;
&lt;p&gt;배포에서 디비 마이그레이션이 있을 때, 서비스에 장애발생 여부를 확인 하기 어려워 중단배포를 하는 경우가 있습니다.&lt;/p&gt;
&lt;p&gt;migration 시 일부 table lock이 발생하여 쿼리와 insert / update / delete 등 DML이 동작하지 않는 경우 서비스의 장애를 방생할 수 있습니다.&lt;/p&gt;
&lt;p&gt;다만 최신 RDBMS는 무중단 migration 기술을 지원합니다.&lt;/p&gt;
&lt;p&gt;실 서비스 중인 케어의 mysql 8.0을 기준으로 무중단 migration 기술소개와 동작원리, 중단, 무중단 마이그레이션 구분 방법 및 검증테스트 등 을 소개해드리려고 합니다.&lt;/p&gt;
&lt;h2&gt;배경기술&lt;/h2&gt;
&lt;h3&gt;SQL&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;DDL(Data Definition Language)&lt;/code&gt;는 디비의 스키마를 정의, 수정, 삭제 등 관리 가능한 sql입니다. Table관련으로 &lt;code&gt;CREATE&lt;/code&gt;, &lt;code&gt;ALTER&lt;/code&gt;, &lt;code&gt;DROP&lt;/code&gt;, &lt;code&gt;TRUNCATE&lt;/code&gt; 등이 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DML(Data Manipulation Language)&lt;/code&gt;는 디비의 table 내 개별 혹은 여러 row를 조회, 추가, 수정, 삭제 등 관리 가능한 sql입니다. &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt; 등이 있습니다.&lt;/p&gt;
&lt;p&gt;DCL, TCL은 이번 범위가 아니여 넘어가겠습니다.&lt;/p&gt;
&lt;h3&gt;Table-Copy algorithm&lt;/h3&gt;
&lt;p&gt;이전 mysql 버전은 모든 DDL 동작에 table-copy algorithm을 사용했습니다. 이는 전체 table lock이 포함되며 table 데이터 크기에 따라 필요 시 수 시간의 시간이 소요 됩니다.&lt;/p&gt;
&lt;p&gt;기본 원리는 전체 DML을 막도록 table lock을 걸고 데이터를 새로운 테이블에 복사하여 DDL을 적용합니다. 그 후 새로운 테이블 데이터를 기존 테이블에 복사하게 됩니다.&lt;/p&gt;
&lt;p&gt;이 케이스가 중단배포의 가장 큰 원인이고 이를 줄이거나 없이 할 수 있다면 무중단 배포가 가능합니다.&lt;/p&gt;
&lt;h3&gt;Online DDL&lt;/h3&gt;
&lt;p&gt;mysql 8.0 InnoDB storage engine에서는 Online DDL이라는 기술을 지원합니다.&lt;/p&gt;
&lt;p&gt;Online DDL이란 &lt;code&gt;instance&lt;/code&gt;, &lt;code&gt;in-place&lt;/code&gt; 테이블 변경이 가능하고 &lt;code&gt;Concurrent DML&lt;/code&gt;을 지원합니다.&lt;/p&gt;
&lt;p&gt;https://dev.mysql.com/doc/refman/8.0/en/innodb-online-ddl.html&lt;/p&gt;
&lt;p&gt;위 공식 문서의 online DDL에 대한 특징을 설명한 문구입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;테이블을 몇 분 또는 몇 시간 동안 사용할 수 없게 만드는 것이 실용적이지 않은 바쁜 생산 환경에서의 개선된 응답성과 가용성.&lt;/li&gt;
&lt;li&gt;실시간(in-place) 작업의 경우, LOCK 절을 사용하여 DDL 작업 중 성능과 동시성 사이의 균형을 조정할 수 있는 능력. 자세한 내용은 LOCK 절을 참조하십시오.&lt;/li&gt;
&lt;li&gt;copy-table 방법보다 적은 디스크 공간 사용 및 I/O 오버헤드.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;DDL Algorithm&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;instance:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;instance DDL algorithm은 meta데이터만 변경합니다. 일부 SQL 혹은 조건이 맞는 경우에만 사용 가능합니다.&lt;/p&gt;
&lt;p&gt;실제 데이터를 건들지 않기때문에 말 그대로 “바로” DDL을 실행 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;가능한 SQL과 조건은 아래에 자세한 설명으로 확인 하실 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;in-place:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;in-place DDL algorithm이란 table copy 없이 최소한의 lock을 활용해 기존 구조를 유지하며 데이터를 수정하는 방법입니다.&lt;/p&gt;
&lt;p&gt;LOCK=NONE 시 (아래 참고) concurrent DML을 지원하게 되는데, 필요한 데이터만(one row, meta data) lock을 사용합니다. DML이 종료 시 lock을 풀어주는 방식을 사용합니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;copy:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;이전 설명 한 table-copy algorithm 입니다.&lt;/p&gt;
&lt;h3&gt;in-place DDL Lock&lt;/h3&gt;
&lt;p&gt;LOCK은 &lt;code&gt;in-place&lt;/code&gt;으로 수행되는 작업에 사용될 수 있으며, 작업 중 테이블에 대한 동시 접근 정도를 미세 조정하는 데 유용합니다. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;instance&lt;/code&gt; 수행되는 작업에는 LOCK=DEFAULT만 지원됩니다. ALGORITHM 절은 주로 성능 비교를 위해 사용되며, 문제가 발생할 경우 기존의 테이블 복사 방법으로 돌아가기 위한 대안으로 사용됩니다. 예를 들어:&lt;/p&gt;
&lt;p&gt;실시간 ALTER TABLE 작업 중에 테이블을 읽기, 쓰기 또는 둘 다 사용할 수 없게 만드는 실수를 피하려면 ALTER TABLE 문에 &lt;strong&gt;LOCK=NONE(읽기 및 쓰기 허용)&lt;/strong&gt; 또는 LOCK=SHARED(읽기 허용)와 같은 절을 지정하십시오. 
요청된 수준의 동시성이 사용 불가능한 경우 작업은 즉시 중단됩니다.&lt;/p&gt;
&lt;h3&gt;목표&lt;/h3&gt;
&lt;p&gt;무중단 배포, lock free DDL을 실행하기 위하여 아래의 조건을 만족시켜야 됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;instance DDL algorithm 사용&lt;/li&gt;
&lt;li&gt;in-place DDL algorithm &amp;amp;&amp;amp; LOCK=NONE 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;확인방법&lt;/h2&gt;
&lt;p&gt;일반적으로 온라인 DDL을 활성화하기 위해 특별한 조치를 취할 필요는 없습니다. 기본적으로 MySQL은 가능한 최소한의 &lt;code&gt;LOCK&lt;/code&gt;으로 &lt;code&gt;instance&lt;/code&gt;이거나 &lt;code&gt;in-place&lt;/code&gt;으로 작업을 수행합니다.&lt;/p&gt;
&lt;p&gt;DDL 작업의 측면을 제어하려면 ALTER TABLE 문에서 ALGORITHM 및 LOCK 절을 사용할 수 있습니다. 이 절들은 테이블 및 열 지정에서 쉼표로 구분하여 문장의 끝에 배치됩니다. 예를 들어:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tbl_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;PRIMARY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;column&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ALGORITHM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;INPLACE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LOCK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;NONE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;서비스 영향을 최소화하면서 가능한 알고리즘을 확인해 보는 방법:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ALGORITHM=INSTANT 옵션으로 스키마 변경을 시도&lt;/li&gt;
&lt;li&gt;실패하면 ALGORITHM=INPLACE, LOCK=NONE 옵션으로 스키마 변경을 시도&lt;/li&gt;
&lt;li&gt;실패하면 ALGORITHM=INPLACE, LOCK=SHARED 옵션으로 스키마 변경을 시도&lt;/li&gt;
&lt;li&gt;실패하면 ALGORITHM=COPY, LOCK=SHARED 옵션으로 스키마 변경을 시도&lt;/li&gt;
&lt;li&gt;실패하면 ALGORITHM=COPY, LOCK=EXCLUSIVE 옵션으로 스키마 변경을 시도&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;&amp;gt;&amp;gt; 1, 2번으로 되지 않는다면 DML을 멈춘 다음 스키마 변경을 해야 하는 작업임.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.bespinglobal.com/post/mysql-online-ddl-%EB%B3%84-%EC%A0%81%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-8-0-%EC%9D%B4%EC%83%81/"&gt;[blog.bespinglobal.com/post/mysql-online-ddl-별-적용-가능한-알고리즘-8-0-이상]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;아래 링크에서 정리 된 table로 확인 할 수 도 있습니다:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;https://dev.mysql.com/doc/refman/8.0/en/innodb-online-ddl-operations.html&lt;/p&gt;
&lt;p&gt;&lt;img alt="Untitled" src="../images/mysql_8_migration/Untitled.png"&gt;&lt;/p&gt;
&lt;p&gt;예시로 &lt;strong&gt;adding column DDL&lt;/strong&gt;은 최악으로 &lt;code&gt;in-place&lt;/code&gt;, &lt;code&gt;lock=NONE(permits concurrent DML)&lt;/code&gt;인 것을 확인 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;주의할 점은 adding column DDL의 rebuilds table 예외는 아래와 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Changing the Data Type&lt;/strong&gt;: If the column addition involves a data type change that affects the physical storage format.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Column Position&lt;/strong&gt;: If the column is added at a specific position other than the end, especially in older versions before MySQL 8.0.29.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Row Format&lt;/strong&gt;: If the table uses &lt;code&gt;ROW_FORMAT=COMPRESSED&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Space Limitations&lt;/strong&gt;: If the addition exceeds the maximum row size limits.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;가장 처음의 table physical storage format들은 아래와 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Compact&lt;/strong&gt;: Stores data compactly, minimizing storage usage.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Redundant&lt;/strong&gt;: Legacy format, uses more storage.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dynamic&lt;/strong&gt;: Stores variable-length columns efficiently.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compressed&lt;/strong&gt;: Compresses data for storage efficiency.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;django단 확인&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sqlmigration&lt;/code&gt; 장고커멘드로 마이그레이션 시 실행되는 SQL을 확인 할 수 있습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;isaacpark@Isaacui-MacBookPro&lt;span class="w"&gt; &lt;/span&gt;memo-service-backend&lt;span class="w"&gt; &lt;/span&gt;%&lt;span class="w"&gt; &lt;/span&gt;./manage.py&lt;span class="w"&gt; &lt;/span&gt;sqlmigrate&lt;span class="w"&gt; &lt;/span&gt;ecg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0059&lt;/span&gt;
Invalid&lt;span class="w"&gt; &lt;/span&gt;line:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;LOG_LEVEL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;DEBUG

&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Current&lt;span class="w"&gt; &lt;/span&gt;Secret&lt;span class="w"&gt; &lt;/span&gt;ID:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;********-env&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Current&lt;span class="w"&gt; &lt;/span&gt;ENV&lt;span class="w"&gt; &lt;/span&gt;file:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;.env.isaacpark&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;AWS&lt;span class="w"&gt; &lt;/span&gt;ENV:&lt;span class="w"&gt; &lt;/span&gt;prod&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;IAM:&lt;span class="w"&gt; &lt;/span&gt;isaac.park+prod@*****.com

--
--&lt;span class="w"&gt; &lt;/span&gt;Alter&lt;span class="w"&gt; &lt;/span&gt;field&lt;span class="w"&gt; &lt;/span&gt;cloud_status&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;ecgtest
--
ALTER&lt;span class="w"&gt; &lt;/span&gt;TABLE&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;******&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;MODIFY&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;*****&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;integer&lt;span class="w"&gt; &lt;/span&gt;NOT&lt;span class="w"&gt; &lt;/span&gt;NULL&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;검증 테스트&lt;/h2&gt;
&lt;p&gt;mysq 8.0.32(prod 버전) docker compose 실행&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Docker compose file of mysql 8.0.32&lt;/span&gt;
&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;3.8&amp;#39;&lt;/span&gt;
&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;mysql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mysql:8.0.32&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;3306:3306&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;MYSQL_ROOT_PASSWORD=secret&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;MYSQL_DATABASE=mydb&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;MYSQL_USER=myuser&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;MYSQL_PASSWORD=mypassword&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;기본 table 생성&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;-- create a table named TEST, with column A, B, C all int dafault 0&lt;/span&gt;
&lt;span class="c1"&gt;-- on database mydb&lt;/span&gt;
&lt;span class="n"&gt;USE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mydb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TEST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;PRIMARY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;DEFAULT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;DEFAULT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;DEFAULT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;테스트 데이터 추가&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;# Insert 200,000 rows into the TEST table&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;..200000&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;INSERT INTO TEST (A, B, C) VALUES (%d, %d, %d);\n&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mysql&lt;span class="w"&gt; &lt;/span&gt;-h&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1&lt;span class="w"&gt; &lt;/span&gt;-P&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3306&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;root&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;--init-command&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;USE mydb; SET sql_log_bin=off; SET GLOBAL innodb_flush_log_at_trx_commit=0;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;DML 테스트 코드&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;mysql.connector&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="c1"&gt;# Database configuration&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;database&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mydb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Function to perform random DML operations&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;perform_dml_operations&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;operation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;insert&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;update&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;operation&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insert&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;INSERT INTO TEST (A, B, C, D, E) VALUES (&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                               &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;operation&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;update&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UPDATE TEST SET A = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, B = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, C = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, D = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, E = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; WHERE id = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;800_000&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
            &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt; operation completed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Error: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Function to perform the DDL operation&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;perform_ddl_operation&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ALTER TABLE TEST ADD COLUMN D INT DEFAULT 0, ALGORITHM=INPLACE, LOCK=NONE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Create threads for DML operations&lt;/span&gt;
&lt;span class="n"&gt;dml_threads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# Number of concurrent DML threads&lt;/span&gt;
    &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;perform_dml_operations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;dml_threads&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Perform the DDL operation&lt;/span&gt;
&lt;span class="n"&gt;perform_ddl_operation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Wait for DML threads to complete (optional)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dml_threads&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;테스트 데이터 개수&lt;/p&gt;
&lt;p&gt;&lt;img alt="Untitled" src="../images/mysql_8_migration/Untitled%201.png"&gt;&lt;/p&gt;
&lt;p&gt;DDL 실행 시 소요시간&lt;/p&gt;
&lt;p&gt;&lt;img alt="Untitled" src="../images/mysql_8_migration/Untitled%202.png"&gt;&lt;/p&gt;
&lt;p&gt;DDL 실행 시 DML 스크립트 로그:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Untitled" src="../images/mysql_8_migration/Untitled%203.png"&gt;&lt;/p&gt;
&lt;h2&gt;한계 및 대안&lt;/h2&gt;
&lt;p&gt;https://medium.com/daangn/mysql-online-ddl-faf47439084c 블로그에서 언급한 것 과 같이 간단한 DDL은 online DDL로 가능하지만, foreign key, index, primary key 등 변경이 큰 DDL같은 경우 불가능 한 경우가 있습니다. 이런 경우 &lt;code&gt;pt-online-schema-change&lt;/code&gt;란 percona사의 마이그레이션 툴을 사용방법이 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pt-online-schema-change&lt;/code&gt;는 MySQL 테이블에 비차단 방식으로 스키마 변경을 적용하는 Percona Toolkit의 도구입니다. 이 도구는 원하는 변경 사항이 포함된 새 테이블을 생성하고, 데이터를 원본 테이블에서 새 테이블로 청크 단위로 복사한 후 테이블을 교체합니다. 동적 청크 크기 조정을 지원하여 서버 성능에 미치는 영향을 최소화하고, 동시 접근 및 부하를 관리하는 옵션을 포함합니다. 이를 통해 다운타임을 줄이고 스키마 수정 동안 데이터 무결성을 유지합니다.&lt;/p&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://dev.mysql.com/doc/refman/8.0/en/innodb-online-ddl-operations.html&lt;/li&gt;
&lt;li&gt;https://dev.mysql.com/doc/refman/8.0/en/innodb-online-ddl.html&lt;/li&gt;
&lt;li&gt;https://medium.com/daangn/mysql-online-ddl-faf47439084c&lt;/li&gt;
&lt;li&gt;https://medium.com/practo-engineering/mysql-zero-downtime-schema-update-without-algorithm-inplace-fd427ec5b681&lt;/li&gt;
&lt;li&gt;https://blog.bespinglobal.com/post/mysql-online-ddl-별-적용-가능한-알고리즘-8-0-이상/&lt;/li&gt;
&lt;/ul&gt;</content><category term="database"></category><category term="backend"></category><category term="database"></category><category term="django"></category><category term="migration"></category></entry><entry><title>django cProfile 프로파일 방법</title><link href="https://blog.i544c.com/django-cprofile-peuropail-bangbeob.html" rel="alternate"></link><published>2024-04-19T11:20:00+09:00</published><updated>2024-04-22T16:12:00+09:00</updated><author><name>박이삭</name></author><id>tag:blog.i544c.com,2024-04-19:/django-cprofile-peuropail-bangbeob.html</id><summary type="html">&lt;p&gt;django cProfile&lt;/p&gt;</summary><content type="html">&lt;h2&gt;전언&lt;/h2&gt;
&lt;p&gt;개발/운영하는 서비스가 느려질 때 혹인 기능변경이 있을 경우 서비스 동작의 상세 내용을 분석 할 때가 있습니다. 느려진 이유를 찾아 개선하거나 기능변경(추가)로 인해 어떤 영향을 끼치는지 분석을 할 수도 있습니다. python은 여러 프로파일링 툴이 있지만 저는 cProfile을 활용 하는 방법에 대해 공유드리고자 합니다.&lt;/p&gt;
&lt;h2&gt;cProfile&lt;/h2&gt;
&lt;p&gt;cProfile은 C extension으로 개발되어 low-overhead 특징있는 프로파일링 라이브러리 &amp;amp; 툴 입니다. &lt;/p&gt;
&lt;p&gt;추가 특징으로는 python level function에는 overhead가 있지만 C level function은 overhead가 없다는 점 입니다. 이 로 인해 결과가 python level 코드가 좀 더 느리게 나올 수 있습니다.&lt;/p&gt;
&lt;p&gt;call stack에 대한 function단위로 프로파일링 정보를 제공합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mi"&gt;214&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;calls&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;207&lt;/span&gt; &lt;span class="n"&gt;primitive&lt;/span&gt; &lt;span class="n"&gt;calls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;0.002&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;

&lt;span class="n"&gt;Ordered&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cumulative&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;

&lt;span class="n"&gt;ncalls&lt;/span&gt;  &lt;span class="n"&gt;tottime&lt;/span&gt;  &lt;span class="n"&gt;percall&lt;/span&gt;  &lt;span class="n"&gt;cumtime&lt;/span&gt;  &lt;span class="n"&gt;percall&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;lineno&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.002&lt;/span&gt;    &lt;span class="mf"&gt;0.002&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="n"&gt;builtins&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.001&lt;/span&gt;    &lt;span class="mf"&gt;0.001&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.001&lt;/span&gt;    &lt;span class="mf"&gt;0.001&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.001&lt;/span&gt;    &lt;span class="mf"&gt;0.001&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;289&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_compile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt; &lt;span class="n"&gt;_compiler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;759&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt; &lt;span class="n"&gt;_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;937&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt; &lt;span class="n"&gt;_compiler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;598&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;0.000&lt;/span&gt; &lt;span class="n"&gt;_parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;435&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_parse_sub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;ncalls: number of calls. 호출 개수&lt;/li&gt;
&lt;li&gt;tottime: total time. 함수에서만 소요된 총시간. subfunction 소요시간 제외한 순수 함수 내에서만 시간.&lt;/li&gt;
&lt;li&gt;percall: tottime / ncalls. 호출당 소요시간&lt;/li&gt;
&lt;li&gt;cumtime: cummulative time. subfunction 포함 전체 소요시간.&lt;/li&gt;
&lt;li&gt;percall: cumtime / ncalls&lt;/li&gt;
&lt;li&gt;filename:lineno(function): 함수 파일명, 라인수, 함수명&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;CLI 사용법&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;cProfile&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;sort_order&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;myscript&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-o&lt;/code&gt; : stdout이 아닌 덤프파일로 저장됩니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-s&lt;/code&gt; : -o 사용 안할 시 적용가능, stdout출력 시 정렬방식입니다. Ref: &lt;a href="https://docs.python.org/3/library/profile.html#pstats.Stats.sort_stats"&gt;sort_stats()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-m&lt;/code&gt; : 스크립트 말고 모듈을 실행 원할 때 사용.
ex) &lt;code&gt;python -m cProfile -m pip install django&lt;/code&gt; : pip install 프로파일&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;예시:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;cProfile&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prof&lt;/span&gt; &lt;span class="n"&gt;manage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;runserver&lt;/span&gt; &lt;span class="mf"&gt;0.0.0.0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;cProfile&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prof&lt;/span&gt; &lt;span class="n"&gt;test_script&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;args1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;args2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;script over django&lt;/h2&gt;
&lt;p&gt;서버로 테스트가 가능하지만, 반복이 가능하고 시작과 종료가 동일한 재현 가능한 스크립트로 분석이 필요 할 경우가 있습니다.&lt;/p&gt;
&lt;p&gt;django의 기능(ORM, etc.)을 활용하는 파이썬 스크립트를 프로파일링 하는 방법입니다.&lt;/p&gt;
&lt;p&gt;django-extension의 RunScript 기능을 활용할 것입니다.&lt;/p&gt;
&lt;p&gt;django extension RunScript는 django를 사용하는 python script를 간편하게 개발 실행을 도와주는 툴입니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;memo_care_backend&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;manage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
    &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;profile_script&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;위 처럼 기본 디렉토리는 &lt;code&gt;&amp;lt;root_project&amp;gt;/scripts&lt;/code&gt; 입니다. 이 위치에 파이썬 코드를 위치 시 아래처럼 실행이 가능합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# memo_care_backend/scripts/test_script.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;django.conf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# django extension이 run함수를 entry point로 잡습니다.&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[*] DATABASES settings: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, args1: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;cProfile&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;out.prof&lt;span class="w"&gt; &lt;/span&gt;manage.py&lt;span class="w"&gt; &lt;/span&gt;runscript&lt;span class="w"&gt; &lt;/span&gt;test_script&lt;span class="w"&gt; &lt;/span&gt;--script-args&lt;span class="w"&gt; &lt;/span&gt;foo

&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Current&lt;span class="w"&gt; &lt;/span&gt;Secret&lt;span class="w"&gt; &lt;/span&gt;ID:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;******-secret-env&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Current&lt;span class="w"&gt; &lt;/span&gt;ENV&lt;span class="w"&gt; &lt;/span&gt;file:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;.env.isaacpark&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;AWS&lt;span class="w"&gt; &lt;/span&gt;ENV:&lt;span class="w"&gt; &lt;/span&gt;dev&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;IAM:&lt;span class="w"&gt; &lt;/span&gt;isaac@*****.com

&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;DATABASES&lt;span class="w"&gt; &lt;/span&gt;settings:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*********&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*******&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3307&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;django.db.backends.mysql&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CHARSET&amp;#39;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8mb4&amp;#39;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;OPTIONS&amp;#39;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;read_default_file&amp;#39;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/Users/isaacpark/git/backend/******/my.cnf&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ATOMIC_REQUESTS&amp;#39;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;False,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AUTOCOMMIT&amp;#39;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;True,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CONN_MAX_AGE&amp;#39;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TIME_ZONE&amp;#39;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;None,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TEST&amp;#39;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CHARSET&amp;#39;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;None,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;COLLATION&amp;#39;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;None,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MIGRATE&amp;#39;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;True,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MIRROR&amp;#39;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;None,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;None&lt;span class="o"&gt;}}}&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;args1:&lt;span class="w"&gt; &lt;/span&gt;foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;다른 위치에 파일을 스크립트로 사용 시 &lt;code&gt;—-chdir&lt;/code&gt; 를 사용합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;cProfile&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;out.prof&lt;span class="w"&gt; &lt;/span&gt;manage.py&lt;span class="w"&gt; &lt;/span&gt;runscript&lt;span class="w"&gt; &lt;/span&gt;--chdir&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;other_dir&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;script_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;덤프파일 분석 툴&lt;/h2&gt;
&lt;p&gt;cProfile 덤프파일을 분석목적 사각화 툴은 많이 있습니다. 저는 제가 사용해보고 결정하게 된 &lt;code&gt;snakeviz&lt;/code&gt;를 소개드리려고 합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Official site&lt;/strong&gt;: &lt;a href="https://jiffyclub.github.io/snakeviz/"&gt;https://jiffyclub.github.io/snakeviz/&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;snakeviz&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;snakeviz&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prof&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;실행 시 자동 브라우저로 redirection이 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Untitled" src="../images/django_cProfile/Untitled.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Snakeviz 화면&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;가장 아래 function 검색할 수 있습니다.&lt;/p&gt;
&lt;p&gt;왼쪽에는 stack depth나 UI stype, gutoff 기능이 있습니다.&lt;/p&gt;
&lt;p&gt;depth는 UI로 stack depth를 표시할 수치입니다.&lt;/p&gt;
&lt;p&gt;cutoff는 parent function의 cumtime을 적게 사용 시 UI서 보이지 않게 하는 기능입니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Untitled" src="../images/django_cProfile/Untitled%201.png"&gt;&lt;/p&gt;</content><category term="backend"></category><category term="django"></category><category term="profiling"></category><category term="python"></category></entry><entry><title>Feature toggle(or flag)</title><link href="https://blog.i544c.com/feature-toggleor-flag.html" rel="alternate"></link><published>2024-03-22T11:38:00+09:00</published><updated>2024-03-22T11:38:00+09:00</updated><author><name>박이삭</name></author><id>tag:blog.i544c.com,2024-03-22:/feature-toggleor-flag.html</id><summary type="html">&lt;p&gt;feature flag&lt;/p&gt;</summary><content type="html">&lt;hr&gt;
&lt;h2&gt;⛰️ 배경&lt;/h2&gt;
&lt;p&gt;여러 명이 대규모 git 저장소에서 동시에 개발을 진행하며 겪게 되는 여러 가지 이슈들에 대해 알아보겠습니다. 더 나아가 이런 이슈들에 대해 소개해 드리려고 합니다.
여기서는 dev / release / main branch를 각각 Dev / QA / Prod환경에 매칭하여 배포 및 운영을 하는 조직에게 소개드리는 가정을 하고있습니다.&lt;/p&gt;
&lt;h2&gt;⚠️ 이슈&lt;/h2&gt;
&lt;p&gt;많은 개발조직에서 여러 feature branch를 관리하며 QA 환경에 배포하는 과정에서 종종 예상치 못한 어려움을 마주하게 됩니다. QA 환경에서 외부 요인으로 인해 특정 기능의 배포 일정이 지연될 경우, 다른 스쿼드에서 배포를 진행해야 하는 상황이 발생할 수 있습니다. 이때 이미 release branch에 머지된 코드를 되돌리거나, 배포에 영향을 주지 않기 위해 임시로 코드를 주석 처리 후 커밋하는 등의 작업이 필요할 수 있습니다. 이러한 과정은 추가적인 시간과 노력을 요구하며 배포 프로세스를 복잡하게 만듭니다.&lt;/p&gt;
&lt;p&gt;또 다른 문제로는 각 스쿼드의 개발 주기와 기간이 다르기 때문에, 개발이 완전히 완료되지 않은 코드를 최신 branch에 바로 머지할 수 없는 상황이 생길 수 있습니다. 이렇게 되면 최신 branch와의 동기화가 지연되어, 최종적으로 머지할 때 코드 충돌이나 데이터베이스 마이그레이션 충돌과 같은 복잡한 문제가 발생할 가능성이 높아집니다.&lt;/p&gt;
&lt;p&gt;이러한 문제를 해결하기 위해 Feature Toggle을 활용하면 효과적입니다. Feature Toggle은 개발 중인 기능을 작은 단위로 나누어 관리할 수 있도록 도와주는 기술입니다. 이를 통해 아래와 같은 이점을 얻을 수 있습니다.&lt;/p&gt;
&lt;p&gt;짧은 단위의 PR 작성
기능을 작은 단위로 분리하면, PR을 작성하기 전에 필요한 단위 테스트 코드를 명확히 정의할 수 있습니다. 또한 리뷰해야 할 코드 범위가 줄어들어 리뷰어의 부담도 줄어듭니다.&lt;/p&gt;
&lt;p&gt;코드 동기화 주기 단축
최신 branch와의 동기화를 더 자주 할 수 있어 코드 충돌이나 마이그레이션 충돌을 줄이는 데 도움이 됩니다.&lt;/p&gt;
&lt;p&gt;배포 프로세스 간소화
QA 환경에서 특정 기능 배포가 지연되더라도 다른 스쿼드의 배포에 영향을 주지 않도록 관리할 수 있습니다.&lt;/p&gt;
&lt;p&gt;Feature Toggle은 특히 여러 팀이 병렬로 개발을 진행하거나 복잡한 배포 프로세스를 효율적으로 관리해야 하는 환경에서 필수적인 도구로 자리 잡고 있습니다. 이를 적극적으로 활용하면 개발 효율성을 높이고 배포 과정에서의 스트레스를 크게 줄일 수 있을 것입니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Untitled" src="../images/feature_flags/Untitled.png"&gt;&lt;/p&gt;
&lt;h2&gt;🚦 Feature toggle&lt;/h2&gt;
&lt;h3&gt;1. 기능설명&lt;/h3&gt;
&lt;p&gt;feature toggle을 통해 이러한 문제를 해결할 수 있습니다.&lt;/p&gt;
&lt;p&gt;feature toggle이란 신규 개발 되는 기능과 이전 기능을 toggle(혹은 flag)로 선택할 수 있게 하는 기술입니다. toggle은 여러 방식으로 구현이 가능합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;저장소&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;환경변수&lt;/li&gt;
&lt;li&gt;DB&lt;/li&gt;
&lt;li&gt;cache&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;저장소들은 각자의 장단점이 있습니다. DB나 cache저장소 사용 시 라이브로 기능을 on, off 할 수 있습니다. 다만 추가 network를 타야하는(DB경우 별도 overhead) overhead가 있습니다. 환경변수 사용 시 서버 실행 시 초기 설정으로 overhead가 (branch miss overhead 외)  거의없는 장점이 있지만, toggle on, off 시 서버 재배포가 필요합니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Untitled" src="../images/feature_flags/Untitled%201.png"&gt;&lt;/p&gt;
&lt;p&gt;feature toggle은 이런 이슈해결 뿐만이 아니라 여러 추가 기능이 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;유연한 배포 일정: 기능 릴리즈 일정까지 기다리지 않고 미리 배포 및 테스트 가능&lt;/li&gt;
&lt;li&gt;git 통합 cycle 축소: 큰 기능을 작은 규모의 기능으로 쪼개어 개발 및 통합&lt;/li&gt;
&lt;li&gt;서비스 dependency 제한X: 연동되는 파트(web, mobile, win32, etc.)나 서비스의 호환이 될때 까지 신규 기능 배포 대기 불필요&lt;/li&gt;
&lt;li&gt;사용자 별 기능 배포(permission toggle): 특정 사용자에게만 선별하여 기능을 배포하고 테스트 후 전체 적용하는 기능이 있습니다. toggle router 등 기능 필요&lt;/li&gt;
&lt;li&gt;canary 배포(canary toggle): 기능 동작을 비율적으로 배포하여(예. 20% : 80%) Prod에서 서비스 동작을 점진적으로 테스트 할 수 있습니다. DB 저장소 및 복잡한 router 필요&lt;/li&gt;
&lt;li&gt;A/B 테스트: 같은 기능이지만 다른 알고리즘을 구현 한 경우 특정 조건을 기준으로 다른 두(혹은 둘 이상) 알고리즘을 같이 서비스 할 수 있습니다. 사용자 별 혹은 랜덤으로 두 알고리즘을 돌려 서로 A/B 테스트를 진행 할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. toggle category&lt;/h3&gt;
&lt;p&gt;toggle아래 이미지 처럼 여러 종류로 분류하고, life cycle을 관리 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="참고: https://martinfowler.com/articles/feature-toggles.html" src="../images/feature_flags/Untitled%202.png"&gt;&lt;/p&gt;
&lt;p&gt;참고: &lt;a href="https://martinfowler.com/articles/feature-toggles.html"&gt;https://martinfowler.com/articles/feature-toggles.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Release toggles:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;기능배포와 코드배포를 분리 할 수 있는 릴리즈 관련 toggle&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Experiment toggle:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;실서비스에서 시험(A/B 테스트, 신기능 등)을 하고 싶을 때 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ops toggle:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;개발자 권한으로 무엇인가를 하고 싶거나 운영 측면 제어를 위해 사용됩니다. 예로 B2C서비스에서 부하가 많은 추천알고리즘이 서비스 트레픽이 갑자기 spike할 시 disable할 수 있는 “Kill Switches” 가 있습니다. 즉 수동 circuit breaker라고 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Permission toggle:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;특별 사용자에게만 제공하고 싶은 기능, 예로 베타 서비스 테스트 중 사용, toggle입니다. canary toggle도 여기에 속합니다. 임시적으로 사용되고, 동적으로 변경할 수 있어야 하는 기능으로 지속적인 permission관리 시스템과는 별도로 사용됩니다.&lt;/p&gt;
&lt;h3&gt;3. django-waffle&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://waffle.readthedocs.io/en/stable/"&gt;https://waffle.readthedocs.io/en/stable/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;feature toggle구현은 여러 방법이 있습니다. 본 문서에서는 그 중 DB를 사용하는 django library를 소개해 드리려고 합니다. &lt;/p&gt;
&lt;p&gt;&lt;img alt="https://djangopackages.org/grids/g/feature-flip/" src="../images/feature_flags/Untitled%203.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://djangopackages.org/grids/g/feature-flip/"&gt;https://djangopackages.org/grids/g/feature-flip/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;기본적으로 cache를 사용하여 DB부하를 줄이고 있습니다. cache ttl은 django default cache ttl로 확인됐습니다. cache flush는 flag / switch 객체 save시 cache &lt;code&gt;delete_many&lt;/code&gt;로 관리 중인 cache를 전부 삭제 하는 방식을 사용 중입니다.&lt;/p&gt;
&lt;p&gt;기본 설정 값:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;WAFFLE_SWITCH_DEFAULT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;   &lt;span class="c1"&gt;# automatically created switch value&lt;/span&gt;
&lt;span class="n"&gt;WAFFLE_FLAG_DEFAULT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;     &lt;span class="c1"&gt;# automatically created flag value&lt;/span&gt;
&lt;span class="n"&gt;WAFFLE_CREATE_MISSING_SWITCHES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt; &lt;span class="c1"&gt;# automatically create switch if does not exist&lt;/span&gt;
&lt;span class="n"&gt;WAFFLE_CREATE_MISSING_FLAGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt; &lt;span class="c1"&gt;# automatically create flag if does not exist&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;사용 예시:&lt;/p&gt;
&lt;p&gt;switch는 str을 구분값으로 bool를 저장하는 자료구조입니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;waffle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;switch_is_active&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;example_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;switch_is_active&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;example_function_switch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# active: new code&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# inactive: old code&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;flag는 user, group, authentication, superuser 등 정보로 기준값에 맞는 bool를 저장하는 자료구조입니다. django request 객체로 요청 정보를 추출하여 condition 검증을 합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;waffle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;flag_is_active&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;example_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;flag_is_active&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;example_function_flag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# active: new code&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# inactive: old code&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;decorator만 사용하여 class method을 분기할 수 있습니다(구현필요, ref: &lt;a href="https://medium.com/daangn/%EB%A7%A4%EC%9D%BC-%EB%B0%B0%ED%8F%AC%ED%95%98%EB%8A%94-%ED%8C%80%EC%9D%B4-%EB%90%98%EB%8A%94-%EC%97%AC%EC%A0%95-2-feature-toggle-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0-b52c4a1810cd"&gt;당근기술블로그&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;ExampleSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Serializer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="c1"&gt;# some logic&lt;/span&gt;
                &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;existing_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;key1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;key2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="c1"&gt;# some logic&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;

    &lt;span class="nd"&gt;@feature_toggle_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ExampleView_NEW_COOL_FEATURE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fallback_method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ExampleSerializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new_func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;existing_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg_2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c1"&gt;# this will fallback to new_func if toggle is set&lt;/span&gt;
        &lt;span class="c1"&gt;# old logic&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;new_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg_2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# new logic&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;class decorator로 분기 할 수 도 있습니다(구현필요)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Example usage&lt;/span&gt;
&lt;span class="nd"&gt;@feature_toggle_cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ExampleFeatureToggle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fallback_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;NewSerializer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;OldSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Serializer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OldSerializer instance created&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;NewSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Serializer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;NewSerializer instance created&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Depending on the toggle state, creating an instance of OldSerializer&lt;/span&gt;
&lt;span class="c1"&gt;# will actually create an instance of either OldSerializer or NewSerializer.&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;ViewClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;APIView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;serializer_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OldSerializer&lt;/span&gt;
    &lt;span class="o"&gt;....&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;function decorator로 function 분기(구현필요)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@feature_toggle_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ExampleFeatureToggle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fallback_function&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;new_func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;old_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg_2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# old logic&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;new_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg_2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# new logic&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;django-waffle은 django orm migration, admin을 지원하여, django migration으로 디비의 switch, flag값을 관리 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;코드 배포 전 미리 배포대상 admin에서 객체(flag, switch)를 생성하거나, &lt;code&gt;AFFLE_CREATE_MISSING_SWITCHES&lt;/code&gt; ,  &lt;code&gt;WAFFLE_CREATE_MISSING_FLAGS&lt;/code&gt;설정으로 조회 시 자동 생성 되는 기능이 있습니다. 생성 된 flag, switch는 admin에서 관리 가능합니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Untitled" src="../images/feature_flags/Untitled%204.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Untitled" src="../images/feature_flags/Untitled%205.png"&gt;&lt;/p&gt;
&lt;p&gt;unittest 예시&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;waffle.testutils&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;override_flag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;override_sample&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;override_flag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;flag_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Only &amp;#39;flag_name&amp;#39; is affected, other flags behave normally.&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;waffle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flag_is_active&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;flag_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="nd"&gt;@override_sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sample_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_with_sample&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# Only &amp;#39;sample_name&amp;#39; is affected, and will always be True. Other&lt;/span&gt;
    &lt;span class="c1"&gt;# samples behave normally.&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;waffle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample_is_active&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sample_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;4. 예외&lt;/h3&gt;
&lt;p&gt;toggle 적용이 어려운 경우가 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;toggle간에 의존성이 있는 경우&lt;/li&gt;
&lt;li&gt;nested toggles:&lt;ul&gt;
&lt;li&gt;toggle이 적용된 한 기능 내부에 toggle이 있는경우&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이런 경우는 아래의 방법으로 해결할 수 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;dependency graph를 문서화, toggled feature rollout 방법 정리&lt;/li&gt;
&lt;li&gt;서로 호환 가능하도록 예외처리 코드 추가&lt;/li&gt;
&lt;li&gt;리팩토링, feature toggle 통합&lt;/li&gt;
&lt;li&gt;function decorator 혹은 class decorator활용 toggle 분기를 모듈화 하여 nested나 dependency를 줄인다&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;해결이 불가능 한 경우도 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;시스템 구조 변경:&lt;ul&gt;
&lt;li&gt;구조가 변경되거나 toggle로 버전을 변경 못 하는 경우, 연동 시스템의 의존성 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;binary 파일, json document 파일 포멧이 변경 경우&lt;/li&gt;
&lt;li&gt;디비 이전(예 Mysql → Postgres)&lt;/li&gt;
&lt;li&gt;코드 구조 리팩토링 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이럴 경우에는 major 버전 업데이트로 간주하고, 기존 배포방법을 사용합니다.&lt;/p&gt;
&lt;h3&gt;5. clean-up&lt;/h3&gt;
&lt;p&gt;toggle을 유지하며 코드 크기가 계속 커지는 이슈와 DB접근 overhead가 발생합니다. 테스트 CI도 무시할 수 없습니다. 릴리즈 후 검증되고 사용하지 않는 toggle은 빠른 시내에 정리가 필요합니다.&lt;/p&gt;
&lt;p&gt;Toggle의 생성 시기와 기한을 명시하여 관리 기간을 추적하고, 만료된 toggle은 팀에 알림을 통해 주의를 환기시킵니다.&lt;/p&gt;
&lt;p&gt;기한이 만기 된 toggle은 CI실패를 유발하여 관리를 강제하는 방법도 있습니다.&lt;/p&gt;
&lt;h3&gt;6. 테스트&lt;/h3&gt;
&lt;p&gt;모든 추가된 toggle 기능에 대해서는 단위 테스트나 수동 테스트가 필수적입니다. toggle 키기 전 문제 없던 서버가 (특히 dynamic typed language경우) 실행 후 syntax에러 같은 문제로 시스템이 다운 될 수 도 있기 때문입니다.&lt;/p&gt;
&lt;h2&gt;🔚 Endpoint versioning&lt;/h2&gt;
&lt;p&gt;feature toggle로 기능의 버전을 조정하는 방법이 있지만 REAT API의 구조를 활용하는 방법도 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/api/v3/ecg-tests/{tid}&lt;/code&gt;의 새로운 endpoint를 추가함으로써 버전 관리를 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;아래 처럼 minor버전, hotfix 버전을 포함하여, 최근 추가/수정 된 기능을 분리할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/api/v3.0.0/ecg-tests/{tid}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/api/v3.1.0/ecg-tests/{tid}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;아니면 버전명을 날짜로도 관리 하는 방법 도 있습니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/api/20240322/ecg-tests/{tid}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 방법은 별도의 view나 serializer를 분리 할 때 유용합니다.&lt;/p&gt;
&lt;h2&gt;↩️ 하위호환 schema&lt;/h2&gt;
&lt;p&gt;디비 schema는 라이브 서버에서 전 후 버전을 이전 할 수 없습니다. 이 경우 하위호환가능한 schema로 설계하여 feature toggle 시 전 버전에서도 동일하게 동작하도록 되어야 합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;필드 삭제 지양:
필드를 사용하는 기능(toggle)이 있을 경우 삭제하지 않는다.
사용하지 않는다면 toggle clena-up을 할 때 같이 삭제한다.&lt;/li&gt;
&lt;li&gt;필드 기본값:
설계 시 &lt;code&gt;null=True, default=None&lt;/code&gt;등 기본값이 항상 있도록 합니다.
필드 수정(아래 내용) 시 평소 필수로 입력 되 던 필드가 입력이 안될 경우가 있습니다.&lt;/li&gt;
&lt;li&gt;필드 수정 지양:
필드의 constraint나 type을 변경을 지양합니다. 수정이 필요 시 신규 필드를 만들고 신규 버전 serializer에서 호환을 고려하여 getter, setter를 추가해야 합니다. 필요 시 수동 migration으로 동기화 합니다.
예를 들면 type을 수정 할 시(예. str → enum) 이전버전 로직에서는 기존그대로 저장하고, 신규버전에서는 저장 시 신규필드로 저장, 읽을 시 에는 신규필드에 값이 있는지 확인 후 없을 경우 이전 필드 데이터 사용 및 신규로 이전 하는 로직추가가 필요합니다. 신규 배포 기능 동작 검증 된 후 기존필드를 신규로 이전하는 migration script를 실행 해 모든 데이터가 동기화 되 도록 합니다. 이전 toggle 삭제 시 기존 필드 삭제 및 연관 코드 삭제를 할 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;👁️‍🗨️ PR 리뷰 간소화&lt;/h2&gt;
&lt;p&gt;현재 release에 PR로 리뷰를 하는 방식에서 develop으로 PR리뷰를 하고, develop → release, release → main PR은 리뷰를 거치지 않는 방법입니다.&lt;/p&gt;
&lt;p&gt;GitHub Flow를 채택하여 release와 main으로의 머지 과정에서 PR 및 리뷰를 줄임으로써 개발자의 관리 부담을 줄일 수 있습니다.&lt;/p&gt;
&lt;p&gt;예외로, hotfix같은 바로 release나 main으로 기능 PR을 하는 경우는 리뷰를 거치도록 할 수 있습니다.&lt;/p&gt;
&lt;h2&gt;💰 유지관리 비용&lt;/h2&gt;
&lt;p&gt;feature toggle은 특히 처음 도입될 때 빠르게 늘어나는 경향이 있습니다. 가장 간단하게 구현하면 큰 초기비용이 들지는 않지만, 유지할 시 발생하는 overhead가 있습니다. 코드에 새로운 추상화나 조건부 로직을 추가해야 합니다. 그리고 테스트 부담도 초래합니다.. &lt;a href="https://dougseven.com/2014/04/17/knightmare-a-devops-cautionary-tale/"&gt;Knight Capital Group의 4억 6,000만 달러 실수&lt;/a&gt;는 feature toggle을 올바르게 관리하지 않을 때 어떻게 잘못될 수 있는지에 대한 경고를 보여주고 있습니다.
(ref: &lt;a href="https://sungjk.github.io/2022/10/15/feature-toggles.html"&gt;https://sungjk.github.io/2022/10/15/feature-toggles.html&lt;/a&gt;)&lt;/p&gt;
&lt;h2&gt;👍 장점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;릴리즈 날짜나 FE 배포를 기다리지 않고 Dev, QA, Prod 환경에 자유롭게 배포가 가능합니다. 즉 배포와 릴리즈 분리&lt;/li&gt;
&lt;li&gt;배포 순서 때문에 발생하는 branch관리이슈로 부터 자유로워 집니다.&lt;/li&gt;
&lt;li&gt;git 통합 cycle 축소&lt;/li&gt;
&lt;li&gt;장애나 버그 발견 시 재배포 없이 바로 이전 버전으로 rollback이 가능합니다.&lt;/li&gt;
&lt;li&gt;특정 사용자나 사용케이스에 따라 Prod에서 테스트가 가능합니다.&lt;/li&gt;
&lt;li&gt;재배포 없이 기능 canary 배포가 가능합니다.&lt;/li&gt;
&lt;li&gt;A/B 테스트가 가능합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;👎 단점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;신규 기능마다 버전 분기 코드 추가가 필요합니다. 개발 비용이 늘어 날 수 있습니다.&lt;/li&gt;
&lt;li&gt;디비 schema 하위호환 위한 비용이 발생합니다.&lt;/li&gt;
&lt;li&gt;주기적으로 사용하지 않는 toggle들 정리가 필요합니다.&lt;/li&gt;
&lt;li&gt;DB저장소 사용 시, cache를 할 수 있지만, toggle 분기 확인의 부하가 있습니다.&lt;/li&gt;
&lt;li&gt;구조 적 변경이나 major 업데이트에는 적용이 불가능합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;🔖 Case Study&lt;/h2&gt;
&lt;h3&gt;11번가&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://11st-tech.github.io/2023/11/07/openfeature/"&gt;https://11st-tech.github.io/2023/11/07/openfeature/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;당근&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/daangn/%EB%A7%A4%EC%9D%BC-%EB%B0%B0%ED%8F%AC%ED%95%98%EB%8A%94-%ED%8C%80%EC%9D%B4-%EB%90%98%EB%8A%94-%EC%97%AC%EC%A0%95-2-feature-toggle-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0-b52c4a1810cd"&gt;https://medium.com/daangn/매일-배포하는-팀이-되는-여정-2-feature-toggle-활용하기-b52c4a1810cd&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;배달의민족&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://techblog.woowahan.com/9935/"&gt;https://techblog.woowahan.com/9935/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;구글&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://medium.com/firebase-developers/remote-config-feature-flagging-a-full-walkthrough-9b2f2188bb47"&gt;https://medium.com/firebase-developers/remote-config-feature-flagging-a-full-walkthrough-9b2f2188bb47&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;맘시터&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tech.mfort.co.kr/blog/2022-11-24-feature-toggle/"&gt;https://tech.mfort.co.kr/blog/2022-11-24-feature-toggle/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;그린랩스&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://green-labs.github.io/feature-flags-1"&gt;https://green-labs.github.io/feature-flags-1&lt;/a&gt;&lt;/p&gt;</content><category term="backend"></category><category term="backend"></category><category term="deploy"></category><category term="git"></category><category term="operation"></category></entry><entry><title>AWS CLI profile 관리</title><link href="https://blog.i544c.com/aws-cli-profile-gwanri.html" rel="alternate"></link><published>2024-01-15T16:36:00+09:00</published><updated>2024-01-18T09:12:00+09:00</updated><author><name>Isaac Park</name></author><id>tag:blog.i544c.com,2024-01-15:/aws-cli-profile-gwanri.html</id><summary type="html">&lt;p&gt;AWS CLI profile&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;local aws cli에서 여러 계정을 switch해야 되는 경우가 있습니다. 예로 dev, stage, prod환경을 대상으로 aws cli를 사용해야 되는 경우가 있습니다.&lt;/p&gt;
&lt;p&gt;이런 상황에서 env파일로만 아니라, shell에서 바로 계정을 switch하는 방법을 기록하려고 합니다.&lt;/p&gt;
&lt;h2&gt;AWS 설정파일&lt;/h2&gt;
&lt;p&gt;여기서 소개할 파일 외 여러 설정파일이 있지만, 가장 기본적인 설정파일에 대한 설명을 하려고 합니다.&lt;/p&gt;
&lt;p&gt;두 파일 다 &lt;code&gt;aws configure&lt;/code&gt; 명령어로 자동 생성되는 파일입니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~/.aws/config&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;default&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;region&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ap-northeast-2

&lt;span class="o"&gt;[&lt;/span&gt;profile&lt;span class="w"&gt; &lt;/span&gt;jessie&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;region&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ap-northeast-2

&lt;span class="o"&gt;[&lt;/span&gt;profile&lt;span class="w"&gt; &lt;/span&gt;isaac&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;region&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ap-northeast-2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;region, format 등 설정파일을 저장하는 장소입니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[profile {profile_name}]&lt;/code&gt; 포멧으로 프로파일을 구분할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~/.aws/credentials&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;default&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;aws_access_key_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;AK....EW
&lt;span class="nv"&gt;aws_secret_access_key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;XM....HY

&lt;span class="o"&gt;[&lt;/span&gt;jessie&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;aws_access_key_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;AK....EW
&lt;span class="nv"&gt;aws_secret_access_key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;XM....HY

&lt;span class="o"&gt;[&lt;/span&gt;isaac&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;aws_access_key_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;AK....HF
&lt;span class="nv"&gt;aws_secret_access_key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Zs....uS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;access key, access secret key 등 credential정보 저장소 입니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[{profile_name}]&lt;/code&gt; 포멧으로 프로파일을 구분하고 있습니다.&lt;/p&gt;
&lt;h2&gt;AWS 환경변수&lt;/h2&gt;
&lt;p&gt;aws cli가 사용되는 환경변수 중 profile switching에 연관 된 내용만 설명합니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt;, &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AWS_PROFILE&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;위에서 아래로 우선순위를 가집니다. 즉 명령어 option으로 override하지 않는 이상 위에 환경변수가 우선순위를 가지고 실행됩니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AWS_PROFILE&lt;/code&gt;은 config, credentials 파일의 프로파일명을 사용하는 환경변수입니다.&lt;/p&gt;
&lt;h2&gt;Profile switching&lt;/h2&gt;
&lt;h3&gt;환경변수&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;AWS_PROFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jessie
aws&lt;span class="w"&gt; &lt;/span&gt;sts&lt;span class="w"&gt; &lt;/span&gt;get-caller-identity
&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UserId&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;AIDAVGIMKKMMBD5INZV4W&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Account&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;357044998936&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Arn&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;arn:aws:iam::357044998936:user/jesse@huinno.com&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;주의 해야 할 부분은 &lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt;, &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt; 환경변수가 설정 되어있을 경우에는 override되어 AWS_PROFILE을 무시하고 &lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt;, &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt;기준으로 aws api호출하게 됩니다.&lt;/p&gt;
&lt;h3&gt;Option&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;AWS_PROFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;default&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;# 이 부분 무시 됨&lt;/span&gt;
aws&lt;span class="w"&gt; &lt;/span&gt;sts&lt;span class="w"&gt; &lt;/span&gt;get-caller-identity&lt;span class="w"&gt; &lt;/span&gt;--profile&lt;span class="w"&gt; &lt;/span&gt;isaac&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;# override&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UserId&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;AIDAVGIMKKMMDYH5AHYDB&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Account&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;357044998936&amp;quot;&lt;/span&gt;,
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Arn&amp;quot;&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;arn:aws:iam::357044998936:user/isaac.park@huinno.com&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;—-profile&lt;/code&gt; 옵션으로 환경변수 설정을 override할 수 있습니다.&lt;/p&gt;
&lt;h2&gt;Profile 추가&lt;/h2&gt;
&lt;h3&gt;AWS CLI사용&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aws&lt;span class="w"&gt; &lt;/span&gt;configure&lt;span class="w"&gt; &lt;/span&gt;--profile&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;new_profile_name&lt;span class="o"&gt;}&lt;/span&gt;
AWS&lt;span class="w"&gt; &lt;/span&gt;Access&lt;span class="w"&gt; &lt;/span&gt;Key&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;None&lt;span class="o"&gt;]&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;....
AWS&lt;span class="w"&gt; &lt;/span&gt;Secret&lt;span class="w"&gt; &lt;/span&gt;Access&lt;span class="w"&gt; &lt;/span&gt;Key&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;None&lt;span class="o"&gt;]&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;....
Default&lt;span class="w"&gt; &lt;/span&gt;region&lt;span class="w"&gt; &lt;/span&gt;name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;None&lt;span class="o"&gt;]&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;ap-norteast-2
Default&lt;span class="w"&gt; &lt;/span&gt;output&lt;span class="w"&gt; &lt;/span&gt;format&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;None&lt;span class="o"&gt;]&lt;/span&gt;:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;설정 파일 수정&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;~/.aws/config&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;default&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;region&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ap-northeast-2

&lt;span class="o"&gt;[&lt;/span&gt;profile&lt;span class="w"&gt; &lt;/span&gt;jessie&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;region&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ap-northeast-2

&lt;span class="o"&gt;[&lt;/span&gt;profile&lt;span class="w"&gt; &lt;/span&gt;isaac&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;region&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ap-northeast-2

&lt;span class="o"&gt;[&lt;/span&gt;profile&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;new_profile_name&lt;span class="o"&gt;}]&lt;/span&gt;
&lt;span class="nv"&gt;region&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ap-notrheast-2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;~/.aws/credentials&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;default&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;aws_access_key_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;AK....EW
&lt;span class="nv"&gt;aws_secret_access_key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;XM....HY

&lt;span class="o"&gt;[&lt;/span&gt;jessie&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;aws_access_key_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;AK....EW
&lt;span class="nv"&gt;aws_secret_access_key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;XM....HY

&lt;span class="o"&gt;[&lt;/span&gt;isaac&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;aws_access_key_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;AK....HF
&lt;span class="nv"&gt;aws_secret_access_key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Zs....uS

&lt;span class="o"&gt;[{&lt;/span&gt;new_profile_name&lt;span class="o"&gt;}]&lt;/span&gt;
&lt;span class="nv"&gt;aws_access_key_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;AK....HF
&lt;span class="nv"&gt;aws_secret_access_key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Zs....uS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="infra"></category><category term="aws"></category><category term="infra"></category></entry><entry><title>pytest in python</title><link href="https://blog.i544c.com/pytest-in-python.html" rel="alternate"></link><published>2024-01-08T06:15:00+09:00</published><updated>2024-01-15T03:20:00+09:00</updated><author><name>Isaac Park</name></author><id>tag:blog.i544c.com,2024-01-08:/pytest-in-python.html</id><summary type="html">&lt;p&gt;pytest in python&lt;/p&gt;</summary><content type="html">&lt;h2&gt;🗂️목차&lt;/h2&gt;
&lt;hr&gt;
&lt;h2&gt;🎯Abstract&lt;/h2&gt;
&lt;p&gt;이번 포스팅에서는 pytest 구성 및 활용 방법을 소개합니다.&lt;/p&gt;
&lt;p&gt;특히, 데이터베이스와 연관된 테스트 자동화가 어떤 영향을 미치는지, 이를 어떻게 설계하고 실행하는지에 대해 다룹니다.&lt;/p&gt;
&lt;p&gt;테스트 실행 방법과 커스터마이징 방식에 대해서도 설명하며, 이미 구현된 커버리지 테스트의 실행 방법과 관련된 아이디어를 공유합니다.&lt;/p&gt;
&lt;p&gt;또한, Github Actions를 활용한 CI 테스트 자동화 스크립트 구현 과정을 소개합니다. PR 생성 시 필수 머지 조건 설정 방법과 스크립트 수정 가능성에 대해서도 설명합니다.&lt;/p&gt;
&lt;h2&gt;⚙️PyTest&lt;/h2&gt;
&lt;h3&gt;pytest를 선택한 이유&lt;/h3&gt;
&lt;p&gt;Python에서 테스트를 작성할 때 주로 사용하는 라이브러리로는 pytest와 unittest가 있습니다.&lt;/p&gt;
&lt;p&gt;pytest는 3rd-party 라이브러리로, 다양한 기능과 최신 IDE와의 뛰어난 호환성을 제공합니다.
unittest는 Python 표준 라이브러리의 일부로, JUnit(Java unit-test) 스타일의 구조를 따릅니다. 직관적이고 간단한 사용법이 장점입니다.
두 라이브러리는 기본적으로 유사한 기능을 제공하지만, pytest는 hook이나 scope fixture 등 더 복잡하고 유연한 기능을 지원합니다.&lt;/p&gt;
&lt;p&gt;제가 pytest를 선택한 이유는 다음과 같습니다:&lt;/p&gt;
&lt;p&gt;많은 Python 오픈소스 커뮤니티가 pytest를 표준으로 채택하고 있습니다.
미래의 확장성과 유지보수를 고려한 future-proof 선택이기 때문입니다.&lt;/p&gt;
&lt;h3&gt;framework or vanilla approach&lt;/h3&gt;
&lt;p&gt;테스트를 설계할 때, 라이브러리를 기반으로 맞춤형 테스트 framework를 구축하는 경우가 종종 있습니다. 예를 들어, Win32 API를 기반으로 MFC를 구축하는 것처럼, pytest를 기반으로 서비스에 적합한 맞춤형 framework를 만들어 재활용성과 추상화를 통해 생산성을 높일 수 있습니다.&lt;/p&gt;
&lt;p&gt;하지만 이러한 framework 접근법에는 몇 가지 한계가 존재합니다:&lt;/p&gt;
&lt;p&gt;Framework 자체 테스트 필요성
Framework를 만들다 보면 그 자체를 테스트해야 하는 상황이 발생합니다. 이 과정에서 테스트 코드에 버그가 숨어 있어도 이를 발견하기 어려울 수 있습니다.&lt;/p&gt;
&lt;p&gt;문서화의 부족
특히 처음 framework를 접하는 개발자들에게, 문서화가 부족한 framework는 적용 및 학습의 큰 장벽이 될 수 있습니다. 이러한 문제는 종종 맞춤형 테스트 framework에서도 발견됩니다.&lt;/p&gt;
&lt;p&gt;그래서 선택한 Vanilla Approach
이런 이유로, 가능한 한 pytest의 기본 기능을 최대한 활용하고, 반복적으로 사용되는 boilerplate 코드는 helper로 분리하는 vanilla approach를 채택했습니다.&lt;/p&gt;
&lt;p&gt;이 접근법은 간단하고 직관적이며, 추가적인 학습 없이도 pytest의 기본 문서만으로 테스트를 이해하고 작성할 수 있는 장점이 있습니다.
미래의 확장성
테스트가 점점 복잡해지고 양이 증가하면서 발생하는 문제는 다음과 같은 방법을 통해 해결할 수 있습니다:&lt;/p&gt;
&lt;p&gt;MSA(Microservices Architecture)로 도메인 분리
테스트 범위를 줄이고 독립성을 강화할 수 있습니다.
기타 새로운 방법론 도입
프로젝트의 성장과 함께 보다 적합한 도구나 설계를 고려할 필요가 있습니다.&lt;/p&gt;
&lt;h3&gt;fixture and scope&lt;/h3&gt;
&lt;p&gt;pytest fixture는 테스트 간 공유되는 setup이라고 생각하시면 됩니다. constructor와 destructor가 있어, 필요 시 실행 시 생성되는 코드, 종료 시 제거되는 코드를 정의 할 수 있습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Senior&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;STUDENT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SENIOR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# constructor&lt;/span&gt;
    &lt;span class="n"&gt;util_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Uitls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# yield return&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;util_obj&lt;/span&gt;

    &lt;span class="c1"&gt;# destructor&lt;/span&gt;
    &lt;span class="n"&gt;util_obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;fixture에는 scope이란 용어로 테스트간 공유되는 범위를 지정할 수 있습니다.&lt;/p&gt;
&lt;p&gt;scope에 따라 범위기준으로 fixture가 재활용될지, 다시 생성할 지 결정됩니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;scope&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;function: 기본값, 미지정 시 기본설정, 함수 시작 전후로 리셋 됨&lt;/li&gt;
&lt;li&gt;class: class간 재활용되는 scope&lt;/li&gt;
&lt;li&gt;module&lt;/li&gt;
&lt;li&gt;package&lt;/li&gt;
&lt;li&gt;session: 전체 테스트 세션에 공유됨, global scope이라고 볼 수 있음, multi processing으로 test run시 여러 session이 있을 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;session&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;sess&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# global initialization here&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# setup class here&lt;/span&gt;
    &lt;span class="n"&gt;yeild&lt;/span&gt;
    &lt;span class="c1"&gt;# tear down class here&lt;/span&gt;

&lt;span class="c1"&gt;# fixture를 parameter사용하지 않고 적용하는 방법&lt;/span&gt;
&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;usefixtures&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;setup&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;TestClass1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# 모든 test method가 실행 전에 setup 실행&lt;/span&gt;
    &lt;span class="c1"&gt;# 모든 test method 종료 후 tear down 부분 실행&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_case1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_case2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;reference&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;테스트가 fixture를 사용하는법은 아래와 같습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_baa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# &amp;#39;Hello&amp;#39; 출력&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;fixture는 꼭 같은 module서 정의될 필요 없습니다.&lt;/p&gt;
&lt;p&gt;다른 모듈에서 정의 후 import 후 사용 가능합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 위치: foo.py&lt;/span&gt;
&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 위치: bar.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;foo&lt;/span&gt; &lt;span class="n"&gt;impor&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# &amp;#39;Hello&amp;#39; 출력&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;pytest는 hook이나 공용 fixture를 명시 할 수 있는 특별 모듈이 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;conftest.py&lt;/code&gt;이름의 파일 아래 모든 모듈은 import없이 해당 파일 내 모든 fixture 접근이 가능합니다. 이를 fixture discovery라고 합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 위치: tests/conftest.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 위치: tests/bar.py&lt;/span&gt;
&lt;span class="c1"&gt;# import 불필요&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# &amp;#39;foo&amp;#39; 출력&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;conftest.py파일을 root directory에 지정 시 해당 파일 내 모든 hook이나 fixture는 모든 테스트에 적용됩니다. hook function에 관한 내용은 아래 설명 참고 바랍니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;autouse&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;autouse는 fixture를 reference할 수 있는 모든 test에 별도 각각 명시할 필요 없이 자동으로 적용됩니다.&lt;/p&gt;
&lt;p&gt;conftest.py에 명시된 fixture에 autouse=True할 시 해당 디렉토리 내 모든 테스트에는 그 fixture가 자동 적용됩니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 위치: tests/conftest.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;autouse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 위치: tests/app/test_app.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_bar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# 여기서 &amp;#39;foo&amp;#39; 출력&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# &amp;#39;bar&amp;#39; 출력&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;scope이 session이고 autouse=True 일시 모든 접근가능한 테스트에 해당 fixture가 자동 적용되면서 공유되어 singleton 같은 효과를 얻을 수 있습니다. 단 database관련 singleton화는 transaction에 의해 영향을 받아  이슈가 발생할 수 있습니다(test와 transaction관련은 아래 참고).&lt;/p&gt;
&lt;h3&gt;mark&lt;/h3&gt;
&lt;p&gt;pytest.mark기능은 테스트에 커스텀 특징을 설정할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pytest.mark.usefixtures:&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;parameter사용하지 않고 fixture를 테스트에 적용 할 수 있습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;usefixtures&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_bar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# foo fixture starts here&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;pytest.mark.skip:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;테스트코드를 유지한체 실행 시 테스트를 생략할 수 있습니다&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reason&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;호환성 이슈&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# skipped during test run&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;pytest.mark.parametrize:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;동일 테스트를 다른 파라미터 조건으로 테스트 케이스 생성이 가능합니다&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parametrize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cond&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;expected&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_always_true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cond&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# True == True 와 False == False 두 테스트가 실행 됨&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;cond&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;pytest.mark.django_db:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;django ORM을 접근하기 위해 필요한 mark입니다. pytest-django pakcage의 커스텀 mark입니다.&lt;/p&gt;
&lt;p&gt;pytest와 database관련해서는 아래 참고 바람&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;django_db&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_user&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MedicalStaffFactory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;assert&lt;/h3&gt;
&lt;p&gt;테스트 함수 내 동작결과가 원하게 동작했는지 실패처리해야할 지를 명시하는 방법입니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;기본사용법&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;    &lt;span class="c1"&gt;# 성공&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;   &lt;span class="c1"&gt;# 실패, test run에서 실패 및 error message&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;reason here&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;exception&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_exception&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# 성공&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;mocker&lt;/h3&gt;
&lt;p&gt;mocker는 테스트 시 일부 모듈이나 3rd party라이브러리의 행위를 조종할 수 있게 합니다.&lt;/p&gt;
&lt;p&gt;복잡한 내부 로직을 생략하거나, 호출되면 안되는(예시: twilo API 호출) 3rd party 라이브러리를 실제로 호출하지 않고 호출 된걸로 간주하게 하여 기존 코드 수정없이 해당 로직을 테스트 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;mocker는 반환값을 변환시키거나, 입력값이 무엇인지 알 수 있고, 호출여부, 호출개수 도 알 수 있습니다.&lt;/p&gt;
&lt;p&gt;pytest의 기본 mock기능 도 있지만 여기서는 pytest-mocker 패키지의 mocker라는 fixture를 사용합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;return 값 변경:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;아래처럼 지정 모듈의 클라스, 함수까지 반환값을 변환 할 수 있습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 위치: myapp/tests/test_serializers.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_check_token_fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mocker&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;uid_b64&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlsafe_b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TokenGenerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;serializer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PasswordResetSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;newpassword&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;token&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;uid_b64&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;uid_b64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="n"&gt;mocker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;myapp.serializers.TokenGenerator.check_token&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AuthenticationError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raise_exception&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The reset link is invalid&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;401&lt;/span&gt;

&lt;span class="c1"&gt;# 위치: myapp/serializers.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;some_library.tokens&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TokenGenerator&lt;/span&gt;  &lt;span class="c1"&gt;# 이거를 mock&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;PasswordResetSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Serializer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;TokenGenerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;AuthenticationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;The reset link is invalid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;함수 호출정보 확인:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;아래 처럼 지정 함수의 호출여부와 어떤 파라미터가 입력 됐는지도 확인 할 수 있습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 위치: myapp/tests/test_views.py&lt;/span&gt;
&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;django_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;usefixtures&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;auth_token&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;TestResetEmailWithTokenView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_reset_email_with_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;api_client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mocker&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="c1"&gt;# 테스트 데이터 설정&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;reset-email-with-token&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;acc_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generate_new_tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;web-client&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bearer &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;acc_token&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;mock_serializer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mocker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;myapp.views.ResetEmailWithTokenView.serializer_class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;mock_serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
        &lt;span class="n"&gt;mock_serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

        &lt;span class="c1"&gt;# 요청 전송&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_200_OK&lt;/span&gt;

        &lt;span class="c1"&gt;# is_valid 파라미터 확인&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;mock_serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;mock_serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;context&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;request&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;

&lt;span class="c1"&gt;# 위치: myapp/views.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;ResetEmailWithTokenView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GenericAPIView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;serializer_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ResetEmailWithTokenSerializer&lt;/span&gt;
    &lt;span class="n"&gt;renderer_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CustomResultRenderer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;serializer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serializer_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;request&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raise_exception&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_200_OK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;unittest와의 호환성&lt;/h3&gt;
&lt;p&gt;pytest는 기본적으로 python unittest, nose 테스트가 100% 호환됩니다. 테스트 작성을 unittest 사용하고 싶으시면 가능합니다.&lt;/p&gt;
&lt;h3&gt;테스트 discovery&lt;/h3&gt;
&lt;p&gt;pytest는 설정으로 테스트 함수를 자동으로 찾게 됩니다.&lt;/p&gt;
&lt;p&gt;여기서는 &lt;code&gt;pytest.ini&lt;/code&gt;파일에 기본설정이 있고 pytest도 참고하게 됩니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;DJANGO_SETTINGS_MODULE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;myapp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="n"&gt;addopts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;reuse&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;disable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;warnings&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;nomigrations&lt;/span&gt;
&lt;span class="n"&gt;python_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;*.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="n"&gt;python_functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;기본 설정으로는 &lt;code&gt;test*.py&lt;/code&gt; 패턴의 파일명 모듈을 자동으로 찾습니다.&lt;/p&gt;
&lt;p&gt;pytest 기본값으로 &lt;code&gt;Test*&lt;/code&gt; 패턴의 class를 찾거나 설정으로 &lt;code&gt;test*&lt;/code&gt; 패턴의 함수를 찾습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 위치: myapp/tests/test_serializers.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;TestTokenAuthenticationSerializer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;reference&lt;/h3&gt;
&lt;p&gt;최대한 구현된 테스트 범위로 설명을 국한했습니다.&lt;/p&gt;
&lt;p&gt;더 자세한 사용법은 &lt;a href="https://docs.pytest.org/en/latest/index.html"&gt;공식문서&lt;/a&gt; 참고 부탁드립니다.&lt;/p&gt;
&lt;h2&gt;🗄️Django와 database관련&lt;/h2&gt;
&lt;p&gt;django의 기능을 pytest서 사용하여 테스트하기 위해 &lt;code&gt;pytest-django&lt;/code&gt; 패키지를 사용합니다.&lt;/p&gt;
&lt;p&gt;django ORM을 사용하기 위해서는 django test에서는 기본으로 test database를 생성하여 default database와 분리하게 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="pytest서 생성된 test_*****_local schema" src="../images/python_unittest/Untitled.png"&gt;&lt;/p&gt;
&lt;p&gt;pytest서 생성된 test_&lt;strong&gt;*&lt;/strong&gt;_local schema&lt;/p&gt;
&lt;p&gt;모든 django database관련 테스트는 transaction이 걸리게 됩니다.&lt;/p&gt;
&lt;p&gt;test function 혹은 class, module 마다 transaction이 rollback(혹은 trauncate) 되며
다른 테스트와 isolation을 지원합니다.&lt;/p&gt;
&lt;p&gt;django ORM사용 테스트는 아래 mark를 적용해야 동작합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 함수에 django_db 적용&lt;/span&gt;
&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;django_db&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# some database access here&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;# class에 django_db 적용&lt;/span&gt;
&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;django_db&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;TestCase1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;passs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 모듈 전체 django_db 적용&lt;/span&gt;
&lt;span class="n"&gt;pytestmark&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;django_db&lt;/span&gt;

&lt;span class="c1"&gt;# test code here&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;기본 실행 설정&lt;/h3&gt;
&lt;p&gt;아래 처럼 디비관련 기본 실행 옵션은 &lt;code&gt;—-reuse-db —-nomigrations&lt;/code&gt;입니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;DJANGO_SETTINGS_MODULE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;myapp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="n"&gt;addopts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;reuse&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;disable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;warnings&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;nomigrations&lt;/span&gt;
&lt;span class="n"&gt;python_files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;*.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="n"&gt;python_functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;속도 때문에 test디비를 매번 재생성, 마이그레이션 하지 않고 재사용하고 있습니다.&lt;/p&gt;
&lt;p&gt;혹시 테스트 중 데이터베이스에 남은 데이터가 있어 충돌이 나거나, 마이그레이션에 문제가 있을 경우, 혹은 새로 추가 된 마이그레이션을 적용 하기 위해서는  아래 명령어로 디비 재생성이 필요합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;pytest&lt;span class="w"&gt; &lt;/span&gt;--create-db&lt;span class="w"&gt; &lt;/span&gt;--migrations
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;🪨Custom Fixtures&lt;/h2&gt;
&lt;h3&gt;mem_cache : fixture&lt;/h3&gt;
&lt;p&gt;pytest(or unittest)는 cache isolation을 지원하지 않습니다. 즉 redis가 동일하게 사용됩니다.&lt;/p&gt;
&lt;p&gt;pytest hook으로 테스트 실행 시 모든 redis 케시를 지우긴 하지만 테스트 간에 케시가 자동으로 원복되지 않기 때문에 테스트에서 생성 된 케시로 인해 다른 테스트에서 단독 실행 시 문제없던 코드가 같이 돌릴 시 예상치 못한 이슈를 발생하게 됩니다.&lt;/p&gt;
&lt;p&gt;이를 방지 하기 위해서 in-memory cache를 사용해 isolation을 구축하였습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 위치: myapp/tests/fixtures.py&lt;/span&gt;

&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;mem_cache&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;    &lt;span class="c1"&gt;# noqa&lt;/span&gt;
    &lt;span class="c1"&gt;# in-memory cache to isolate cache between tests&lt;/span&gt;
    &lt;span class="c1"&gt;# also isolates cache between processes, due to it allows one process to access the cache at a time&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;override_settings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CACHES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;BACKEND&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.core.cache.backends.locmem.LocMemCache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}}):&lt;/span&gt;
        &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt;
        &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# 위치: myapp/tests/test_models.py&lt;/span&gt;

&lt;span class="c1"&gt;# using in-memory cache to isolate cache between tests&lt;/span&gt;
&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;django_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;usefixtures&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mem_cache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;TestMyModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_cache_key_generation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Create an instance of the model&lt;/span&gt;
        &lt;span class="n"&gt;my_instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyModelFactory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;# Cache key&lt;/span&gt;
        &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cache_key_prefix:model:&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;my_instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;

        &lt;span class="c1"&gt;# Assert that the cache key is set correctly&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;my_instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache_key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;위 예제 처럼, 케시를 사용하는 테스트 케이스들은 &lt;code&gt;mem_cache&lt;/code&gt; fixutre를 사용하는걸 권장합니다.&lt;/p&gt;
&lt;p&gt;redis 기능이 꼭 필요하다면 테스트 전 후 로 매번 clear를 해주시길 바랍니다.&lt;/p&gt;
&lt;h2&gt;👀code coverage&lt;/h2&gt;
&lt;p&gt;코드 커버리지란 테스트 코드가 커버하는 코드의 수치화를 말합니다. instrument tool로 테스트 진행 시 실행되는 코드를 기록합니다. 커버리지 방법에 따라 다른 기준으로 코드의 커버된 여부를 결정하게 되고, 보고로 커버된 코드의 줄 수를 수치로 확인 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;이로 인해 테스트를 못한 코드가 어디인지 전체 코드 중 얼마나 테스트를 커버 못했는지 확인 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="coverage 테스트 출력 예시" src="../images/python_unittest/Untitled%201.png"&gt;&lt;/p&gt;
&lt;p&gt;coverage 테스트 출력 예시&lt;/p&gt;
&lt;p&gt;코드 커버리지 방법론 중 가장 많이 사용되는 방법은 line coverage입니다. 코드 줄이 실행 될 경우 테스트가 됐다고 가정하는 것입니다.&lt;/p&gt;
&lt;p&gt;다른 방법론으로는 branch coverage입니다. condition이 있는 코드 중 모든 true false 조건이 다 실행되어야 해당 code block이 실행됐다고 가정하는 방법입니다.&lt;/p&gt;
&lt;p&gt;저희는 가장 기본으로 line coverage방법론을 사용하고 있습니다(pytest-coverage 기본값).&lt;/p&gt;
&lt;p&gt;추 후 커버리지가 충분히 올라오고, 좀 더 엄격한 기준을 적용할 수 있을 때 다른 커버리지 방법을 사용하는것을 권장합니다.&lt;/p&gt;
&lt;p&gt;ref: &lt;a href="https://tecoble.techcourse.co.kr/post/2020-10-24-code-coverage/"&gt;https://tecoble.techcourse.co.kr/post/2020-10-24-code-coverage/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;👥테스트 문화 및 정책&lt;/h2&gt;
&lt;p&gt;테스트 문화를 강화하기 위해 PR에 추가된 코드에 대한 테스트 케이스 작성을 필수화하고자 합니다. PR에 포함된 코드 변경 사항에 대해 테스트 케이스를 작성하거나 기존 테스트를 수정하여 점진적으로 테스트 커버리지를 늘리는 것을 목표로 합니다.&lt;/p&gt;
&lt;p&gt;GitHub Actions를 통해 모든 테스트를 통과한 경우에만 PR 병합을 허용하며, 이를 완전히 적용하기 위한 적응 기간을 정합니다.&lt;/p&gt;
&lt;p&gt;초기 커버리지 기준을 정하고, 점차 상향하여 전체 테스트 커버리지를 지속적으로 개선합니다.&lt;/p&gt;
&lt;p&gt;테스트 코드 작성이 누락된 경우, 코드 커버리지가 낮아져 모든 테스트가 통과하더라도 GitHub Actions에서 실패 처리되므로 자연스럽게 테스트 작성 문화를 장려할 수 있습니다.&lt;/p&gt;
&lt;h2&gt;🏃실행방법&lt;/h2&gt;
&lt;h3&gt;Prerequisite&lt;/h3&gt;
&lt;p&gt;테스트 디비를 생성하기 때문에 디비 user의 권한설정이 필요합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;GRANT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ALL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;PRIVILEGES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;WITH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;GRANT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;OPTION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FLUSH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;PRIVILEGES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;requirements..txt&lt;/code&gt; 설치&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;requirements..txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;기본 테스트&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 기본 실행&lt;/span&gt;
pytest

&lt;span class="c1"&gt;# 특정 테스트 파일 실행&lt;/span&gt;
pytest&lt;span class="w"&gt; &lt;/span&gt;myapp/tests/test_models.py
pytest&lt;span class="w"&gt; &lt;/span&gt;myapp/tests/test_views.py::TestTokenGeneration::test_token_generation_permission_check

&lt;span class="c1"&gt;# 멀티 프로세싱 적용&lt;/span&gt;
pytest&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;auto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;관련 설정파일&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pytest.ini&lt;/li&gt;
&lt;li&gt;myapp/settings/pytest.py&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;기본 설정은 test 데이터베이스를 재사용한다.&lt;/p&gt;
&lt;p&gt;혹시 테스트 중 데이터베이스 남은데이터가 있어 충돌이 나거나, 마이그레이션에 문제가 있을 경우 혹은 새로 추가된 마이그레이션을 적용 하기 위해서는 아래 명령어로 다시 디비생성이 필요합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;--create-db --migrations&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;커버리지 테스트&lt;/h3&gt;
&lt;p&gt;line coverage를 기준으로 합니다. 
&lt;a href="https://tecoble.techcourse.co.kr/post/2020-10-24-code-coverage/"&gt;코드 커버리지 관련브로그&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#&lt;span class="w"&gt; &lt;/span&gt;전체&lt;span class="w"&gt; &lt;/span&gt;범위
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pytest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nv"&gt;cov&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;.

#&lt;span class="w"&gt; &lt;/span&gt;테스트&lt;span class="w"&gt; &lt;/span&gt;못한&lt;span class="w"&gt; &lt;/span&gt;코드&lt;span class="w"&gt; &lt;/span&gt;표시
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pytest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nv"&gt;cov&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;report&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;term&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;missing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nv"&gt;cov&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;

#&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;커버리지&lt;span class="w"&gt; &lt;/span&gt;이하&lt;span class="w"&gt; &lt;/span&gt;시&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;exit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;fail&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;CICD&lt;/span&gt;에서&lt;span class="w"&gt; &lt;/span&gt;많이&lt;span class="w"&gt; &lt;/span&gt;사용
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;pytest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nv"&gt;cov&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nv"&gt;cov&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;fail&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;under&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;⛓️Github Action(CI)&lt;/h2&gt;
&lt;p&gt;github action script로 특정 이벤트 트리거로 자동 테스트를 실행 할 수 있습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Python Tests&lt;/span&gt;

&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;main&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;pull_request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;main&lt;/span&gt;

&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout code&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v3&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Set up Python&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/setup-python@v4&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;python-version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;3.9&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install dependencies&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;python -m pip install --upgrade pip&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;pip install -r requirements.txt&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Run tests with pytest&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;pytest --cov=myapp --cov-report=xml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="backend"></category><category term="CI"></category><category term="backend"></category><category term="django"></category><category term="git"></category><category term="python"></category><category term="pytest"></category></entry><entry><title>DRF에서 OpenAPI(a.k.a Swagger) 3.0 활용 API 문서화</title><link href="https://blog.i544c.com/drfeseo-openapiaka-swagger-30-hwalyong-api-munseohwa.html" rel="alternate"></link><published>2023-12-06T21:21:00+09:00</published><updated>2024-12-16T16:27:00+09:00</updated><author><name>Isaac Park</name></author><id>tag:blog.i544c.com,2023-12-06:/drfeseo-openapiaka-swagger-30-hwalyong-api-munseohwa.html</id><summary type="html">&lt;p&gt;OpenAPI 3.0, DRF&lt;/p&gt;</summary><content type="html">&lt;h3&gt;개요&lt;/h3&gt;
&lt;p&gt;OpenAPI 3.0(a.k.a. swagger)를 사용, API문서 작업이 조금 더 쉬워 질 수 있는 initiative를 제안합니다.&lt;/p&gt;
&lt;p&gt;첫 셋업 후 및 learning-curve를 극복 시 아래와 같은 장점이 생긴다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DRF 코드로 schema가 자동 생성된다.&lt;ol&gt;
&lt;li&gt;추가/수정 된 코드가 자동으로 문서에 적용되어 중복작업 감소됨&lt;/li&gt;
&lt;li&gt;문서작업을 업데이트 하지 않아 발생하는 이슈 줄어듬&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;형상관리가 가능합니다.
git으로 문서가 관리되어 작업자, 일시, 작업범위 등 기록이 자세히 남게 됩니다.&lt;/li&gt;
&lt;li&gt;무료
postman 발생되는 비용을 절약할 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;기본&lt;/h3&gt;
&lt;p&gt;keypoints&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;swagger라이브러리로 DRF model, serializer, view, auth, url, pagination 등 소스코드를 기반으로 OpenAPI 3.0 포멧의 schema(json or yaml 파일)를 생성합니다.&lt;/li&gt;
&lt;li&gt;swagger 클라이언트에 schema파일을 로드하면 웹UI로 API문서를 사용가능합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="swagger 예시" src="../images/openapi/Untitled.png"&gt;&lt;/p&gt;
&lt;p&gt;swagger 예시&lt;/p&gt;
&lt;p&gt;model이나 serializer의 필드 데이터를 기반으로 request/response 포멧이 자동 생성됩니다.&lt;/p&gt;
&lt;p&gt;포함되는 정보는 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;type&lt;/li&gt;
&lt;li&gt;read only, write only&lt;/li&gt;
&lt;li&gt;required&lt;/li&gt;
&lt;li&gt;constraint(nullable, max value, regex, etc.)&lt;/li&gt;
&lt;li&gt;description(help_text)&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="response example" src="../images/openapi/Untitled%201.png"&gt;&lt;/p&gt;
&lt;p&gt;response example&lt;/p&gt;
&lt;p&gt;request의 parameter도 url pattern으로 자동 생성되고&lt;/p&gt;
&lt;p&gt;필요 시 수동추가 도 가능합니다.&lt;/p&gt;
&lt;p&gt;parameter 종류는 아래와 같습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;cookie&lt;/li&gt;
&lt;li&gt;path&lt;/li&gt;
&lt;li&gt;query&lt;/li&gt;
&lt;li&gt;header&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="GET example" src="../images/openapi/Untitled%202.png"&gt;&lt;/p&gt;
&lt;p&gt;GET example&lt;/p&gt;
&lt;h3&gt;Extension&lt;/h3&gt;
&lt;p&gt;코드 기반 자동생성된 스키마가 부정확하거나 내용추가 필요 시 extension이 가능합니다.&lt;/p&gt;
&lt;p&gt;필요 시 request나 response의 example을 추가 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Untitled" src="../images/openapi/Untitled%203.png"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;STAFF_POST_EXAMPLES&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;OpenApiExample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;관리자 생성&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test_admin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;admin@example.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;groups&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user_permissions&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;is_staff&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;is_superuser&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;katalk_id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;phone_num&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="nx"&gt;request_only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;OpenApiExample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;OV 계정 생성&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test_staff&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test_staff@onvacation.life&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;groups&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GROUP_OV&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user_permissions&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PERMISSION_EDIT&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;홍길동&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;is_staff&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;is_superuser&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;katalk_id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;phone_num&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="nx"&gt;request_only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;OpenApiExample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;파트너 계정 생성&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test_staff&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test_staff@tourcompany.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;groups&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GROUP_PARTNER&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user_permissions&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;홍길동&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;is_staff&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;is_superuser&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;katalk_id&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;phone_num&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="nx"&gt;request_only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;extend_schema_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;extend_schema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;STAFF_POST_DESCRIPTION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                            &lt;/span&gt;&lt;span class="nx"&gt;examples&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;STAFF_POST_EXAMPLES&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;StaffListCreateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;generics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ListCreateAPIView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;serializer method field 같은 type 없는 필드는 decorator로 명시가 가능합니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;extend_schema_field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;boolean&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;get_kakao_linked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;client_profile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;False&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client_profile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kakao_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;좀 더 복잡한 케이스:&lt;/p&gt;
&lt;p&gt;아래는 serializer &lt;code&gt;to_representation&lt;/code&gt; 메소드서 생성되어 스키마에 빠진 필드를 추가하는 예제입니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Fix13&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;OpenApiSerializerExtension&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;target_class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;AirlineCardSerializer&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;map_serializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;auto_schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Fixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target_class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;subtype&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;serializers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ChoiceField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CARD_TYPE_AIRLINE_SUBTYPE_CHOICES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;via_direction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;serializers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ChoiceField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AIRLINE_CARD_VIA_DIRECTION_CHOICES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;auto_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_map_serializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Fixed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;API Client&lt;/h3&gt;
&lt;p&gt;postman처럼 API 호출 client를 지원합니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Untitled" src="../images/openapi/Untitled%204.png"&gt;&lt;/p&gt;
&lt;h3&gt;Library&lt;/h3&gt;
&lt;p&gt;python, django, django-rest-framework용 swagger 라이브러리가 몇개가 있지만&lt;/p&gt;
&lt;p&gt;아직까지 지원이 되고 가장 많이 사용되는 라이브러리는 &lt;code&gt;drf-spectacular&lt;/code&gt;가 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Untitled" src="../images/openapi/Untitled%205.png"&gt;&lt;/p&gt;
&lt;h3&gt;3rd party UI&lt;/h3&gt;
&lt;p&gt;기본 제공되는 swagger-ui말고도 schema파일만 연동하면 웹 기반 문서를 만들어주는 SaaS도 존재합니다.&lt;/p&gt;
&lt;p&gt;CI툴로 자동 연동도 가능해 문서 배포를 자동화 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;이런 SaaS는 검색 등 편의기능이 있고, UI도 괜찮습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;readme&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;link: &lt;a href="https://readme.com/documentation"&gt;https://readme.com/documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;stoplight&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;link: &lt;a href="https://stoplight.io/drive-api-results"&gt;https://stoplight.io/drive-api-results&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Document360&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SwaggerHub&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Redocly&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;ref: &lt;a href="https://document360.com/blog/api-documentation-tools/"&gt;https://document360.com/blog/api-documentation-tools/&lt;/a&gt;&lt;/p&gt;</content><category term="api"></category><category term="api"></category><category term="backend"></category><category term="python"></category><category term="django"></category><category term="document"></category></entry></feed>