<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Isaac's Tech Blog - database</title><link href="https://blog.i544c.com/" rel="alternate"></link><link href="https://blog.i544c.com/feeds/database.atom.xml" rel="self"></link><id>https://blog.i544c.com/</id><updated>2024-12-30T13:39:00+09:00</updated><entry><title>LLM embedding &amp; vector database의 소개</title><link href="https://blog.i544c.com/llm-embedding-vector-databaseyi-sogae.html" rel="alternate"></link><published>2024-12-30T13:10:00+09:00</published><updated>2024-12-30T13:39:00+09:00</updated><author><name>박이삭</name></author><id>tag:blog.i544c.com,2024-12-30:/llm-embedding-vector-databaseyi-sogae.html</id><summary type="html">&lt;p&gt;LLM embedding&lt;/p&gt;</summary><content type="html">&lt;h2&gt;1. 서론 (Introduction)&lt;/h2&gt;
&lt;h3&gt;1.1 LLM 임베딩(Embeddings)의 정의&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image.png"&gt;&lt;/p&gt;
&lt;p&gt;대형 언어 모델(LLM)에서의 임베딩은 단어, 문장, 혹은 문서와 같은 텍스트 단위를 의미·문법 정보를 담은 &lt;strong&gt;숫자 벡터&lt;/strong&gt;로 변환한 것을 말합니다. 텍스트를 연속적인 벡터 공간으로 바꾸어, 서로 다른 텍스트 간의 유사도(관련성)를 정량화할 수 있도록 해줍니다. 이러한 임베딩은 모델 학습 과정에서 습득되어, 미묘한 언어적 특징까지 인코딩합니다. 따라서 유사도 검색이나 분류, 군집화 등의 &lt;strong&gt;다양한 작업&lt;/strong&gt;을 위한 핵심 빌딩 블록 역할을 합니다.&lt;/p&gt;
&lt;h3&gt;1.2 역사적 배경: Word/LLM 임베딩의 진화&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%201.png"&gt;&lt;/p&gt;
&lt;p&gt;현대 LLM 이전에는 Word2Vec, GloVe 같은 방식으로 &lt;strong&gt;정적(Static) 임베딩&lt;/strong&gt;을 사용해, 각 단어당 하나의 벡터를 할당했습니다. 이후 Transformer 기반 모델(BERT, GPT 등)이 등장하면서 &lt;strong&gt;맥락(Context)에 따라 달라지는 임베딩&lt;/strong&gt;이 가능해졌고, 이는 감성 분석이나 QA 같은 작업 성능을 크게 끌어올렸습니다. 현재는 더 대규모의 모델로 발전하며, 더욱 깊은 의미를 담아낼 수 있는 임베딩을 제공하고 있습니다.&lt;/p&gt;
&lt;h3&gt;1.3 왜 벡터 임베딩이 특별한가&lt;/h3&gt;
&lt;p&gt;벡터 임베딩은 텍스트의 표면적인 단어 매칭을 넘어 &lt;strong&gt;기저 의미(Semantics)&lt;/strong&gt; 를 포착하기 때문에 각기 다른 단어로 구성된 문장도 의미가 유사하면 근접한 벡터로 표현됩니다. 이는 현대 NLP 기반의 &lt;strong&gt;시맨틱 검색, 추천 시스템&lt;/strong&gt; 등에서 핵심적입니다. 기존의 기호(symbolic) 접근과 달리, 이 &lt;strong&gt;밀집(dense) 벡터&lt;/strong&gt;는 도메인이나 작업을 가리지 않고 &lt;strong&gt;범용적으로 활용&lt;/strong&gt;하기 유리합니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt=" &amp;lt; 백터 검색의 정점에 오르다 | DAN24 &amp;gt;" src="../images/llm/image%202.png"&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt; 백터 검색의 정점에 오르다 | DAN24 &amp;gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;2. LLM에서 임베딩 추출하기 (Retrieving Embeddings from LLMs)&lt;/h2&gt;
&lt;h3&gt;2.1 LLM의 전형적인 아키텍처&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%203.png"&gt;&lt;/p&gt;
&lt;p&gt;https://newsletter.theaiedge.io/p/understanding-the-self-attention&lt;/p&gt;
&lt;p&gt;대부분의 대형 언어 모델은 Transformer 구조를 사용하며, &lt;strong&gt;Self-Attention&lt;/strong&gt; 기법으로 맥락적 관계를 학습합니다. 모델은 여러 층(예: 12층, 24층 이상)으로 구성되어 입력 텍스트의 표현을 점진적으로 정교화합니다. BERT의 &lt;code&gt;[CLS]&lt;/code&gt; 같은 특수 토큰이나 마지막 히든 레이어를 임베딩으로 활용하는 경우가 많습니다. 어떤 위치에서 벡터를 추출해야 최적의 임베딩이 나오는지 이해하는 것이 중요합니다.&lt;/p&gt;
&lt;h3&gt;2.2 레이어 선택과 풀링(Pooling) 전략&lt;/h3&gt;
&lt;p&gt;임베딩 품질은 어느 레이어에서 추출하느냐에 따라 크게 달라집니다. 최종 히든 레이어를 쓰는 경우도 있지만, 더 범용적 특징을 얻기 위해 중간 레이어를 활용하기도 합니다. &lt;code&gt;[CLS]&lt;/code&gt; 토큰을 사용하는지, 모든 토큰 벡터를 평균(average)하거나 맥스 풀링(max pooling)하는지에 따라 결과가 달라집니다. 이러한 선택은 &lt;strong&gt;적용 과제와 도메인&lt;/strong&gt;에 따라 달라집니다.&lt;/p&gt;
&lt;h3&gt;2.3 임베딩 추출 실무 가이드&lt;/h3&gt;
&lt;p&gt;개발자는 일반적으로 &lt;strong&gt;Hugging Face Transformers&lt;/strong&gt;와 같은 라이브러리를 통해 사전 학습된 모델을 간단한 코드로 불러와 임베딩을 생성합니다. 전형적인 워크플로는 텍스트를 토크나이즈(tokenize)하고, 모델에 입력한 뒤 특정 레이어의 출력을 추출하는 식입니다. 분야 특화 작업(예: 법률, 의료 등)에서는 &lt;strong&gt;파인튜닝&lt;/strong&gt;이나 도메인 적응이 필요할 수도 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%204.png"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;3. 임베딩의 종류 (Types of Embeddings)&lt;/h2&gt;
&lt;h3&gt;3.1 단어 수준 임베딩 (Word-Level Embeddings)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%205.png"&gt;&lt;/p&gt;
&lt;p&gt;단어 수준 임베딩은 각 단어마다 밀집 벡터를 할당합니다. Word2Vec 같은 &lt;strong&gt;정적 임베딩&lt;/strong&gt;은 맥락에 상관없이 동일 벡터를 사용하지만, Transformer 기반 시스템은 단어가 등장하는 맥락에 따라 벡터가 달라집니다. 품사 태깅, 기초적인 텍스트 유사도 등에는 쓸 만하지만, 더 긴 문맥이나 담화 정보를 반영하기에는 제한적일 수 있습니다.&lt;/p&gt;
&lt;h3&gt;3.2 문장 수준 임베딩 (Sentence-Level Embeddings)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%202.png"&gt;&lt;/p&gt;
&lt;p&gt;문장 전체를 단일 벡터로 표현하여, 개별 단어보다 &lt;strong&gt;포괄적인 의미&lt;/strong&gt;를 담아냅니다. Sentence-BERT나 Universal Sentence Encoder 등이 대표적이며, 시맨틱 검색이나 문장 클러스터링 같은 작업에서 자주 사용됩니다. 서로 다른 표현을 쓰더라도 &lt;strong&gt;의미가 유사&lt;/strong&gt;하면 문장 벡터가 가깝게 위치해 정확한 검색 및 분류를 가능하게 합니다.&lt;/p&gt;
&lt;h3&gt;3.3 문서/단락 수준 임베딩 (Document/Paragraph-Level Embeddings)&lt;/h3&gt;
&lt;p&gt;단락이나 전체 문서처럼 긴 텍스트를 하나의 벡터로 요약하여 &lt;strong&gt;주요 아이디어&lt;/strong&gt;를 포착합니다. 문서 분류, 요약, 대규모 정보 검색에 유용합니다. 다만 너무 긴 텍스트를 한 벡터에 압축할 경우 정보 손실이 발생할 수 있어, &lt;strong&gt;청크(chunk) 단위 분할&lt;/strong&gt;이나 &lt;strong&gt;계층적(hierarchical) 임베딩&lt;/strong&gt; 기법을 고려해야 합니다.&lt;/p&gt;
&lt;h3&gt;3.4 특수 목적 임베딩 (Specialized Embeddings)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%206.png"&gt;&lt;/p&gt;
&lt;p&gt;의료, 법률, 금융처럼 특수 도메인에서는 &lt;strong&gt;전문 용어와 맥락&lt;/strong&gt;을 더 잘 반영하는 도메인 특화 모델이 필요합니다. 예컨대 CLIP과 같이 텍스트와 이미지를 모두 다루는 &lt;strong&gt;멀티모달 임베딩&lt;/strong&gt;은 다양한 형식의 데이터 간 매핑을 수행합니다. 이처럼 특정 도메인 코퍼라로 파인튜닝을 수행하면 해당 분야 과제에서 성능이 크게 향상됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;4. 벡터 데이터베이스의 역할 (Role of Vector Databases)&lt;/h2&gt;
&lt;h3&gt;4.1 벡터 데이터베이스란?&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%207.png"&gt;&lt;/p&gt;
&lt;p&gt;벡터 데이터베이스는 &lt;strong&gt;고차원 임베딩 벡터&lt;/strong&gt;를 대량으로 저장·검색할 수 있도록 특화된 데이터 스토어입니다. 기존 관계형 DB는 대규모 벡터 연산에 한계가 있습니다. 반면 벡터 DB는 유사도 검색, 추천, 이상 탐지 같은 작업을 위해 &lt;strong&gt;최근접 이웃(Nearest Neighbor) 알고리즘&lt;/strong&gt;을 빠르게 수행하도록 설계되었습니다.&lt;/p&gt;
&lt;h3&gt;4.2 핵심 기능 (Key Features)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%208.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%209.png"&gt;&lt;/p&gt;
&lt;p&gt;가장 가까운 상위 k개의 벡터를 빠르게 찾는 기능, &lt;strong&gt;근사 최근접 이웃(ANN)&lt;/strong&gt; 인덱싱, 그리고 HNSW(Hierarchical navigable small world) 같은 특수 데이터 구조가 중요합니다. 대규모 데이터를 처리하기 위해서는 샤딩(sharding), 파티셔닝(partitioning), 분산 인덱싱 같은 &lt;strong&gt;확장성&lt;/strong&gt;이 필수적입니다. 일부 벡터 DB는 메타데이터 필터링이나 기존 데이터 파이프라인과의 연동 기능도 제공합니다.&lt;/p&gt;
&lt;h3&gt;4.3 대표적인 벡터 데이터베이스와 프레임워크&lt;/h3&gt;
&lt;p&gt;자주 쓰이는 라이브러리 및 서비스로는 &lt;strong&gt;FAISS(Facebook AI Similarity Search)&lt;/strong&gt;, Milvus, Pinecone, Weaviate 등이 있습니다. FAISS는 오픈소스 라이브러리 중 &lt;strong&gt;고성능&lt;/strong&gt;으로 유명하고, Milvus나 Weaviate는 클러스터 관리 및 API 등 &lt;strong&gt;종합 기능&lt;/strong&gt;을 제공합니다. Pinecone 같은 관리형 서비스는 인프라 설정이 간단해 프로토타입을 빠르게 만들기에 적합합니다.&lt;/p&gt;
&lt;h3&gt;4.4 벡터 데이터베이스 아키텍처(pinecone as example)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%2010.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="pinecone write path architecture" src="../images/llm/image%2011.png"&gt;&lt;/p&gt;
&lt;p&gt;pinecone write path architecture&lt;/p&gt;
&lt;p&gt;대부분의 벡터 DB는 고차원 검색에 필요한 연산 복잡도를 줄이기 위해 &lt;strong&gt;특수 인덱스 구조&lt;/strong&gt;를 사용합니다. 대규모 처리를 위해 데이터를 여러 샤드로 나누어 저장하기도 합니다. 일부 시스템은 캐시 계층이나 동적 인덱싱을 통해 &lt;strong&gt;실시간 업데이트&lt;/strong&gt;를 지원합니다. 이러한 아키텍처적 요소를 이해하면 검색 속도와 정확도를 &lt;strong&gt;최적화&lt;/strong&gt;하는 데 도움이 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;5. 벡터 유사도 측정 기법 (Vector Similarity Measures)&lt;/h2&gt;
&lt;h3&gt;5.1 공통 유사도·거리(metric) 지표&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%2012.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;코사인 유사도(Cosine similarity)&lt;/strong&gt;, &lt;strong&gt;도트 프로덕트(dot product)&lt;/strong&gt;, &lt;strong&gt;유클리드 거리(Euclidean distance)&lt;/strong&gt; 등이 벡터 간 “가까움”을 평가하는 대표 지표입니다. 코사인 유사도는 벡터 크기보다 각도에 초점을 맞춰서, 벡터 스케일 차이에 강인합니다. 도트 프로덕트는 계산이 빠르지만 벡터 크기의 영향을 많이 받습니다. 유클리드 거리는 기하학적으로 직관적이지만, NLP에서는 상대적으로 덜 쓰일 때도 있습니다.&lt;/p&gt;
&lt;h3&gt;5.2 올바른 지표 선택하기&lt;/h3&gt;
&lt;p&gt;어떤 유사도 측정을 쓸지는 &lt;strong&gt;데이터 특성&lt;/strong&gt;과 &lt;strong&gt;목표 과제의 성능 요구&lt;/strong&gt;에 달려 있습니다. 코사인 유사도는 텍스트 임베딩에서 &lt;strong&gt;방향성&lt;/strong&gt;을 중시하기 때문에 가장 널리 쓰이며, 도트 프로덕트는 벡터 크기가 의미(예: 가중치)를 갖는 경우 유리할 수 있습니다. 여러 메트릭을 &lt;strong&gt;검증 세트&lt;/strong&gt;에서 비교·평가해 보는 것이 안전한 방법입니다.&lt;/p&gt;
&lt;h3&gt;5.3 근사 최근접 이웃(ANN) 기법&lt;/h3&gt;
&lt;p&gt;HNSW(Hierarchical Navigable Small World), IVF(Inverted File Index), Product Quantization(PQ) 등은 수백만~수십억 개에 달하는 벡터를 &lt;strong&gt;효율적&lt;/strong&gt;으로 검색할 수 있게 해줍니다. 정확도와 속도 간 균형을 맞추기 위해, 유사도 계산을 &lt;strong&gt;근사&lt;/strong&gt;하는 접근입니다. HNSW는 낮은 지연 시간에 높은 재현율을 제공하고, PQ는 &lt;strong&gt;메모리 사용량을 크게 줄일&lt;/strong&gt; 수 있는 장점이 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;6. 활용 사례 (Applications and Use Cases)&lt;/h2&gt;
&lt;h3&gt;6.1 시맨틱 검색 (Semantic Search)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%2013.png"&gt;&lt;/p&gt;
&lt;p&gt;임베딩 기반 검색은 문서의 &lt;strong&gt;의미&lt;/strong&gt;를 기준으로 콘텐츠를 찾도록 해주어, 단순 키워드 매칭을 넘어섭니다. 예컨대 사용자가 입력한 질의가 데이터베이스의 문구와 정확히 일치하지 않아도(동의어, 문장 변형 등) 유사한 의미라면 찾을 수 있습니다. 질의를 벡터로 변환하고, 미리 인덱싱된 벡터들과 비교하여 &lt;strong&gt;가장 연관성 높은 결과&lt;/strong&gt;를 빠르게 찾아냅니다.&lt;/p&gt;
&lt;h3&gt;6.2 추천 시스템 (Recommendation Systems)&lt;/h3&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%2014.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="../images/llm/image%2015.png"&gt;&lt;/p&gt;
&lt;p&gt;여러 추천 알고리즘은 사용자와 아이템(상품 등)을 임베딩으로 표현해, &lt;strong&gt;동일 벡터 공간&lt;/strong&gt;에서 가깝게 위치하는 항목을 추천합니다. 이는 과거 협업 필터링을 넘어, 사용자 리뷰나 제품 설명에서 추출한 &lt;strong&gt;심층 의미&lt;/strong&gt;까지 반영할 수 있게 만듭니다. 결과적으로 더 정교한 개인화 추천이 가능합니다.&lt;/p&gt;
&lt;h3&gt;6.3 질의응답(Question Answering, QA)&lt;/h3&gt;
&lt;p&gt;밀집 패시지 검색(Dense Passage Retrieval)은 대규모 텍스트 코퍼라에서 &lt;strong&gt;관련성 높은 문단&lt;/strong&gt;을 빠르게 찾는 QA 기법입니다. “프랑스의 수도는?” 같은 질의를 벡터로 만들고, 대규모 말뭉치 내 문단 임베딩들과 비교하여 검색 공간을 대폭 축소합니다. 키워드 기반 방식과 결합하면, &lt;strong&gt;정확도&lt;/strong&gt;를 더욱 높일 수 있습니다.&lt;/p&gt;
&lt;h3&gt;6.4 군집화와 토픽 모델링 (Clustering and Topic Modeling)&lt;/h3&gt;
&lt;p&gt;문서를 동일 임베딩 공간에 투영하면, 비지도 학습으로 &lt;strong&gt;비슷한 문서끼리&lt;/strong&gt; 묶을 수 있습니다. 이는 대규모 텍스트에서 토픽을 발굴하거나, 특정 주제별로 빠르게 그룹화하는 데 유용합니다. t-SNE, UMAP 같은 시각화 기법으로 고차원 벡터를 2D/3D로 표현하면 &lt;strong&gt;내재된 주제나 관계&lt;/strong&gt;를 직관적으로 파악할 수 있습니다.&lt;/p&gt;
&lt;h3&gt;6.5 멀티모달 활용 사례 (Multimodal Use Cases)&lt;/h3&gt;
&lt;p&gt;텍스트와 이미지 등 여러 유형의 데이터를 동일 벡터 공간에 맵핑하는 &lt;strong&gt;멀티모달 임베딩&lt;/strong&gt;은 이미지 캡셔닝, 텍스트-이미지 검색, 크로스모달 추천 등 고급 활용을 가능케 합니다. 예컨대 CLIP 같은 모델은 이미지와 텍스트 임베딩을 &lt;strong&gt;동일 공간&lt;/strong&gt;에 배치해, 텍스트 설명으로 이미지를 검색하거나 반대로 이미지를 텍스트로 찾을 수도 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;7. 결론 (Conclusion)&lt;/h2&gt;
&lt;h3&gt;7.1 핵심 요약 (Key Takeaways)&lt;/h3&gt;
&lt;p&gt;LLM 임베딩은 시맨틱 검색부터 복합 추천 시스템까지 &lt;strong&gt;다양한 애플리케이션&lt;/strong&gt;에 활력을 불어넣는 강력한 표현 기법입니다. 벡터 데이터베이스는 이러한 임베딩을 대규모로 검색·활용할 수 있도록 하며, &lt;strong&gt;최신 지능형 시스템&lt;/strong&gt;을 구축하는 데 필수적입니다. 두 기술을 함께 숙지하면 한층 발전된 서비스를 만들 수 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Reference:&lt;/h2&gt;
&lt;p&gt;&lt;a href="../images/llm/%25E1%2584%2587%25E1%2585%25A6%25E1%2586%25A8%25E1%2584%2590%25E1%2585%25A5_%25E1%2584%2580%25E1%2585%25A5%25E1%2586%25B7%25E1%2584%2589%25E1%2585%25A2%25E1%2586%25A8%25E1%2584%258B%25E1%2585%25B4_%25E1%2584%258C%25E1%2585%25A5%25E1%2586%25BC%25E1%2584%258C%25E1%2585%25A5%25E1%2586%25B7%25E1%2584%258B%25E1%2585%25A6_%25E1%2584%258B%25E1%2585%25A9%25E1%2584%2585%25E1%2585%25B3%25E1%2584%2583%25E1%2585%25A1.pdf"&gt;벡터 검색의 정점에 오르다.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="../images/llm/%25E1%2584%2589%25E1%2585%25A5%25E1%2584%258E%25E1%2585%25B5%25E1%2584%2591%25E1%2585%25B5%25E1%2584%2583%25E1%2585%25B3_-_SERP_%25E1%2584%258B%25E1%2585%25A6%25E1%2584%2589%25E1%2585%25A5_SURF_%25E1%2584%2585%25E1%2585%25A9_%25E1%2584%258C%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2592%25E1%2585%25AA%25E1%2584%2592%25E1%2585%25A1%25E1%2584%2582%25E1%2585%25B3%25E1%2586%25AB_%25E1%2584%2580%25E1%2585%25A5%25E1%2586%25B7%25E1%2584%2589%25E1%2585%25A2%25E1%2586%25A8_%25E1%2584%258B%25E1%2585%25B5%25E1%2586%25B7%25E1%2584%2592%25E1%2585%25B4%25E1%2584%258C%25E1%2585%25A2_%25E1%2584%2580%25E1%2585%25B5%25E1%2586%25B7%25E1%2584%2589%25E1%2585%25A6%25E1%2584%2592%25E1%2585%25AE%25E1%2586%25AB.pdf"&gt;서치피드 - SERP 에서 SURF 로 진화하는 검색_임희재_김세훈.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="../images/llm/%25E1%2584%2589%25E1%2585%25A5%25E1%2584%258E%25E1%2585%25B5%25E1%2584%2591%25E1%2585%25B5%25E1%2584%2583%25E1%2585%25B3_-_SERP_%25E1%2584%258B%25E1%2585%25A6%25E1%2584%2589%25E1%2585%25A5_SURF_%25E1%2584%2585%25E1%2585%25A9_%25E1%2584%258C%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2592%25E1%2585%25AA%25E1%2584%2592%25E1%2585%25A1%25E1%2584%2582%25E1%2585%25B3%25E1%2586%25AB_%25E1%2584%2580%25E1%2585%25A5%25E1%2586%25B7%25E1%2584%2589%25E1%2585%25A2%25E1%2586%25A8_%25E1%2584%258B%25E1%2585%25B5%25E1%2586%25B7%25E1%2584%2592%25E1%2585%25B4%25E1%2584%258C%25E1%2585%25A2_%25E1%2584%2580%25E1%2585%25B5%25E1%2586%25B7%25E1%2584%2589%25E1%2585%25A6%25E1%2584%2592%25E1%2585%25AE%25E1%2586%25AB%201.pdf"&gt;서치피드 - SERP 에서 SURF 로 진화하는 검색_임희재_김세훈.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="../images/llmpdf"&gt;네이버페이 결제 서비스 성장과 변화_김진한.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="../images/llm/%25E1%2584%258F%25E1%2585%25B3%25E1%2586%25AF%25E1%2584%2585%25E1%2585%25B5%25E1%2586%25B8_%25E1%2584%258F%25E1%2585%25B3%25E1%2584%2585%25E1%2585%25B5%25E1%2584%258B%25E1%2585%25A6%25E1%2584%258B%25E1%2585%25B5%25E1%2584%2590%25E1%2585%25A5%25E1%2584%258B%25E1%2585%25AA_%25E1%2584%2582%25E1%2585%25A6%25E1%2584%258B%25E1%2585%25B5%25E1%2584%2587%25E1%2585%25A5_%25E1%2584%258B%25E1%2585%25B2%25E1%2584%258C%25E1%2585%25A5%25E1%2584%2585%25E1%2585%25B3%25E1%2586%25AF_%25E1%2584%258B%25E1%2585%25A7%25E1%2586%25AB%25E1%2584%2580%25E1%2585%25A7%25E1%2586%25AF%25E1%2584%2592%25E1%2585%25A1%25E1%2584%2580%25E1%2585%25B5_%25E1%2584%2589%25E1%2585%25AD%25E1%2586%25BA%25E1%2584%2591%25E1%2585%25A9%25E1%2586%25B7_%25E1%2584%258F%25E1%2585%25A5%25E1%2586%25AB%25E1%2584%2590%25E1%2585%25A6%25E1%2586%25AB%25E1%2584%258E%25E1%2585%25B3_%25E1%2584%2580%25E1%2585%25A2%25E1%2584%258B%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2592%25E1%2585%25AA_%25E1%2584%258E%25E1%2585%25AE%25E1%2584%258E%25E1%2585%25A5%25E1%2586%25AB.pdf"&gt;클립 크리에이터와 네이버 유저를 연결하기 숏폼 컨텐츠 개인화 추천.pdf&lt;/a&gt;&lt;/p&gt;</content><category term="database"></category><category term="algorithm"></category><category term="database"></category></entry><entry><title>mysql 8.0 무중단 migration 방법</title><link href="https://blog.i544c.com/mysql-80-mujungdan-migration-bangbeob.html" rel="alternate"></link><published>2024-07-22T18:55:00+09:00</published><updated>2024-09-23T15:46:00+09:00</updated><author><name>박이삭</name></author><id>tag:blog.i544c.com,2024-07-22:/mysql-80-mujungdan-migration-bangbeob.html</id><summary type="html">&lt;p&gt;non-stop mysql 8.0 schema migration&lt;/p&gt;</summary><content type="html">&lt;h2&gt;배경&lt;/h2&gt;
&lt;p&gt;배포에서 디비 마이그레이션이 있을 때, 서비스에 장애발생 여부를 확인 하기 어려워 중단배포를 하는 경우가 있습니다.&lt;/p&gt;
&lt;p&gt;migration 시 일부 table lock이 발생하여 쿼리와 insert / update / delete 등 DML이 동작하지 않는 경우 서비스의 장애를 방생할 수 있습니다.&lt;/p&gt;
&lt;p&gt;다만 최신 RDBMS는 무중단 migration 기술을 지원합니다.&lt;/p&gt;
&lt;p&gt;실 서비스 중인 케어의 mysql 8.0을 기준으로 무중단 migration 기술소개와 동작원리, 중단, 무중단 마이그레이션 구분 방법 및 검증테스트 등 을 소개해드리려고 합니다.&lt;/p&gt;
&lt;h2&gt;배경기술&lt;/h2&gt;
&lt;h3&gt;SQL&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;DDL(Data Definition Language)&lt;/code&gt;는 디비의 스키마를 정의, 수정, 삭제 등 관리 가능한 sql입니다. Table관련으로 &lt;code&gt;CREATE&lt;/code&gt;, &lt;code&gt;ALTER&lt;/code&gt;, &lt;code&gt;DROP&lt;/code&gt;, &lt;code&gt;TRUNCATE&lt;/code&gt; 등이 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DML(Data Manipulation Language)&lt;/code&gt;는 디비의 table 내 개별 혹은 여러 row를 조회, 추가, 수정, 삭제 등 관리 가능한 sql입니다. &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt; 등이 있습니다.&lt;/p&gt;
&lt;p&gt;DCL, TCL은 이번 범위가 아니여 넘어가겠습니다.&lt;/p&gt;
&lt;h3&gt;Table-Copy algorithm&lt;/h3&gt;
&lt;p&gt;이전 mysql 버전은 모든 DDL 동작에 table-copy algorithm을 사용했습니다. 이는 전체 table lock이 포함되며 table 데이터 크기에 따라 필요 시 수 시간의 시간이 소요 됩니다.&lt;/p&gt;
&lt;p&gt;기본 원리는 전체 DML을 막도록 table lock을 걸고 데이터를 새로운 테이블에 복사하여 DDL을 적용합니다. 그 후 새로운 테이블 데이터를 기존 테이블에 복사하게 됩니다.&lt;/p&gt;
&lt;p&gt;이 케이스가 중단배포의 가장 큰 원인이고 이를 줄이거나 없이 할 수 있다면 무중단 배포가 가능합니다.&lt;/p&gt;
&lt;h3&gt;Online DDL&lt;/h3&gt;
&lt;p&gt;mysql 8.0 InnoDB storage engine에서는 Online DDL이라는 기술을 지원합니다.&lt;/p&gt;
&lt;p&gt;Online DDL이란 &lt;code&gt;instance&lt;/code&gt;, &lt;code&gt;in-place&lt;/code&gt; 테이블 변경이 가능하고 &lt;code&gt;Concurrent DML&lt;/code&gt;을 지원합니다.&lt;/p&gt;
&lt;p&gt;https://dev.mysql.com/doc/refman/8.0/en/innodb-online-ddl.html&lt;/p&gt;
&lt;p&gt;위 공식 문서의 online DDL에 대한 특징을 설명한 문구입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;테이블을 몇 분 또는 몇 시간 동안 사용할 수 없게 만드는 것이 실용적이지 않은 바쁜 생산 환경에서의 개선된 응답성과 가용성.&lt;/li&gt;
&lt;li&gt;실시간(in-place) 작업의 경우, LOCK 절을 사용하여 DDL 작업 중 성능과 동시성 사이의 균형을 조정할 수 있는 능력. 자세한 내용은 LOCK 절을 참조하십시오.&lt;/li&gt;
&lt;li&gt;copy-table 방법보다 적은 디스크 공간 사용 및 I/O 오버헤드.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;DDL Algorithm&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;instance:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;instance DDL algorithm은 meta데이터만 변경합니다. 일부 SQL 혹은 조건이 맞는 경우에만 사용 가능합니다.&lt;/p&gt;
&lt;p&gt;실제 데이터를 건들지 않기때문에 말 그대로 “바로” DDL을 실행 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;가능한 SQL과 조건은 아래에 자세한 설명으로 확인 하실 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;in-place:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;in-place DDL algorithm이란 table copy 없이 최소한의 lock을 활용해 기존 구조를 유지하며 데이터를 수정하는 방법입니다.&lt;/p&gt;
&lt;p&gt;LOCK=NONE 시 (아래 참고) concurrent DML을 지원하게 되는데, 필요한 데이터만(one row, meta data) lock을 사용합니다. DML이 종료 시 lock을 풀어주는 방식을 사용합니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;copy:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;이전 설명 한 table-copy algorithm 입니다.&lt;/p&gt;
&lt;h3&gt;in-place DDL Lock&lt;/h3&gt;
&lt;p&gt;LOCK은 &lt;code&gt;in-place&lt;/code&gt;으로 수행되는 작업에 사용될 수 있으며, 작업 중 테이블에 대한 동시 접근 정도를 미세 조정하는 데 유용합니다. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;instance&lt;/code&gt; 수행되는 작업에는 LOCK=DEFAULT만 지원됩니다. ALGORITHM 절은 주로 성능 비교를 위해 사용되며, 문제가 발생할 경우 기존의 테이블 복사 방법으로 돌아가기 위한 대안으로 사용됩니다. 예를 들어:&lt;/p&gt;
&lt;p&gt;실시간 ALTER TABLE 작업 중에 테이블을 읽기, 쓰기 또는 둘 다 사용할 수 없게 만드는 실수를 피하려면 ALTER TABLE 문에 &lt;strong&gt;LOCK=NONE(읽기 및 쓰기 허용)&lt;/strong&gt; 또는 LOCK=SHARED(읽기 허용)와 같은 절을 지정하십시오. 
요청된 수준의 동시성이 사용 불가능한 경우 작업은 즉시 중단됩니다.&lt;/p&gt;
&lt;h3&gt;목표&lt;/h3&gt;
&lt;p&gt;무중단 배포, lock free DDL을 실행하기 위하여 아래의 조건을 만족시켜야 됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;instance DDL algorithm 사용&lt;/li&gt;
&lt;li&gt;in-place DDL algorithm &amp;amp;&amp;amp; LOCK=NONE 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;확인방법&lt;/h2&gt;
&lt;p&gt;일반적으로 온라인 DDL을 활성화하기 위해 특별한 조치를 취할 필요는 없습니다. 기본적으로 MySQL은 가능한 최소한의 &lt;code&gt;LOCK&lt;/code&gt;으로 &lt;code&gt;instance&lt;/code&gt;이거나 &lt;code&gt;in-place&lt;/code&gt;으로 작업을 수행합니다.&lt;/p&gt;
&lt;p&gt;DDL 작업의 측면을 제어하려면 ALTER TABLE 문에서 ALGORITHM 및 LOCK 절을 사용할 수 있습니다. 이 절들은 테이블 및 열 지정에서 쉼표로 구분하여 문장의 끝에 배치됩니다. 예를 들어:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tbl_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;PRIMARY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;column&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ALGORITHM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;INPLACE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LOCK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;NONE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;서비스 영향을 최소화하면서 가능한 알고리즘을 확인해 보는 방법:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ALGORITHM=INSTANT 옵션으로 스키마 변경을 시도&lt;/li&gt;
&lt;li&gt;실패하면 ALGORITHM=INPLACE, LOCK=NONE 옵션으로 스키마 변경을 시도&lt;/li&gt;
&lt;li&gt;실패하면 ALGORITHM=INPLACE, LOCK=SHARED 옵션으로 스키마 변경을 시도&lt;/li&gt;
&lt;li&gt;실패하면 ALGORITHM=COPY, LOCK=SHARED 옵션으로 스키마 변경을 시도&lt;/li&gt;
&lt;li&gt;실패하면 ALGORITHM=COPY, LOCK=EXCLUSIVE 옵션으로 스키마 변경을 시도&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;&amp;gt;&amp;gt; 1, 2번으로 되지 않는다면 DML을 멈춘 다음 스키마 변경을 해야 하는 작업임.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blog.bespinglobal.com/post/mysql-online-ddl-%EB%B3%84-%EC%A0%81%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-8-0-%EC%9D%B4%EC%83%81/"&gt;[blog.bespinglobal.com/post/mysql-online-ddl-별-적용-가능한-알고리즘-8-0-이상]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;아래 링크에서 정리 된 table로 확인 할 수 도 있습니다:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;https://dev.mysql.com/doc/refman/8.0/en/innodb-online-ddl-operations.html&lt;/p&gt;
&lt;p&gt;&lt;img alt="Untitled" src="../images/mysql_8_migration/Untitled.png"&gt;&lt;/p&gt;
&lt;p&gt;예시로 &lt;strong&gt;adding column DDL&lt;/strong&gt;은 최악으로 &lt;code&gt;in-place&lt;/code&gt;, &lt;code&gt;lock=NONE(permits concurrent DML)&lt;/code&gt;인 것을 확인 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;주의할 점은 adding column DDL의 rebuilds table 예외는 아래와 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Changing the Data Type&lt;/strong&gt;: If the column addition involves a data type change that affects the physical storage format.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Column Position&lt;/strong&gt;: If the column is added at a specific position other than the end, especially in older versions before MySQL 8.0.29.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Row Format&lt;/strong&gt;: If the table uses &lt;code&gt;ROW_FORMAT=COMPRESSED&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Space Limitations&lt;/strong&gt;: If the addition exceeds the maximum row size limits.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;가장 처음의 table physical storage format들은 아래와 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Compact&lt;/strong&gt;: Stores data compactly, minimizing storage usage.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Redundant&lt;/strong&gt;: Legacy format, uses more storage.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dynamic&lt;/strong&gt;: Stores variable-length columns efficiently.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compressed&lt;/strong&gt;: Compresses data for storage efficiency.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;django단 확인&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;sqlmigration&lt;/code&gt; 장고커멘드로 마이그레이션 시 실행되는 SQL을 확인 할 수 있습니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;isaacpark@Isaacui-MacBookPro&lt;span class="w"&gt; &lt;/span&gt;memo-service-backend&lt;span class="w"&gt; &lt;/span&gt;%&lt;span class="w"&gt; &lt;/span&gt;./manage.py&lt;span class="w"&gt; &lt;/span&gt;sqlmigrate&lt;span class="w"&gt; &lt;/span&gt;ecg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0059&lt;/span&gt;
Invalid&lt;span class="w"&gt; &lt;/span&gt;line:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;LOG_LEVEL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;DEBUG

&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Current&lt;span class="w"&gt; &lt;/span&gt;Secret&lt;span class="w"&gt; &lt;/span&gt;ID:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;********-env&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Current&lt;span class="w"&gt; &lt;/span&gt;ENV&lt;span class="w"&gt; &lt;/span&gt;file:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;.env.isaacpark&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;*&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;AWS&lt;span class="w"&gt; &lt;/span&gt;ENV:&lt;span class="w"&gt; &lt;/span&gt;prod&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;IAM:&lt;span class="w"&gt; &lt;/span&gt;isaac.park+prod@*****.com

--
--&lt;span class="w"&gt; &lt;/span&gt;Alter&lt;span class="w"&gt; &lt;/span&gt;field&lt;span class="w"&gt; &lt;/span&gt;cloud_status&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;ecgtest
--
ALTER&lt;span class="w"&gt; &lt;/span&gt;TABLE&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;******&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;MODIFY&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;*****&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;integer&lt;span class="w"&gt; &lt;/span&gt;NOT&lt;span class="w"&gt; &lt;/span&gt;NULL&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;검증 테스트&lt;/h2&gt;
&lt;p&gt;mysq 8.0.32(prod 버전) docker compose 실행&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Docker compose file of mysql 8.0.32&lt;/span&gt;
&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;3.8&amp;#39;&lt;/span&gt;
&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;mysql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mysql:8.0.32&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;3306:3306&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;MYSQL_ROOT_PASSWORD=secret&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;MYSQL_DATABASE=mydb&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;MYSQL_USER=myuser&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;MYSQL_PASSWORD=mypassword&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;기본 table 생성&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;-- create a table named TEST, with column A, B, C all int dafault 0&lt;/span&gt;
&lt;span class="c1"&gt;-- on database mydb&lt;/span&gt;
&lt;span class="n"&gt;USE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mydb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TEST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;PRIMARY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;DEFAULT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;DEFAULT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;DEFAULT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;테스트 데이터 추가&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;# Insert 200,000 rows into the TEST table&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;n&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;..200000&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;INSERT INTO TEST (A, B, C) VALUES (%d, %d, %d);\n&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mysql&lt;span class="w"&gt; &lt;/span&gt;-h&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1&lt;span class="w"&gt; &lt;/span&gt;-P&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3306&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;root&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;--init-command&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;USE mydb; SET sql_log_bin=off; SET GLOBAL innodb_flush_log_at_trx_commit=0;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;DML 테스트 코드&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;mysql.connector&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="c1"&gt;# Database configuration&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;database&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mydb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Function to perform random DML operations&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;perform_dml_operations&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;operation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;insert&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;update&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;operation&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;insert&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;INSERT INTO TEST (A, B, C, D, E) VALUES (&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                               &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;operation&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;update&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UPDATE TEST SET A = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, B = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, C = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, D = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, E = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; WHERE id = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;800_000&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
            &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt; operation completed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Error: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Function to perform the DDL operation&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;perform_ddl_operation&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ALTER TABLE TEST ADD COLUMN D INT DEFAULT 0, ALGORITHM=INPLACE, LOCK=NONE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Create threads for DML operations&lt;/span&gt;
&lt;span class="n"&gt;dml_threads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# Number of concurrent DML threads&lt;/span&gt;
    &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;perform_dml_operations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;dml_threads&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Perform the DDL operation&lt;/span&gt;
&lt;span class="n"&gt;perform_ddl_operation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Wait for DML threads to complete (optional)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dml_threads&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;테스트 데이터 개수&lt;/p&gt;
&lt;p&gt;&lt;img alt="Untitled" src="../images/mysql_8_migration/Untitled%201.png"&gt;&lt;/p&gt;
&lt;p&gt;DDL 실행 시 소요시간&lt;/p&gt;
&lt;p&gt;&lt;img alt="Untitled" src="../images/mysql_8_migration/Untitled%202.png"&gt;&lt;/p&gt;
&lt;p&gt;DDL 실행 시 DML 스크립트 로그:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Untitled" src="../images/mysql_8_migration/Untitled%203.png"&gt;&lt;/p&gt;
&lt;h2&gt;한계 및 대안&lt;/h2&gt;
&lt;p&gt;https://medium.com/daangn/mysql-online-ddl-faf47439084c 블로그에서 언급한 것 과 같이 간단한 DDL은 online DDL로 가능하지만, foreign key, index, primary key 등 변경이 큰 DDL같은 경우 불가능 한 경우가 있습니다. 이런 경우 &lt;code&gt;pt-online-schema-change&lt;/code&gt;란 percona사의 마이그레이션 툴을 사용방법이 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pt-online-schema-change&lt;/code&gt;는 MySQL 테이블에 비차단 방식으로 스키마 변경을 적용하는 Percona Toolkit의 도구입니다. 이 도구는 원하는 변경 사항이 포함된 새 테이블을 생성하고, 데이터를 원본 테이블에서 새 테이블로 청크 단위로 복사한 후 테이블을 교체합니다. 동적 청크 크기 조정을 지원하여 서버 성능에 미치는 영향을 최소화하고, 동시 접근 및 부하를 관리하는 옵션을 포함합니다. 이를 통해 다운타임을 줄이고 스키마 수정 동안 데이터 무결성을 유지합니다.&lt;/p&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://dev.mysql.com/doc/refman/8.0/en/innodb-online-ddl-operations.html&lt;/li&gt;
&lt;li&gt;https://dev.mysql.com/doc/refman/8.0/en/innodb-online-ddl.html&lt;/li&gt;
&lt;li&gt;https://medium.com/daangn/mysql-online-ddl-faf47439084c&lt;/li&gt;
&lt;li&gt;https://medium.com/practo-engineering/mysql-zero-downtime-schema-update-without-algorithm-inplace-fd427ec5b681&lt;/li&gt;
&lt;li&gt;https://blog.bespinglobal.com/post/mysql-online-ddl-별-적용-가능한-알고리즘-8-0-이상/&lt;/li&gt;
&lt;/ul&gt;</content><category term="database"></category><category term="backend"></category><category term="database"></category><category term="django"></category><category term="migration"></category></entry></feed>